{"version":3,"sources":["luga.data.min.js","luga.data.js","luga.data.core.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.ChildJsonDataSet.js","luga.data.region.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js"],"names":["luga","namespace","data","version","dataSourceRegistry","CONST","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","ERROR_MESSAGES","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","undefined","setDataSource","dataSource","string","format","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","filter","rows","dataset","jQuery","isFunction","retRows","i","length","filteredRow","isPlainObject","push","update","formatter","formattedRow","key","DataSet","options","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","resetCurrentRow","applyFormatter","hasFormatter","selectAll","clearFilter","notifyObservers","orig","rowToDelete","splice","setState","getColumnType","columnName","getContext","context","entities","select","recordCount","getRecordsCount","stateDesc","getState","merge","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","indexOf","getRowByIndex","index","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","isArray","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","addObserver","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","constructor","url","timeout","cache","headers","dataType","xhrRequest","loadUrl","xhrOptions","success","response","textStatus","jqXHR","loadRecords","error","xhrError","ajax","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","errorThrown","message","status","JsonDataSet","path","rawJson","getRawJson","getPath","loadRawJson","json","lookupProperty","setPath","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","parentDataSet","urlPattern","fetchData","bindUrl","replaceProperty","region","CUSTOM_ATTRIBUTES","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","getReferenceFromNode","node","init","dataSourceId","attr","regionType","RegionClass","lookupFunction","assembleRegionDescription","config","ds","document","ready","each","item","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","split","applyTraits","traitData","func","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","fetchTemplate","compile","html","templateNode","templateSrc","generateHtml","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","nodes","find","cssClass","removeClass","get","addClass","jItem","click","event","preventDefault","setRowId","setRowIndex","rowIndex","parseInt","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar"],"mappings":"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","file":"luga.data.min.js","sourcesContent":[null,null,"if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\tluga.data.version = \"0.3.12\";\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} uuid\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throws\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.STATE\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {boolean}          isStateLoading\r\n\t * @property {boolean}          isStateError\r\n\t * @property {boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throws\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      filter. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @returns {array.<luga.data.DataSet.row>}\r\n\t * @throws\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(jQuery.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FORMATTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      updater. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @throws\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(jQuery.isFunction(formatter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(jQuery.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {string}  state\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {number}                         recordCount\r\n\t * @property {array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}                uuid       Unique identifier. Required\r\n\t * @property {array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"Luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"Luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"Luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"Luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"Luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"Luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"Luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"Luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"Luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"Luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"Luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"Luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (jQuery.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (jQuery.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} filter   A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @returns {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @returns {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(jQuery.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} filter   An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @returns {array.<luga.data.DataSet.row>}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  New index. Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fires stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fires preDataSorted\r\n\t\t * @fires dataSorted\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter.  Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater. Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            uuid     Unique identifier. Required\r\n\t * @property {luga.data.DataSet} dataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"Luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"Luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.dataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.dataSet = options.dataSet;\r\n\t\tthis.dataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.dataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.dataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.dataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string}    url       URL to be fetched. Default to null\r\n\t * @property {number}    timeout   Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {object}    headers   A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {boolean}   cache     If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                 It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = {};\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tself.delete();\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         JSON data. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {string}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.replaceProperty(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {jquery} node\r\n\t * @returns {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.description\r\n\t *\r\n\t * @property {jquery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @returns {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tjQuery(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {string} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {array.<string>} traits                      An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @fires regionRendered\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.region.Base\r\n\t * @fires regionRendered\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\t\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t\t// It's a detailSet, abort\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t // Remove class from everyone\r\n\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}