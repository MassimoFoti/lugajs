{"version":3,"sources":["luga.data.core.js","luga.data.xml.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.XmlDataSet.js","luga.data.Rss2DataSet.js","luga.data.ChildJsonDataSet.js","luga.data.ChildXmlDataSet.js","luga.data.PagedView.js","luga.data.region.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js","luga.data.widgets.PagingBar.js","luga.data.widgets.ShowMore.js"],"names":["luga","namespace","data","dataSourceRegistry","CONST","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","ERROR_MESSAGES","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","undefined","setDataSource","dataSource","string","format","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","filter","rows","dataset","type","retRows","i","length","filteredRow","isPlainObject","push","update","formatter","formattedRow","key","getTextValue","node","child","childNodes","nodeType","nodeHasText","nextSibling","xml","MIME_TYPE","ATTRIBUTE_PREFIX","DOM_ACTIVEX_NAME","evaluateXPath","path","retArray","window","ActiveXObject","selectedNodes","selectNodes","result","XPathEvaluator","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToHash","obj","attributes","attr","name","value","attributesToProperties","isArray","tagName","nodeName","constructor","Array","curValue","childObj","childrenToProperties","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlDOMObj","async","setProperty","loadXML","DOMParser","DataSet","options","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","notifyObservers","delete","orig","rowToDelete","splice","setState","getColumnType","columnName","getContext","context","entities","select","recordCount","getRecordsCount","stateDesc","getState","merge","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","indexOf","getRowByIndex","index","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","addObserver","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","url","timeout","cache","headers","incrementalLoad","contentType","xhrRequest","cancelRequest","abort","getUrl","loadData","xhrOptions","success","response","loadRecords","error","xhrError","xhr","Request","send","setUrl","newUrl","message","status","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","json","loadFromJson","JSON","parse","responseText","lookupProperty","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","nodes","Rss2Dataset","channelElements","itemElements","channelMeta","extractRecords","forEach","element","item","rec","itemToHash","items","channel","setChannelMeta","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","populate","ChildXmlDataSet","PagedView","pageSize","currentPage","currentOffsetStart","getCurrentOffsetStart","getCurrentOffsetEnd","currentPageNumber","getCurrentPageIndex","currentPageRecordCount","currentOffsetEnd","getPageSize","pageCount","getPagesCount","offSet","parseInt","goToPage","pageNumber","isPageInRange","goToNextPage","goToPrevPage","isPagedView","region","CUSTOM_ATTRIBUTES","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","config","autoregister","setup","getReferenceFromNode","init","dataSourceId","getAttribute","regionType","RegionClass","lookupFunction","initRegions","rootNode","document","querySelector","querySelectorAll","assembleRegionDescription","ds","dom","ready","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","split","applyTraits","traitData","func","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","innerHTML","compile","templateNode","getElementById","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","removeCssClass","className","classList","remove","cssClass","add","addSelectEvent","addEventListener","event","preventDefault","setRowId","addRowIdEvent","setRowIndex","rowIndex","addRowIndexEvent","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","dataType","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar","PAGING_STYLE","LINKS","PAGES","widgets","PagingBar","INVALID_PAGED_VIEW_PARAMETER","INVALID_NODE_PARAMETER","INVALID_STYLE_PARAMETER","pagedView","Element","style","isValidStyle","nextText","prevText","separator","maxLinks","renderPrevLink","text","pageIndex","textNode","createTextNode","linkNode","createElement","setAttribute","appendChild","addGoToPageEvent","renderNextLink","renderMainLinks","recordsCount","pagesCount","currentPageIndex","endIndex","getEndIndex","labelText","getLabelText","renderCurrentLink","renderCurrentText","renderSeparator","linkText","strongNode","separatorNode","startIndex","tempPos","startText","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents"],"mappings":"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","file":"luga.data.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.type(formatter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","/* global ActiveXObject */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.xml\");\r\n\r\n\tluga.data.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.data.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.data.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @return {Array<Node>}\r\n\t */\r\n\tluga.data.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @return {Object}\r\n\t */\r\n\tluga.data.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.data.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.data.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @return {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @return {String}\r\n\t */\r\n\tluga.data.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.data.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @return {Document}\r\n\t */\r\n\tluga.data.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.data.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.setProperty(\"SelectionLanguage\", \"XPath\");\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.data.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<String>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<String>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.type(options.formatter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.type(options.filter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(Array.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<String>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.DetailSet: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = [];\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.contentType = \"text/plain\";\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response);\r\n\t\t\t\t},\r\n\t\t\t\tcontentType: self.contentType,\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tself.xhrRequest = new luga.xhr.Request(xhrOptions);\r\n\t\t\tself.xhrRequest.send(self.url);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(response){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, response.status]),\r\n\t\t\t\tresponse: response\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tloadFromJson(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tloadFromJson(JSON.parse(response.responseText));\r\n\t\t};\r\n\r\n\t\tvar loadFromJson = function(json){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords({\r\n\t\t\t\tresponseText: xmlStr\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tvar xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.data.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.data.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given an <item> node, extract its content inside a JavaScript object\r\n\t\t * @param {Node} item\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\tvar element = self.itemElements[i];\r\n\t\t\t\tvar nodes = luga.data.xml.evaluateXPath(item, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\trec[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {Node} channel\r\n\t\t */\r\n\t\tvar setChannelMeta = function(channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tvar element = self.channelElements[i];\r\n\t\t\t\tvar nodes = luga.data.xml.evaluateXPath(channel, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\tself.channelMeta[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Turn an array of <items> nodes into an array of records\r\n\t\t * @param {Array.<Node>} nodes\r\n\t\t * @return {Array.<Object>|Object}\r\n\t\t */\r\n\t\tvar extractRecords = function(nodes){\r\n\t\t\tvar records = [];\r\n\t\t\tnodes.forEach(function(element){\r\n\t\t\t\trecords.push(itemToHash(element));\r\n\t\t\t});\r\n\t\t\treturn records;\r\n\t\t};\r\n\r\n\t\t/* Utilities */\r\n\r\n\t\t/**\r\n\t\t * Extract text out of a TEXT or CDATA node\r\n\t\t * @param {Node} node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfunction getTextValue(node){\r\n\t\t\tvar child = node.childNodes[0];\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\t\treturn child.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tvar xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\t// Extract metadata\r\n\t\t\tvar channelNodes = luga.data.xml.evaluateXPath(xmlDoc, \"//channel\");\r\n\t\t\tsetChannelMeta(channelNodes[0]);\r\n\t\t\t// Insert all records\r\n\t\t\tvar items = luga.data.xml.evaluateXPath(xmlDoc, \"//item\");\r\n\t\t\tvar records = extractRecords(items);\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.context\r\n\t *\r\n\t * @extend luga.data.DataSet.context\r\n\t * @property {Number} currentPageNumber        The current page index. Starting at 1\r\n\t * @property {Number} currentPageRecordCount   The total number of records in the current page\r\n\t * @property {Number} pageCount                The total number of pages required to display all of the data\r\n\t * @property {Number} pageSize                 The maximum number of items that can be in a page\r\n\t * @property {Number} currentOffsetStart       Zero-based offset of the first record inside the current page\r\n\t * @property {Number} currentOffsetEnd         Zero-based offset of the last record inside the current page\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Instance of a dataSet. Required\r\n\t * @property {Number}            pageSize       The max number of rows in a given page. Default to 10\r\n\t */\r\n\r\n\t/*\r\n\t *  PagedView class\r\n\t *  Works by reading a dataSet and extracting information out of it in order to generate additional information that can be used for paging\r\n\t *\r\n\t * @param {luga.data.PagedView.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t */\r\n\tluga.data.PagedView = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.PagedView: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.PagedView: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.PagedView} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\tvar pageSize = 10;\r\n\t\tif(options.pageSize !== undefined){\r\n\t\t\tpageSize = options.pageSize;\r\n\t\t}\r\n\r\n\t\tvar currentPage = 1;\r\n\t\tvar currentOffsetStart = 0;\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.PagedView.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = self.parentDataSet.getContext();\r\n\t\t\tcontext.entities = context.entities.slice(self.getCurrentOffsetStart(), self.getCurrentOffsetEnd() + 1);\r\n\t\t\t// Additional fields\r\n\t\t\tcontext.currentPageNumber = self.getCurrentPageIndex();\r\n\t\t\tcontext.currentPageRecordCount = context.entities.length;\r\n\t\t\tcontext.currentOffsetEnd = self.getCurrentOffsetEnd();\r\n\t\t\tcontext.currentOffsetStart = self.getCurrentOffsetStart();\r\n\t\t\tcontext.pageSize = self.getPageSize();\r\n\t\t\tcontext.pageCount = self.getPagesCount();\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the last record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetEnd = function(){\r\n\t\t\tvar offSet = self.getCurrentOffsetStart() + self.getPageSize() - 1;\r\n\t\t\tif(offSet > self.getRecordsCount()){\r\n\t\t\t\toffSet = self.getRecordsCount();\r\n\t\t\t}\r\n\t\t\treturn offSet;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the first record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetStart = function(){\r\n\t\t\treturn currentOffsetStart;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the current page index. Starting at 1\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentPageIndex = function(){\r\n\t\t\treturn currentPage;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the total number of pages required to display all of the data\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPagesCount = function(){\r\n\t\t\treturn parseInt((self.parentDataSet.getRecordsCount() + self.getPageSize() - 1) / self.getPageSize());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the maximum number of items that can be in a page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPageSize = function(){\r\n\t\t\treturn pageSize;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the given page number\r\n\t\t * Fails silently if the given page number is out of range\r\n\t\t * It also change the index of the current row to match the first record in the page\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.goToPage = function(pageNumber){\r\n\t\t\tif(self.isPageInRange(pageNumber) === false){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(pageNumber === self.getCurrentPageIndex()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPage = pageNumber;\r\n\t\t\tcurrentOffsetStart = ((pageNumber - 1) * self.getPageSize());\r\n\r\n\t\t\tself.setCurrentRowIndex(self.getCurrentOffsetStart());\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the next page\r\n\t\t * Fails silently if the current page is the last one\r\n\t\t */\r\n\t\tthis.goToNextPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() + 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the previous page\r\n\t\t * Fails silently if the current page is the first one\r\n\t\t */\r\n\t\tthis.goToPrevPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() - 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given page is within range. False otherwise\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPageInRange = function(pageNumber){\r\n\t\t\tif(pageNumber < 1 || pageNumber > self.getPagesCount()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * To be used for type checking\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPagedView = function(){\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/* Proxy methods */\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\treturn self.parentDataSet.getCurrentRowIndex();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn self.parentDataSet.getRecordsCount();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet .loadData() method, if any\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(self.parentDataSet.loadData !== undefined){\r\n\t\t\t\tself.parentDataSet.loadData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\tself.parentDataSet.setCurrentRowId(rowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tself.parentDataSet.setCurrentRowIndex(index);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tself.parentDataSet.setState(newState);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * Be aware this only sort the data, it does not affects pagination\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\tself.parentDataSet.sort(columnNames, sortOrder);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on luga.dom.ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {HTMLElement} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE];\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, initialize the relevant Region handler\r\n\t * @param {HTMLElement} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === null){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === null){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {HTMLElement|undefined} [rootNode]   Optional, default to <body>\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.querySelector(\"body\");\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(rootNode !== null){\r\n\t\t\tvar nodes = rootNode.querySelectorAll(luga.data.region.CONST.SELECTORS.REGION);\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\tluga.data.region.init(nodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {HTMLElement}                                node   A DOM node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {HTMLElement } node                          The DOM node that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<String>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.node === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== null){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE] = this;\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {HTMLElement} node\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.innerHTML);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = document.getElementById(self.config.templateId);\r\n\t\t\t\tif(templateNode === null){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.getAttribute(\"src\");\r\n\t\t\t\tif(templateSrc === null){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.innerHTML);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response.responseText);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(response){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar xhr = new luga.xhr.Request(xhrOptions);\r\n\t\t\t\t\txhr.send(templateSrc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.innerHTML = this.generateHtml();\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {HTMLElement}                            node          A DOM node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\tvar removeCssClass = function(nodes, className){\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tnodes[i].classList.remove(className);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SELECT);\r\n\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t// It's a detailSet, abort\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(nodes.length > 0){\r\n\t\t\tvar cssClass = nodes[0].getAttribute(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\tnodes[0].classList.remove(cssClass);\r\n\t\t\t// Default to first row\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tnodes[index].classList.add(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event to all nodes\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\tvar element = nodes[i];\r\n\t\t\t\taddSelectEvent(element, cssClass, nodes);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar addSelectEvent = function(element, cssClass, nodes){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\telement.classList.add(cssClass);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_ID);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\tvar rowId = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\taddRowIdEvent(element, rowId, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tvar addRowIdEvent = function(element, rowId, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowId(rowId);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_INDEX);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\tvar rowIndex = parseInt(element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\taddRowIndexEvent(element, rowIndex, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tvar addRowIndexEvent = function(element, rowIndex, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowIndex(rowIndex);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SORT);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t}, false);\r\n\t\t}\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.PagingBar.options\r\n\t *\r\n\t * @property {luga.data.PagedView}     pagedView  Instance of a pagedView that will be controlled by the widget. Required\r\n\t * @property {Element}                 node       DOM element that will contain the widget. Required\r\n\t * @property {luga.data.PAGING_STYLE}  style      Style to be used for the widget, either \"luga-pagingBarLinks\" or \"luga-pagingBarPages\". Default to \"luga-pagingBarLinks\"\r\n\t * @property {String}                  nextText   Text to be used for \"next\" links. Default to \">\"\r\n\t * @property {String}                  prevText   Text to be used for \"previous\" links. Default to \"<\"\r\n\t * @property {String}                  separator  Text to be used to separate links. Default to \" | \"\r\n\t * @property {Number}                  maxLinks   Maximum number of links to show. Default to 10\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.PAGING_STYLE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.PAGING_STYLE = {\r\n\t\tLINKS: \"luga-pagingBarLinks\",\r\n\t\tPAGES: \"luga-pagingBarPages\"\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed style is supported\r\n\t * @param {String}  style\r\n\t * @return {Boolean}\r\n\t */\r\n\tvar isValidStyle = function(style){\r\n\t\tfor(var key in luga.data.PAGING_STYLE){\r\n\t\t\tif(luga.data.PAGING_STYLE[key] === style){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * PagingBar widget\r\n\t * Given a pagedView, create a fully fledged pagination bar\r\n\t *\r\n\t * @param {luga.data.widgets.PagingBar.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.data.widgets.PagingBar = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tCSS_BASE_CLASS: \"luga-pagingBar\",\r\n\t\t\tSAFE_HREF: \"javascript:;\",\r\n\t\t\tLINKS_SEPARATOR: \" - \",\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_PAGED_VIEW_PARAMETER: \"luga.data.widgets.PagingBar: pagedView parameter is required. Must be an instance of luga.data.PagedView\",\r\n\t\t\t\tINVALID_NODE_PARAMETER: \"luga.data.widgets.PagingBar: node parameter is required. Must be a DOM Element\",\r\n\t\t\t\tINVALID_STYLE_PARAMETER: \"luga.data.widgets.PagingBar: style parameter must be of type luga.data.PAGING_STYLE\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.pagedView === undefined || (options.pagedView.isPagedView === undefined || options.pagedView.isPagedView() === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PAGED_VIEW_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.node === undefined || options.node instanceof Element === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_NODE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.style !== undefined && isValidStyle(options.style) === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_STYLE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.PagedView} */\r\n\t\t\tpagedView: undefined,\r\n\t\t\t/** @type {Element} */\r\n\t\t\tnode: undefined,\r\n\t\t\tstyle: luga.data.PAGING_STYLE.LINKS,\r\n\t\t\tnextText: \">\",\r\n\t\t\tprevText: \"<\",\r\n\t\t\tseparator: \" | \",\r\n\t\t\tmaxLinks: 10\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.data.widgets.PagingBar}\r\n\t\t */\r\n\t\tvar self = this;\r\n\t\t// Alias/shortcuts\r\n\t\tvar pagedView = self.config.pagedView;\r\n\t\tvar node = self.config.node;\r\n\r\n\t\tpagedView.addObserver(this);\r\n\r\n\t\t// Add CSS\r\n\t\tnode.classList.add(CONST.CSS_BASE_CLASS);\r\n\t\tnode.classList.add(self.config.style);\r\n\r\n\t\tvar render = function(){\r\n\t\t\t// Reset UI\r\n\t\t\tnode.innerHTML = \"\";\r\n\t\t\tvar currentPageIndex = pagedView.getCurrentPageIndex();\r\n\r\n\t\t\tif(pagedView.getPagesCount() > 1){\r\n\t\t\t\trenderPrevLink(self.config.prevText, currentPageIndex);\r\n\t\t\t\trenderMainLinks(self.config.maxLinks, self.config.style);\r\n\t\t\t\trenderNextLink(self.config.nextText, currentPageIndex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar renderPrevLink = function(text, pageIndex){\r\n\r\n\t\t\tvar textNode = document.createTextNode(text);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex - 1);\r\n\r\n\t\t\tif(pageIndex !== 1){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t};\r\n\r\n\t\tvar renderNextLink = function(text, pageIndex){\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t\tvar textNode = document.createTextNode(text);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex + 1);\r\n\r\n\t\t\tif(pageIndex !== pagedView.getPagesCount()){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar renderMainLinks = function(maxLinks, style){\r\n\t\t\tvar pageSize = pagedView.getPageSize();\r\n\t\t\tvar recordsCount = pagedView.getRecordsCount();\r\n\t\t\tvar pagesCount = pagedView.getPagesCount();\r\n\t\t\tvar currentPageIndex = pagedView.getCurrentPageIndex();\r\n\t\t\tvar endIndex = getEndIndex(currentPageIndex, maxLinks, pagesCount);\r\n\r\n\t\t\t// Page numbers are between 1 and n. So the loop start from 1\r\n\t\t\tfor(var i = 1; i < (endIndex + 1); i++){\r\n\r\n\t\t\t\tvar labelText = getLabelText(i, style, pageSize, pagesCount, recordsCount);\r\n\t\t\t\tif(i !== currentPageIndex){\r\n\t\t\t\t\trenderCurrentLink(i, labelText);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// No link on current page\r\n\t\t\t\t\trenderCurrentText(labelText);\r\n\t\t\t\t}\r\n\t\t\t\t// No separator on last entry\r\n\t\t\t\tif(i < endIndex){\r\n\t\t\t\t\trenderSeparator();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar renderCurrentLink = function(i, linkText){\r\n\t\t\tvar textNode = document.createTextNode(linkText);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, i);\r\n\t\t\tnode.appendChild(linkNode);\r\n\t\t};\r\n\r\n\t\tvar renderCurrentText = function(labelText){\r\n\t\t\tvar textNode = document.createTextNode(labelText);\r\n\t\t\tvar strongNode = document.createElement(\"strong\");\r\n\t\t\tstrongNode.appendChild(textNode);\r\n\t\t\tnode.appendChild(strongNode);\r\n\t\t};\r\n\r\n\t\tvar renderSeparator = function(){\r\n\t\t\tvar separatorNode = document.createTextNode(self.config.separator);\r\n\t\t\tnode.appendChild(separatorNode);\r\n\t\t};\r\n\r\n\t\tvar addGoToPageEvent = function(linkNode, pageNumber){\r\n\t\t\tlinkNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tpagedView.goToPage(pageNumber);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tvar getEndIndex = function(currentPageIndex, maxLinks, pagesCount){\r\n\t\t\tvar startIndex = parseInt(currentPageIndex - parseInt(maxLinks / 2));\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\t\t\tvar tempPos = startIndex + maxLinks - 1;\r\n\t\t\tvar endIndex = pagesCount;\r\n\t\t\tif(tempPos < pagesCount){\r\n\t\t\t\tendIndex = tempPos;\r\n\t\t\t}\r\n\t\t\treturn endIndex;\r\n\t\t};\r\n\r\n\t\tvar getLabelText = function(i, style, pageSize, pagesCount, recordsCount){\r\n\t\t\tvar labelText = \"\";\r\n\r\n\t\t\tif(style === luga.data.PAGING_STYLE.PAGES){\r\n\t\t\t\tlabelText = i;\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(style === luga.data.PAGING_STYLE.LINKS){\r\n\t\t\t\tvar startText = \"\";\r\n\t\t\t\tvar endText = \"\";\r\n\t\t\t\tif(i !== 1){\r\n\t\t\t\t\tstartText = (pageSize * (i - 1)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// First link\r\n\t\t\t\t\tstartText = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < pagesCount){\r\n\t\t\t\t\tendText = startText + pageSize - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Last link\r\n\t\t\t\t\tendText = recordsCount;\r\n\t\t\t\t}\r\n\t\t\t\tlabelText = startText + CONST.LINKS_SEPARATOR + endText;\r\n\t\t\t}\r\n\r\n\t\t\treturn labelText;\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\trender();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {HTMLElement}  button     Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {HTMLElement} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\tif(self.config.button === null){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\r\n\t\t\tself.config.button.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tself.config.button.classList.add(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tself.config.button.classList.remove(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}