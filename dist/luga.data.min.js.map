{"version":3,"sources":["luga.data.min.js","luga.data.core.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js"],"names":["luga","namespace","data","version","dataSourceRegistry","CONST","PK_KEY","PK_KEY_PREFIX","COL_TYPES","DEFAULT_REGION_TYPE","CUSTOM_ATTRIBUTES","REGION","REGION_TYPE","TEMPLATE","DATA_SOURCE","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","PRE_DATA_SORTED","LOADING","XHR_ERROR","SELECTORS","ERROR_MESSAGES","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","USER_AGENT","XHR_TIMEOUT","getDataSource","id","undefined","setDataSource","dataSource","initRegion","node","dataSourceId","attr","string","format","regionType","RegionClass","lookupFunction","jQuery","document","ready","each","index","item","DataSet","options","INVALID_COL_TYPE","INVALID_ID_PARAMETER","INVALID_FILTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","filter","isFunction","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","filterRecords","resetCurrentRow","orig","filtered","i","length","newRow","push","selectAll","clearFilter","notifyObservers","getColumnType","columnName","getContext","context","select","getCurrentRow","row","getCurrentRowId","getCurrentRowIndex","getRowIndex","getRecordsCount","getRowById","rowId","getRowByIndex","fetchedRow","indexOf","getSortColumn","getSortOrder","insert","recordsHolder","isArray","isPlainObject","recordID","setCurrentRowId","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","DetailSet","INVALID_DS_PARAMETER","addObserver","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","constructor","url","timeout","cache","dataType","xhrRequest","loadUrl","xhrOptions","success","loadRecords","headers","X-Requested-With","error","xhrError","ajax","cancelRequest","abort","getUrl","loadData","response","textStatus","jqXHR","setUrl","newUrl","errorThrown","message","status","JsonDataSet","path","getPath","lookupProperty","setPath","region","Handlebars","INVALID_TRAIT","MISSING_HANDLEBARS","MISSING_NODE","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","MESSAGES","config","dsId","templateId","traits","merge","template","concat","fetchTemplate","compile","html","templateNode","templateSrc","render","applyTraits","traitData","func","generateHtml","SET_ROW_ID","SET_ROW_INDEX","SORT","setRowId","find","jItem","click","event","preventDefault","setRowIndex","rowIndex","parseInt","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","key","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar"],"mappings":"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","file":"luga.data.min.js","sourcesContent":[null,"if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.version = \"0.2.4\";\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tPK_KEY: \"rowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tREGION: \"data-lugads-region\",\r\n\t\t\tREGION_TYPE: \"data-lugads-regiontype\",\r\n\t\t\tTEMPLATE: \"data-lugads-template\",\r\n\t\t\tDATA_SOURCE: \"data-lugads-datasource\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tLOADING: \"loading\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugads-region]\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugads-datasource attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tUSER_AGENT: \"luga.data\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} id\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(id){\r\n\t\tif(luga.data.dataSourceRegistry[id] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[id];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                id\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t */\r\n\tluga.data.setDataSource = function(id, dataSource){\r\n\t\tluga.data.dataSourceRegistry[id] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws\r\n\t */\r\n\tluga.data.initRegion = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tjQuery(luga.data.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.initRegion(jQuery(item));\r\n\t\t});\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}              id         Unique identifier. Required\r\n\t * @property {array.<object>|object} records  Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function|null}       filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"Luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_ID_PARAMETER: \"Luga.DataSet: id parameter is required\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"Luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"Luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"Luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"Luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"Luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"Luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"Luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"Luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.id === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (jQuery.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.id = options.id;\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\t\tthis.currentRowId = null;\r\n\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.id, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = filterRecords(self.records, self.filter);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar filterRecords = function(orig, filter){\r\n\t\t\tvar filtered = [];\r\n\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\tvar newRow = filter(this, orig[i], i);\r\n\t\t\t\tif(newRow){\r\n\t\t\t\t\tfiltered.push(newRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn filtered;\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function|null} filter   An optional filter function. If specified only records matching the filter will be returned. Default to null\r\n\t\t *                                 The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t\tthis.resetCurrentRow();\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.records = filterRecords(selectAll(), filter);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {{context: array.<luga.data.DataSet.row>}}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\treturn {context: self.select()};\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\tvar row = this.recordsHash[this.getCurrentRowId()];\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn row;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * The rowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the data set are sorted\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn this.getRowIndex(row);\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tif(this.recordsHash[rowId] !== undefined){\r\n\t\t\t\treturn this.recordsHash[rowId];\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs. Required\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(jQuery.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.length > 0){\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function|null} filter   An optional filter function. If specified only records matching the filter will be returned. Default to null\r\n\t\t *                                 The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @return {array.<luga.data.DataSet.row>}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn filterRecords(selectAll(), filter);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(colName) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sort the data\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\r\n\t\t\t// Keep state\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\tif(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            id       Unique identifier. Required\r\n\t * @property {luga.data.DataSet} dataSet  Master dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_ID_PARAMETER: \"Luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"Luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.id === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.dataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.id = options.id;\r\n\t\tthis.dataSet = options.dataSet;\r\n\t\tthis.dataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.id, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\treturn this.row;\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.dataSet.getCurrentRow();\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.dataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.loading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string|null}   url       URL to be fetched. Default to null\r\n\t * @property {number}        timeout   Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {boolean}       cache     If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                     It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires loading\r\n\t * @fires xhrError\r\n\t * @throws\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: self.loadRecords,\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires off XHR request to fetch and load the data, notify observers (\"loading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Does nothing if URL is not set\r\n\t\t * @fires loading\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tthis.delete();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, child classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Receives HTTP response, extracts and loads records out of it\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(response);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(response, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node             Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {string} dsId             DataSource's id. Can be specified inside the data-lugads-datasource too. Required\r\n\t * @property {{array.<string>} traits  An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId       Id of HTML element containing the template. Can be specified inside the data-lugads-template too.\r\n\t *                                     If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Data Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @listens dataChanged\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region.Handlebars invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region.Handlebars was unable find the region node\",\r\n\t\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(typeof(Handlebars) === \"undefined\"){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_HANDLEBARS);\r\n\t\t}\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(CONST.MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsId: options.node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.TEMPLATE) || null,\r\n\t\t\ttraits: options.traits || []\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = luga.data.getDataSource(this.config.dsId);\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = [\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t];\r\n\t\tif(self.config.traits.length > 0){\r\n\t\t\tthis.traits = this.traits.concat(options.traits);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_TRAIT, [func]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\tthis.render = function(){\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSET_ROW_ID: \"data-lugads-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugads-setrowindex\",\r\n\t\t\tSORT: \"data-lugads-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSET_ROW_ID: \"*[data-lugads-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugads-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugads-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = a[prop];\r\n\t\t\tvar dB = b[prop];\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = a[prop];\r\n\t\t\tvar dB = b[prop];\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}