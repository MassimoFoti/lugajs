{"version":3,"sources":["luga.data.core.js","luga.data.xml.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.XmlDataSet.js","luga.data.Rss2DataSet.js","luga.data.ChildJsonDataSet.js","luga.data.ChildXmlDataSet.js","luga.data.PagedView.js","luga.data.region.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js","luga.data.widgets.PagingBar.js","luga.data.widgets.ShowMore.js"],"names":["luga","namespace","data","dataSourceRegistry","CONST","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","ERROR_MESSAGES","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","undefined","setDataSource","dataSource","string","format","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","filter","rows","dataset","type","retRows","i","length","filteredRow","isPlainObject","push","update","formatter","formattedRow","key","getTextValue","node","child","childNodes","nodeType","nodeHasText","nextSibling","xml","MIME_TYPE","ATTRIBUTE_PREFIX","DOM_ACTIVEX_NAME","evaluateXPath","path","retArray","window","XPathEvaluator","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","ActiveXObject","selectedNodes","selectNodes","nodeToHash","obj","attributes","attr","name","value","attributesToProperties","isArray","tagName","nodeName","constructor","Array","curValue","childObj","childrenToProperties","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlParser","xmlDOMObj","async","setProperty","loadXML","DOMParser","DataSet","options","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","notifyObservers","delete","orig","rowToDelete","splice","setState","getColumnType","columnName","getContext","context","entities","select","recordCount","getRecordsCount","stateDesc","getState","merge","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","indexOf","getRowByIndex","index","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","addObserver","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","url","timeout","cache","headers","incrementalLoad","contentType","xhrRequest","cancelRequest","abort","getUrl","loadData","xhrOptions","success","response","loadRecords","error","xhrError","xhr","Request","send","loadUrl","setUrl","newUrl","message","status","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","json","loadFromJson","JSON","parse","responseText","lookupProperty","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","nodes","Rss2Dataset","channelElements","itemElements","channelMeta","extractRecords","forEach","element","item","rec","itemToHash","items","channel","setChannelMeta","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","populate","ChildXmlDataSet","PagedView","pageSize","currentPage","currentOffsetStart","getCurrentOffsetStart","getCurrentOffsetEnd","currentPageNumber","getCurrentPageIndex","currentPageRecordCount","currentOffsetEnd","getPageSize","pageCount","getPagesCount","offSet","parseInt","goToPage","pageNumber","isPageInRange","goToNextPage","goToPrevPage","isPagedView","region","CUSTOM_ATTRIBUTES","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","config","autoregister","setup","getReferenceFromNode","init","dataSourceId","getAttribute","regionType","RegionClass","lookupFunction","initRegions","rootNode","document","querySelector","querySelectorAll","assembleRegionDescription","ds","dom","ready","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","split","applyTraits","traitData","func","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","innerHTML","compile","templateNode","getElementById","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","removeCssClass","className","classList","remove","cssClass","add","addSelectEvent","addEventListener","event","preventDefault","setRowId","addRowIdEvent","setRowIndex","rowIndex","addRowIndexEvent","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","dataType","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar","PAGING_STYLE","LINKS","PAGES","widgets","PagingBar","INVALID_PAGED_VIEW_PARAMETER","INVALID_NODE_PARAMETER","INVALID_STYLE_PARAMETER","pagedView","Element","style","isValidStyle","nextText","prevText","separator","maxLinks","renderPrevLink","text","pageIndex","textNode","createTextNode","linkNode","createElement","setAttribute","appendChild","addGoToPageEvent","renderNextLink","renderMainLinks","recordsCount","pagesCount","currentPageIndex","endIndex","getEndIndex","labelText","getLabelText","renderCurrentLink","renderCurrentText","renderSeparator","linkText","strongNode","separatorNode","startIndex","tempPos","startText","endText","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents"],"mappings":"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","file":"luga.data.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tconst retRows = [];\r\n\t\tfor(let i = 0; i < rows.length; i++){\r\n\t\t\tconst filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.type(formatter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(let i = 0; i < rows.length; i++){\r\n\t\t\tconst formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(let key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","/* global ActiveXObject */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.xml\");\r\n\r\n\tluga.data.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.data.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.data.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.6.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @return {Array<Node>}\r\n\t */\r\n\tluga.data.xml.evaluateXPath = function(node, path){\r\n\t\tconst retArray = [];\r\n\t\t/* istanbul ignore else IE-only */\r\n\t\tif(window.XPathEvaluator !== undefined){\r\n\t\t\tconst evaluator = new XPathEvaluator();\r\n\t\t\tconst result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tlet currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(window.ActiveXObject !== undefined){\r\n\t\t\tconst selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(let i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retArray;\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @return {Object}\r\n\t */\r\n\tluga.data.xml.nodeToHash = function(node){\r\n\t\tconst obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i = 0; i < node.attributes.length; i++){\r\n\t\t\tconst attr = node.attributes[i];\r\n\t\t\tobj[luga.data.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(let i = 0; i < node.childNodes.length; i++){\r\n\t\t\tconst child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tlet isArray = false;\r\n\t\t\t\tconst tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tconst curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconst childObj = luga.data.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @return {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tconst child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tconst child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @return {String}\r\n\t */\r\n\tluga.data.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\t// IE11 supports XMLSerializer but fails on serializeToString()\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.data.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @return {Document}\r\n\t */\r\n\tluga.data.xml.parseFromString = function(xmlStr){\r\n\t\tlet xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\t// IE11 supports DOMParser but fails on parseFromString()\r\n\t\t\tconst xmlDOMObj = new ActiveXObject(luga.data.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.setProperty(\"SelectionLanguage\", \"XPath\");\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tconst domDoc = xmlParser.parseFromString(xmlStr, luga.data.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<String>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<String>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.type(options.formatter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.type(options.filter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tconst deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tconst applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tconst hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tconst selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tconst orig = this.records;\r\n\t\t\t\tfor(let i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tconst rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tconst row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tconst targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tlet fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tlet recordsHolder = [];\r\n\t\t\tif(Array.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(let i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tconst recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tconst targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<String>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(let i = 0; i < columnNames.length; i++){\r\n\t\t\t\tconst colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tconst fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tconst oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tconst sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tconst sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tconst sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tlet sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(let i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tconst columnToSortName = sortColumns[i];\r\n\t\t\t\tconst columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tconst sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tconst buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tlet ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tconst assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tconst defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tconst filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.DetailSet: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = [];\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.contentType = \"text/plain\";\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tconst loadUrl = function(){\r\n\t\t\tconst xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response);\r\n\t\t\t\t},\r\n\t\t\t\tcontentType: self.contentType,\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tself.xhrRequest = new luga.xhr.Request(xhrOptions);\r\n\t\t\tself.xhrRequest.send(self.url);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(response){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, response.status]),\r\n\t\t\t\tresponse: response\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tconst self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tloadFromJson(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tloadFromJson(JSON.parse(response.responseText));\r\n\t\t};\r\n\r\n\t\tconst loadFromJson = function(json){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tconst self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords({\r\n\t\t\t\tresponseText: xmlStr\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tconst xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tconst nodes = luga.data.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tconst records = [];\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.data.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given an <item> node, extract its content inside a JavaScript object\r\n\t\t * @param {Node} item\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tconst itemToHash = function(item){\r\n\t\t\tconst rec = {};\r\n\t\t\tfor(let i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\tconst element = self.itemElements[i];\r\n\t\t\t\tconst nodes = luga.data.xml.evaluateXPath(item, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\trec[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {Node} channel\r\n\t\t */\r\n\t\tconst setChannelMeta = function(channel){\r\n\t\t\tfor(let i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tconst element = self.channelElements[i];\r\n\t\t\t\tconst nodes = luga.data.xml.evaluateXPath(channel, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\tself.channelMeta[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Turn an array of <items> nodes into an array of records\r\n\t\t * @param {Array.<Node>} nodes\r\n\t\t * @return {Array.<Object>}\r\n\t\t */\r\n\t\tconst extractRecords = function(nodes){\r\n\t\t\tconst records = [];\r\n\t\t\tnodes.forEach(function(element){\r\n\t\t\t\trecords.push(itemToHash(element));\r\n\t\t\t});\r\n\t\t\treturn records;\r\n\t\t};\r\n\r\n\t\t/* Utilities */\r\n\r\n\t\t/**\r\n\t\t * Extract text out of a TEXT or CDATA node\r\n\t\t * @param {Node} node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfunction getTextValue(node){\r\n\t\t\tconst child = node.childNodes[0];\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\t\treturn child.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tconst xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\t// Extract metadata\r\n\t\t\tconst channelNodes = luga.data.xml.evaluateXPath(xmlDoc, \"//channel\");\r\n\t\t\tsetChannelMeta(channelNodes[0]);\r\n\t\t\t// Insert all records\r\n\t\t\tconst items = luga.data.xml.evaluateXPath(xmlDoc, \"//item\");\r\n\t\t\tconst records = extractRecords(items);\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tconst bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tconst bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.context\r\n\t *\r\n\t * @extend luga.data.DataSet.context\r\n\t * @property {Number} currentPageNumber        The current page index. Starting at 1\r\n\t * @property {Number} currentPageRecordCount   The total number of records in the current page\r\n\t * @property {Number} pageCount                The total number of pages required to display all of the data\r\n\t * @property {Number} pageSize                 The maximum number of items that can be in a page\r\n\t * @property {Number} currentOffsetStart       Zero-based offset of the first record inside the current page\r\n\t * @property {Number} currentOffsetEnd         Zero-based offset of the last record inside the current page\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Instance of a dataSet. Required\r\n\t * @property {Number}            pageSize       The max number of rows in a given page. Default to 10\r\n\t */\r\n\r\n\t/*\r\n\t *  PagedView class\r\n\t *  Works by reading a dataSet and extracting information out of it in order to generate additional information that can be used for paging\r\n\t *\r\n\t * @param {luga.data.PagedView.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t */\r\n\tluga.data.PagedView = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.PagedView: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.PagedView: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.PagedView} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\tlet pageSize = 10;\r\n\t\tif(options.pageSize !== undefined){\r\n\t\t\tpageSize = options.pageSize;\r\n\t\t}\r\n\r\n\t\tlet currentPage = 1;\r\n\t\tlet currentOffsetStart = 0;\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.PagedView.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = self.parentDataSet.getContext();\r\n\t\t\tcontext.entities = context.entities.slice(self.getCurrentOffsetStart(), self.getCurrentOffsetEnd() + 1);\r\n\t\t\t// Additional fields\r\n\t\t\tcontext.currentPageNumber = self.getCurrentPageIndex();\r\n\t\t\tcontext.currentPageRecordCount = context.entities.length;\r\n\t\t\tcontext.currentOffsetEnd = self.getCurrentOffsetEnd();\r\n\t\t\tcontext.currentOffsetStart = self.getCurrentOffsetStart();\r\n\t\t\tcontext.pageSize = self.getPageSize();\r\n\t\t\tcontext.pageCount = self.getPagesCount();\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the last record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetEnd = function(){\r\n\t\t\tlet offSet = self.getCurrentOffsetStart() + self.getPageSize() - 1;\r\n\t\t\tif(offSet > self.getRecordsCount()){\r\n\t\t\t\toffSet = self.getRecordsCount();\r\n\t\t\t}\r\n\t\t\treturn offSet;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the first record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetStart = function(){\r\n\t\t\treturn currentOffsetStart;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the current page index. Starting at 1\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentPageIndex = function(){\r\n\t\t\treturn currentPage;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the total number of pages required to display all of the data\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPagesCount = function(){\r\n\t\t\treturn parseInt((self.parentDataSet.getRecordsCount() + self.getPageSize() - 1) / self.getPageSize());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the maximum number of items that can be in a page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPageSize = function(){\r\n\t\t\treturn pageSize;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the given page number\r\n\t\t * Fails silently if the given page number is out of range\r\n\t\t * It also change the index of the current row to match the first record in the page\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.goToPage = function(pageNumber){\r\n\t\t\tif(self.isPageInRange(pageNumber) === false){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(pageNumber === self.getCurrentPageIndex()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPage = pageNumber;\r\n\t\t\tcurrentOffsetStart = ((pageNumber - 1) * self.getPageSize());\r\n\r\n\t\t\tself.setCurrentRowIndex(self.getCurrentOffsetStart());\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the next page\r\n\t\t * Fails silently if the current page is the last one\r\n\t\t */\r\n\t\tthis.goToNextPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() + 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the previous page\r\n\t\t * Fails silently if the current page is the first one\r\n\t\t */\r\n\t\tthis.goToPrevPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() - 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given page is within range. False otherwise\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPageInRange = function(pageNumber){\r\n\t\t\tif(pageNumber < 1 || pageNumber > self.getPagesCount()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * To be used for type checking\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPagedView = function(){\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/* Proxy methods */\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\treturn self.parentDataSet.getCurrentRowIndex();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn self.parentDataSet.getRecordsCount();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet .loadData() method, if any\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(self.parentDataSet.loadData !== undefined){\r\n\t\t\t\tself.parentDataSet.loadData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\tself.parentDataSet.setCurrentRowId(rowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tself.parentDataSet.setCurrentRowIndex(index);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tself.parentDataSet.setState(newState);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * Be aware this only sort the data, it does not affects pagination\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\tself.parentDataSet.sort(columnNames, sortOrder);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on luga.dom.ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tconst config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {HTMLElement} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE];\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, initialize the relevant Region handler\r\n\t * @param {HTMLElement} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tconst dataSourceId = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === null){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tconst dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tlet regionType = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === null){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tconst RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {HTMLElement|undefined} [rootNode]   Optional, default to <body>\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.querySelector(\"body\");\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(rootNode !== null){\r\n\t\t\tconst nodes = rootNode.querySelectorAll(luga.data.region.CONST.SELECTORS.REGION);\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\tluga.data.region.init(nodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {HTMLElement}                                node   A DOM node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {HTMLElement } node                          The DOM node that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<String>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.node === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tconst attrTraits = this.config.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== null){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE] = this;\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tconst traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(let i = 0; i < this.traits.length; i++){\r\n\t\t\t\tconst func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tconst desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tconst self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {HTMLElement} node\r\n\t\t */\r\n\t\tconst fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.innerHTML);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst templateNode = document.getElementById(self.config.templateId);\r\n\t\t\t\tif(templateNode === null){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tconst templateSrc = templateNode.getAttribute(\"src\");\r\n\t\t\t\tif(templateSrc === null){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.innerHTML);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tconst xhrOptions = {\r\n\t\t\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response.responseText);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(response){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst xhr = new luga.xhr.Request(xhrOptions);\r\n\t\t\t\t\txhr.send(templateSrc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.innerHTML = this.generateHtml();\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tconst desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {HTMLElement}                            node          A DOM node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tconst CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\tconst removeCssClass = function(nodes, className){\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tnodes[i].classList.remove(className);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SELECT);\r\n\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t// It's a detailSet, abort\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(nodes.length > 0){\r\n\t\t\tconst cssClass = nodes[0].getAttribute(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\tnodes[0].classList.remove(cssClass);\r\n\t\t\t// Default to first row\r\n\t\t\tlet index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tnodes[index].classList.add(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event to all nodes\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\tconst element = nodes[i];\r\n\t\t\t\taddSelectEvent(element, cssClass, nodes);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst addSelectEvent = function(element, cssClass, nodes){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\telement.classList.add(cssClass);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_ID);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tconst rowId = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\taddRowIdEvent(element, rowId, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tconst addRowIdEvent = function(element, rowId, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowId(rowId);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_INDEX);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tconst rowIndex = parseInt(element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\taddRowIndexEvent(element, rowIndex, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tconst addRowIndexEvent = function(element, rowIndex, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowIndex(rowIndex);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SORT);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tconst sortCol = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t}, false);\r\n\t\t}\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tconst CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(let key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tlet dA = luga.lookupProperty(a, prop);\r\n\t\t\tlet dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tlet dA = luga.lookupProperty(a, prop);\r\n\t\t\tlet dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tconst tA = a.toString();\r\n\t\t\tconst tB = b.toString();\r\n\t\t\tconst tAlower = tA.toLowerCase();\r\n\t\t\tconst tBlower = tB.toLowerCase();\r\n\t\t\tconst minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(let i = 0; i < minLen; i++){\r\n\t\t\t\tconst aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tconst bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tconst aChar = tA.charAt(i);\r\n\t\t\t\tconst bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tconst tA = a.toString();\r\n\t\t\tconst tB = b.toString();\r\n\t\t\tconst tAlower = tA.toLowerCase();\r\n\t\t\tconst tBlower = tB.toLowerCase();\r\n\t\t\tconst minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(let i = 0; i < minLen; i++){\r\n\t\t\t\tconst aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tconst bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tconst aChar = tA.charAt(i);\r\n\t\t\t\tconst bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.PagingBar.options\r\n\t *\r\n\t * @property {luga.data.PagedView}     pagedView  Instance of a pagedView that will be controlled by the widget. Required\r\n\t * @property {Element}                 node       DOM element that will contain the widget. Required\r\n\t * @property {luga.data.PAGING_STYLE}  style      Style to be used for the widget, either \"luga-pagingBarLinks\" or \"luga-pagingBarPages\". Default to \"luga-pagingBarLinks\"\r\n\t * @property {String}                  nextText   Text to be used for \"next\" links. Default to \">\"\r\n\t * @property {String}                  prevText   Text to be used for \"previous\" links. Default to \"<\"\r\n\t * @property {String}                  separator  Text to be used to separate links. Default to \" | \"\r\n\t * @property {Number}                  maxLinks   Maximum number of links to show. Default to 10\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.PAGING_STYLE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.PAGING_STYLE = {\r\n\t\tLINKS: \"luga-pagingBarLinks\",\r\n\t\tPAGES: \"luga-pagingBarPages\"\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed style is supported\r\n\t * @param {String}  style\r\n\t * @return {Boolean}\r\n\t */\r\n\tconst isValidStyle = function(style){\r\n\t\tfor(let key in luga.data.PAGING_STYLE){\r\n\t\t\tif(luga.data.PAGING_STYLE[key] === style){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * PagingBar widget\r\n\t * Given a pagedView, create a fully fledged pagination bar\r\n\t *\r\n\t * @param {luga.data.widgets.PagingBar.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.data.widgets.PagingBar = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tCSS_BASE_CLASS: \"luga-pagingBar\",\r\n\t\t\tSAFE_HREF: \"javascript:;\",\r\n\t\t\tLINKS_SEPARATOR: \" - \",\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_PAGED_VIEW_PARAMETER: \"luga.data.widgets.PagingBar: pagedView parameter is required. Must be an instance of luga.data.PagedView\",\r\n\t\t\t\tINVALID_NODE_PARAMETER: \"luga.data.widgets.PagingBar: node parameter is required. Must be a DOM Element\",\r\n\t\t\t\tINVALID_STYLE_PARAMETER: \"luga.data.widgets.PagingBar: style parameter must be of type luga.data.PAGING_STYLE\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.pagedView === undefined || (options.pagedView.isPagedView === undefined || options.pagedView.isPagedView() === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PAGED_VIEW_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.node === undefined || options.node instanceof Element === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_NODE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.style !== undefined && isValidStyle(options.style) === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_STYLE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.PagedView} */\r\n\t\t\tpagedView: undefined,\r\n\t\t\t/** @type {Element} */\r\n\t\t\tnode: undefined,\r\n\t\t\tstyle: luga.data.PAGING_STYLE.LINKS,\r\n\t\t\tnextText: \">\",\r\n\t\t\tprevText: \"<\",\r\n\t\t\tseparator: \" | \",\r\n\t\t\tmaxLinks: 10\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.data.widgets.PagingBar}\r\n\t\t */\r\n\t\tconst self = this;\r\n\t\t// Alias/shortcuts\r\n\t\tconst pagedView = self.config.pagedView;\r\n\t\tconst node = self.config.node;\r\n\r\n\t\tpagedView.addObserver(this);\r\n\r\n\t\t// Add CSS\r\n\t\tnode.classList.add(CONST.CSS_BASE_CLASS);\r\n\t\tnode.classList.add(self.config.style);\r\n\r\n\t\tconst render = function(){\r\n\t\t\t// Reset UI\r\n\t\t\tnode.innerHTML = \"\";\r\n\t\t\tconst currentPageIndex = pagedView.getCurrentPageIndex();\r\n\r\n\t\t\tif(pagedView.getPagesCount() > 1){\r\n\t\t\t\trenderPrevLink(self.config.prevText, currentPageIndex);\r\n\t\t\t\trenderMainLinks(self.config.maxLinks, self.config.style);\r\n\t\t\t\trenderNextLink(self.config.nextText, currentPageIndex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst renderPrevLink = function(text, pageIndex){\r\n\r\n\t\t\tconst textNode = document.createTextNode(text);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex - 1);\r\n\r\n\t\t\tif(pageIndex !== 1){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t};\r\n\r\n\t\tconst renderNextLink = function(text, pageIndex){\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t\tconst textNode = document.createTextNode(text);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex + 1);\r\n\r\n\t\t\tif(pageIndex !== pagedView.getPagesCount()){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst renderMainLinks = function(maxLinks, style){\r\n\t\t\tconst pageSize = pagedView.getPageSize();\r\n\t\t\tconst recordsCount = pagedView.getRecordsCount();\r\n\t\t\tconst pagesCount = pagedView.getPagesCount();\r\n\t\t\tconst currentPageIndex = pagedView.getCurrentPageIndex();\r\n\t\t\tconst endIndex = getEndIndex(currentPageIndex, maxLinks, pagesCount);\r\n\r\n\t\t\t// Page numbers are between 1 and n. So the loop start from 1\r\n\t\t\tfor(let i = 1; i < (endIndex + 1); i++){\r\n\r\n\t\t\t\tconst labelText = getLabelText(i, style, pageSize, pagesCount, recordsCount);\r\n\t\t\t\tif(i !== currentPageIndex){\r\n\t\t\t\t\trenderCurrentLink(i, labelText);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// No link on current page\r\n\t\t\t\t\trenderCurrentText(labelText);\r\n\t\t\t\t}\r\n\t\t\t\t// No separator on last entry\r\n\t\t\t\tif(i < endIndex){\r\n\t\t\t\t\trenderSeparator();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tconst renderCurrentLink = function(i, linkText){\r\n\t\t\tconst textNode = document.createTextNode(linkText);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, i);\r\n\t\t\tnode.appendChild(linkNode);\r\n\t\t};\r\n\r\n\t\tconst renderCurrentText = function(labelText){\r\n\t\t\tconst textNode = document.createTextNode(labelText);\r\n\t\t\tconst strongNode = document.createElement(\"strong\");\r\n\t\t\tstrongNode.appendChild(textNode);\r\n\t\t\tnode.appendChild(strongNode);\r\n\t\t};\r\n\r\n\t\tconst renderSeparator = function(){\r\n\t\t\tconst separatorNode = document.createTextNode(self.config.separator);\r\n\t\t\tnode.appendChild(separatorNode);\r\n\t\t};\r\n\r\n\t\tconst addGoToPageEvent = function(linkNode, pageNumber){\r\n\t\t\tlinkNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tpagedView.goToPage(pageNumber);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst getEndIndex = function(currentPageIndex, maxLinks, pagesCount){\r\n\t\t\tlet startIndex = parseInt(currentPageIndex - parseInt(maxLinks / 2));\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\t\t\tconst tempPos = startIndex + maxLinks - 1;\r\n\t\t\tlet endIndex = pagesCount;\r\n\t\t\tif(tempPos < pagesCount){\r\n\t\t\t\tendIndex = tempPos;\r\n\t\t\t}\r\n\t\t\treturn endIndex;\r\n\t\t};\r\n\r\n\t\tconst getLabelText = function(i, style, pageSize, pagesCount, recordsCount){\r\n\t\t\tlet labelText = \"\";\r\n\r\n\t\t\tif(style === luga.data.PAGING_STYLE.PAGES){\r\n\t\t\t\tlabelText = i;\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(style === luga.data.PAGING_STYLE.LINKS){\r\n\t\t\t\tlet startText = \"\";\r\n\t\t\t\tlet endText = \"\";\r\n\t\t\t\tif(i !== 1){\r\n\t\t\t\t\tstartText = (pageSize * (i - 1)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// First link\r\n\t\t\t\t\tstartText = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < pagesCount){\r\n\t\t\t\t\tendText = startText + pageSize - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Last link\r\n\t\t\t\t\tendText = recordsCount;\r\n\t\t\t\t}\r\n\t\t\t\tlabelText = startText + CONST.LINKS_SEPARATOR + endText;\r\n\t\t\t}\r\n\r\n\t\t\treturn labelText;\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\trender();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tconst self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tlet isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tlet bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tconst newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {HTMLElement}  button     Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {HTMLElement} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tconst self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\tif(self.config.button === null){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\r\n\t\t\tself.config.button.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tself.config.button.classList.add(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tself.config.button.classList.remove(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}