{"version":3,"sources":["luga.data.min.js","luga.data.core.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js"],"names":["luga","namespace","data","version","dataSourceRegistry","CONST","PK_KEY","PK_KEY_PREFIX","COL_TYPES","DEFAULT_REGION_TYPE","CUSTOM_ATTRIBUTES","DATA_SOURCE","REGION","REGION_TYPE","TEMPLATE","TRAITS","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","SELECTORS","ERROR_MESSAGES","INVALID_STATE","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","USER_AGENT","XHR_TIMEOUT","getDataSource","id","undefined","setDataSource","dataSource","initRegion","node","dataSourceId","attr","string","format","regionType","RegionClass","lookupFunction","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","key","jQuery","document","ready","each","index","item","DataSet","options","INVALID_COL_TYPE","INVALID_ID_PARAMETER","INVALID_FILTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","filter","isFunction","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","filterRecords","resetCurrentRow","orig","filtered","i","length","newRow","push","selectAll","clearFilter","notifyObservers","setState","getColumnType","columnName","getContext","stateDesc","getState","rsData","context","select","recordCount","getRecordsCount","merge","getCurrentRow","row","getCurrentRowId","getCurrentRowIndex","getRowIndex","getRowById","rowId","getRowByIndex","fetchedRow","indexOf","getSortColumn","getSortOrder","insert","recordsHolder","isArray","isPlainObject","recordID","setCurrentRowId","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","DetailSet","INVALID_DS_PARAMETER","addObserver","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","constructor","url","timeout","cache","dataType","xhrRequest","loadUrl","xhrOptions","success","response","textStatus","jqXHR","loadRecords","headers","X-Requested-With","error","xhrError","ajax","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","errorThrown","message","status","JsonDataSet","path","rawJson","getRawJson","getPath","loadRawJson","json","lookupProperty","setPath","region","Base","INVALID_TRAIT","MISSING_NODE","config","dsId","templateId","traits","ds","attrTraits","concat","split","applyTraits","traitData","func","render","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","fetchTemplate","compile","html","templateNode","templateSrc","generateHtml","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","nodes","find","cssClass","removeClass","get","addClass","jItem","click","event","preventDefault","setRowId","setRowIndex","rowIndex","parseInt","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar"],"mappings":"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","file":"luga.data.min.js","sourcesContent":[null,"if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\tluga.data.version = \"0.2.7\";\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tPK_KEY: \"rowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE: \"data-lugads-datasource\",\r\n\t\t\tREGION: \"data-lugads-region\",\r\n\t\t\tREGION_TYPE: \"data-lugads-regiontype\",\r\n\t\t\tTEMPLATE: \"data-lugads-template\",\r\n\t\t\tTRAITS: \"data-lugads-traits\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugads-region]\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\",\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugads-datasource attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tUSER_AGENT: \"luga.data\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} id\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(id){\r\n\t\tif(luga.data.dataSourceRegistry[id] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[id];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                id\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t */\r\n\tluga.data.setDataSource = function(id, dataSource){\r\n\t\tluga.data.dataSourceRegistry[id] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws\r\n\t */\r\n\tluga.data.initRegion = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.STATE\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {boolean}          isStateLoading\r\n\t * @property {boolean}          isStateError\r\n\t * @property {boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {string}  state\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tjQuery(luga.data.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.initRegion(jQuery(item));\r\n\t\t});\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {null|luga.data.STATE}      currentState\r\n\t * @property {null|luga.data.STATE}      oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {number}                                               recordCount\r\n\t * @property {array.<luga.data.DataSet.row>|luga.data.DataSet.row}  context\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}              id         Unique identifier. Required\r\n\t * @property {array.<object>|object} records  Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function|null}       filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"Luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_ID_PARAMETER: \"Luga.DataSet: id parameter is required\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"Luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"Luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"Luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"Luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"Luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"Luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"Luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"Luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"Luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.id === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (jQuery.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.id = options.id;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.id, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = filterRecords(self.records, self.filter);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar filterRecords = function(orig, filter){\r\n\t\t\tvar filtered = [];\r\n\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\tvar newRow = filter(this, orig[i], i);\r\n\t\t\t\tif(newRow){\r\n\t\t\t\t\tfiltered.push(newRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn filtered;\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function|null} filter   An optional filter function. If specified only records matching the filter will be returned. Default to null\r\n\t\t *                                 The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tthis.records = filterRecords(selectAll(), filter);\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tvar rsData = {\r\n\t\t\t\tcontext: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tluga.merge(stateDesc, rsData);\r\n\t\t\treturn stateDesc;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\tvar row = this.recordsHash[this.getCurrentRowId()];\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn row;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * The rowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the data set are sorted\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn this.getRowIndex(row);\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tif(this.recordsHash[rowId] !== undefined){\r\n\t\t\t\treturn this.recordsHash[rowId];\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs. Required\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(jQuery.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.length > 0){\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function|null} filter   An optional filter function. If specified only records matching the filter will be returned. Default to null\r\n\t\t *                                 The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @return {array.<luga.data.DataSet.row>}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn filterRecords(selectAll(), filter);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sort the data\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\tif(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            id       Unique identifier. Required\r\n\t * @property {luga.data.DataSet} dataSet  Master dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_ID_PARAMETER: \"Luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"Luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.id === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.dataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.id = options.id;\r\n\t\tthis.dataSet = options.dataSet;\r\n\t\tthis.dataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.id, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tvar rsData = {\r\n\t\t\t\tcontext: self.row,\r\n\t\t\t\trecordCount: 1\r\n\t\t\t};\r\n\t\t\tif(self.row === null){\r\n\t\t\t\trsData.recordCount = 0;\r\n\t\t\t}\r\n\t\t\tluga.merge(stateDesc, rsData);\r\n\t\t\treturn stateDesc;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.dataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.dataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.dataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string|null}   url       URL to be fetched. Default to null\r\n\t * @property {number}        timeout   Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {boolean}       cache     If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                     It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tself.delete();\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires off XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Does nothing if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Load records from JSON, without XHR calls\r\n\t\t * @param {json} path\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Receives JSON data, either from an HTTP response or from a direct call, apply the path, if any, and loads records out of it\r\n\t\t * @param {json}     json         Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsId is not specified\r\n\t * @property {string} dsId                                DataSource's id. Can be specified inside the data-lugads-datasource too. Required if ds is not specified\r\n\t * @property {{array.<string>} traits                     An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugads-template too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsId: options.node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.TEMPLATE) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsId);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t];\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits.split(\",\"));\r\n\t\t}\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\tthis.render = function(){\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugads-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugads-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugads-setrowindex\",\r\n\t\t\tSORT: \"data-lugads-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugads-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugads-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugads-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugads-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero, detailSets have no setCurrentRowIndex() method\r\n\t\t\tvar index = 0;\r\n\t\t\tif(options.dataSource.getCurrentRowIndex !== undefined){\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t}\r\n\t\t\t// Apply CSS\r\n\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = a[prop];\r\n\t\t\tvar dB = b[prop];\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = a[prop];\r\n\t\t\tvar dB = b[prop];\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = a[prop];\r\n\t\t\tb = b[prop];\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}