{"version":3,"sources":["luga.data.core.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.XmlDataSet.js","luga.data.Rss2DataSet.js","luga.data.ChildJsonDataSet.js","luga.data.ChildXmlDataSet.js","luga.data.region.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js","luga.data.widgets.ShowMore.js"],"names":["luga","namespace","data","dataSourceRegistry","CONST","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","ERROR_MESSAGES","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","undefined","setDataSource","dataSource","string","format","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","filter","rows","dataset","isFunction","retRows","i","length","filteredRow","isPlainObject","push","update","formatter","formattedRow","key","DataSet","options","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","notifyObservers","delete","orig","rowToDelete","splice","setState","getColumnType","columnName","getContext","context","entities","select","recordCount","getRecordsCount","stateDesc","getState","merge","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","indexOf","getRowByIndex","index","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","isArray","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","addObserver","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","constructor","url","timeout","cache","headers","incrementalLoad","dataType","xhrRequest","cancelRequest","abort","getUrl","loadData","xhrOptions","success","response","textStatus","jqXHR","loadRecords","error","xhrError","converters","text xml","xml","parseFromString","jQuery","ajax","setUrl","newUrl","errorThrown","message","status","JsonDataSet","path","rawJson","getRawJson","getPath","loadRawJson","json","lookupProperty","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","node","xmlDoc","nodes","evaluateXPath","nodeToHash","Rss2Dataset","channelElements","itemElements","channelMeta","items","xmlStr","$xml","parseXML","find","each","element","item","rec","text","itemToHash","$channel","setChannelMeta","version","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","populate","ChildXmlDataSet","region","CUSTOM_ATTRIBUTES","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","config","autoregister","setup","getReferenceFromNode","init","dataSourceId","attr","regionType","RegionClass","lookupFunction","initRegions","rootNode","assembleRegionDescription","ds","document","ready","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","split","applyTraits","traitData","func","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","html","compile","templateNode","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","cssClass","removeClass","get","addClass","jItem","click","event","preventDefault","setRowId","setRowIndex","rowIndex","parseInt","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar","widgets","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents","on","ShowMoreScrolling","scrollBody","targetNode","scroll","scrolledToBottom","scrollTop","height","window","scrollHeight"],"mappings":"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","file":"luga.data.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.isFunction(filter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.isFunction(formatter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(luga.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<string>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<string>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {String} message\r\n\t * @property {Object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {String} textStatus\r\n\t * @property {String} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = {};\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError,\r\n\t\t\t\t// Need to override jQuery's XML converter\r\n\t\t\t\tconverters: {\r\n\t\t\t\t\t\"text xml\": luga.xml.parseFromString\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {String}   textStatus   HTTP status\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {String}   textStatus   HTTP status\r\n\t\t * @param {String}   errorThrown  Error message from jQuery\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         JSON data. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {Node} node\r\n\t\t */\r\n\t\tthis.loadRawXml = function(node){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(node);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {Node}     xmlDoc       XML data. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlDoc, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"text\";\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<string>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<string>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given\r\n\t\t * @param {jQuery} item  A jQuery wrapper around an <item>\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\trec[self.itemElements[i]] = jQuery(item).find(self.itemElements[i]).text();\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {jQuery} $channel A jQuery wrapper around the <channel> tag\r\n\t\t */\r\n\t\tvar setChannelMeta = function($channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tself.channelMeta[self.channelElements[i]] = $channel.find(\">\" + self.channelElements[i]).text();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML document\r\n\t\t * @return {null|string}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr  XML document as string\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(xmlStr);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call\r\n\t\t * @param {String}   xmlStr       XML document as string. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlStr, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlStr;\r\n\t\t\tvar $xml = jQuery(jQuery.parseXML(xmlStr));\r\n\t\t\tvar items = [];\r\n\t\t\t// Collect data from each <item>\r\n\t\t\t$xml.find(\"item\").each(function(index, element){\r\n\t\t\t\titems.push(itemToHash(jQuery(this)));\r\n\t\t\t});\r\n\t\t\tsetChannelMeta($xml.find(\"channel\"));\r\n\t\t\t// Insert all records\r\n\t\t\tself.insert(items);\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.data.Rss2Dataset.version = \"0.6.0\";\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on jQuery(document).ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {jQuery} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jQuery} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {jquery|undefined} [rootNode=jQuery(\"body\"]   Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {jQuery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {jQuery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<string>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jQuery} node\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jQuery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\t\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t\t// It's a detailSet, abort\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  button          Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\tthis.config.button = jQuery(this.config.button);\r\n\t\tif(this.config.button.length === 0){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tjQuery(self.config.button).on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tthis.config.button.addClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tthis.config.button.removeClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreScrolling.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery|undefined}  node  A jQuery object wrapping the node containing the records. It must have a scrollbar. Optional. If not specified, the whole document is assumed.\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore infinite scrolling class\r\n\t * @param {luga.data.widgets.ShowMoreScrolling.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreScrolling = function(options){\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tnode: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\t\t/** @type {luga.data.widgets.ShowMoreScrolling} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar scrollBody = false;\r\n\t\tif(this.config.node === undefined){\r\n\t\t\tscrollBody = true;\r\n\t\t\tthis.config.node = jQuery(document);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tvar targetNode = self.config.node;\r\n\r\n\t\t\tjQuery(targetNode).scroll(function(){\r\n\t\t\t\tvar scrolledToBottom = false;\r\n\t\t\t\tif(scrollBody === true){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() === (jQuery(targetNode).height() - jQuery(window).height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() >= (targetNode[0].scrollHeight - targetNode.height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif((scrolledToBottom === true) && (self.isEnabled() === true)){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}