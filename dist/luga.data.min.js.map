{"version":3,"sources":["luga.data.min.js","luga.data.core.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.region.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js"],"names":["luga","namespace","data","version","dataSourceRegistry","CONST","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","ERROR_MESSAGES","DUPLICATED_UUID","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","USER_AGENT","XHR_TIMEOUT","getDataSource","uuid","undefined","setDataSource","dataSource","string","format","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","key","DataSet","options","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FILTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","filter","jQuery","isFunction","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","filterRecords","resetCurrentRow","orig","filtered","i","length","newRow","push","selectAll","clearFilter","notifyObservers","setState","getColumnType","columnName","getContext","context","entities","select","recordCount","getRecordsCount","stateDesc","getState","merge","getCurrentRow","row","getCurrentRowId","getCurrentRowIndex","getRowIndex","allRecords","getRowById","rowId","getRowByIndex","index","fetchedRow","indexOf","getSortColumn","getSortOrder","insert","recordsHolder","isArray","isPlainObject","recordID","setCurrentRowId","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","DetailSet","INVALID_DS_PARAMETER","addObserver","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","constructor","url","timeout","cache","dataType","xhrRequest","loadUrl","xhrOptions","success","response","textStatus","jqXHR","loadRecords","headers","X-Requested-With","error","xhrError","ajax","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","errorThrown","message","status","JsonDataSet","path","rawJson","getRawJson","getPath","loadRawJson","json","lookupProperty","setPath","region","CUSTOM_ATTRIBUTES","DATA_SOURCE_UUID","REGION","REGION_REFERENCE","REGION_TYPE","TEMPLATE_ID","TRAITS","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","getReferenceFromNode","node","init","dataSourceId","attr","regionType","RegionClass","lookupFunction","assembleRegionDescription","config","ds","document","ready","each","item","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","split","applyTraits","traitData","func","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","fetchTemplate","compile","html","templateNode","templateSrc","generateHtml","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","nodes","find","cssClass","removeClass","get","addClass","jItem","click","event","preventDefault","setRowId","setRowIndex","rowIndex","parseInt","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar"],"mappings":"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","file":"luga.data.min.js","sourcesContent":[null,"if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\tluga.data.version = \"0.3.4\";\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tUSER_AGENT: \"luga.data\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} uuid\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throws\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.STATE\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {boolean}          isStateLoading\r\n\t * @property {boolean}          isStateError\r\n\t * @property {boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throws\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {string}  state\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {number}                         recordCount\r\n\t * @property {array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}                uuid       Unique identifier. Required\r\n\t * @property {array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function|null}         filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"Luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"Luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"Luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"Luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"Luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"Luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"Luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"Luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"Luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"Luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"Luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (jQuery.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = filterRecords(self.records, self.filter);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar filterRecords = function(orig, filter){\r\n\t\t\tvar filtered = [];\r\n\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\tvar newRow = filter(orig[i], i, this);\r\n\t\t\t\tif(newRow){\r\n\t\t\t\t\tfiltered.push(newRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn filtered;\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function|null} filter   An optional filter function. If specified only records matching the filter will be returned. Default to null\r\n\t\t *                                 The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tthis.records = filterRecords(selectAll(), filter);\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\tvar row = this.recordsHash[this.getCurrentRowId()];\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn row;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * The rowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the data set are sorted\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn this.getRowIndex(row);\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\tvar allRecords = selectAll();\r\n\t\t\tif(allRecords === null){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tif(this.recordsHash[rowId] !== undefined){\r\n\t\t\t\treturn this.recordsHash[rowId];\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(jQuery.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.filteredRecords.length > 0){\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function|null} filter   An optional filter function. If specified only records matching the filter will be returned. Default to null\r\n\t\t *                                 The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @return {array.<luga.data.DataSet.row>}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn filterRecords(selectAll(), filter);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sort the data\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\tif(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            uuid     Unique identifier. Required\r\n\t * @property {luga.data.DataSet} dataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"Luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"Luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.dataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.dataSet = options.dataSet;\r\n\t\tthis.dataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.dataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.dataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.dataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string|null}   url       URL to be fetched. Default to null\r\n\t * @property {number}        timeout   Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {boolean}       cache     If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                     It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tself.delete();\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires off XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Does nothing if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Load records from JSON, without XHR calls\r\n\t\t * @param {json} path\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Receives JSON data, either from an HTTP response or from a direct call, apply the path, if any, and loads records out of it\r\n\t\t * @param {json}     json         Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugads-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugads-region\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\",\r\n\t\t\tREGION_TYPE: \"data-lugads-regiontype\",\r\n\t\t\tTEMPLATE_ID: \"data-lugads-template-id\",\r\n\t\t\tTRAITS: \"data-lugads-traits\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugads-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugads-region]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not a region\r\n\t * @param {jquery} node\r\n\t * @returns {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.description\r\n\t *\r\n\t * @property {jquery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @returns {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tjQuery(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsId is not specified\r\n\t * @property {string} dsUuid                              DataSource's uuid. Can be specified inside the data-lugads-datasource attribute too. Required if ds is not specified\r\n\t * @property {array.<string>} traits                      An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugads-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @fires regionRendered\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.region.Base\r\n\t * @fires regionRendered\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugads-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugads-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugads-setrowindex\",\r\n\t\t\tSORT: \"data-lugads-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugads-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugads-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugads-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugads-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero, detailSets have no setCurrentRowIndex() method\r\n\t\t\tvar index = 0;\r\n\t\t\tif(options.dataSource.getCurrentRowIndex !== undefined){\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t}\r\n\t\t\t// Apply CSS\r\n\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugads-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}