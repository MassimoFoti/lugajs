{"version":3,"sources":["luga.data.min.js","luga.data.js","luga.data.core.js","luga.data.Dataset.js","luga.data.DetailSet.js","luga.data.HttpDataset.js","luga.data.JsonDataSet.js","luga.data.region.js","luga.data.region.Base.js","luga.data.region.Handlebars.js","luga.data.region.traits.js","luga.data.sort.js"],"names":["luga","namespace","data","version","dataSourceRegistry","CONST","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","ERROR_MESSAGES","DUPLICATED_UUID","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","USER_AGENT","XHR_TIMEOUT","getDataSource","uuid","undefined","setDataSource","dataSource","string","format","STATE","ERROR","LOADING","READY","utils","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","key","DataSet","options","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_FILTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","formatter","jQuery","isFunction","filter","extend","Notifier","this","self","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","filterRecords","resetCurrentRow","applyFormatter","hasFormatter","orig","filtered","i","length","newRow","push","selectAll","clearFilter","notifyObservers","rowToDelete","splice","setState","getColumnType","columnName","getContext","context","entities","select","recordCount","getRecordsCount","stateDesc","getState","merge","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","allRecords","rowId","targetRow","indexOf","getRowByIndex","index","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","isArray","isPlainObject","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","DetailSet","INVALID_DS_PARAMETER","addObserver","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","constructor","url","timeout","cache","dataType","xhrRequest","loadUrl","xhrOptions","success","response","textStatus","jqXHR","loadRecords","headers","X-Requested-With","error","xhrError","ajax","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","errorThrown","message","status","JsonDataSet","path","rawJson","getRawJson","getPath","loadRawJson","json","lookupProperty","setPath","region","CUSTOM_ATTRIBUTES","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","getReferenceFromNode","node","init","dataSourceId","attr","regionType","RegionClass","lookupFunction","assembleRegionDescription","config","ds","document","ready","each","item","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","split","applyTraits","traitData","func","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","fetchTemplate","compile","html","templateNode","templateSrc","generateHtml","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","nodes","find","cssClass","removeClass","get","addClass","jItem","click","event","preventDefault","setRowId","setRowIndex","rowIndex","parseInt","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","prop","dA","dB","Date","descending","number","tA","toString","tB","tAlower","toLowerCase","tBlower","minLen","aLowerChar","charAt","bLowerChar","aChar","bChar"],"mappings":"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","file":"luga.data.min.js","sourcesContent":[null,null,"if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\tluga.data.version = \"0.3.6\";\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tUSER_AGENT: \"luga.data\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} uuid\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throws\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.STATE\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {boolean}          isStateLoading\r\n\t * @property {boolean}          isStateError\r\n\t * @property {boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throws\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {string}  state\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {number}                         recordCount\r\n\t * @property {array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}                uuid       Unique identifier. Required\r\n\t * @property {array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"Luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"Luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"Luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"Luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"Luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"Luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"Luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"Luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"Luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"Luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"Luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"Luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (jQuery.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (jQuery.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = filterRecords(self.records, self.filter);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tself.records = filterRecords(self.records, self.formatter);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar filterRecords = function(orig, filter){\r\n\t\t\tvar filtered = [];\r\n\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\tvar newRow = filter(orig[i], i, this);\r\n\t\t\t\tif(newRow){\r\n\t\t\t\t\tfiltered.push(newRow);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn filtered;\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} filter   A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\tif(row !== undefined){\r\n\t\t\t\treturn this.getRowIndex(row);\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\tvar allRecords = selectAll();\r\n\t\t\tif(allRecords === null){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @returns {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(jQuery.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(jQuery.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif(this.filteredRecords.length > 0){\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} filter   An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @returns {array.<luga.data.DataSet.row>}\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn filterRecords(selectAll(), filter);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  New index. Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(dataSet, row, rowIndex)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(jQuery.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fires stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fires preDataSorted\r\n\t\t * @fires dataSorted\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(jQuery.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\tif(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            uuid     Unique identifier. Required\r\n\t * @property {luga.data.DataSet} dataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"Luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"Luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.dataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.dataSet = options.dataSet;\r\n\t\tthis.dataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.dataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.dataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.dataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string}    url       URL to be fetched. Default to null\r\n\t * @property {number}    timeout   Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {boolean}   cache     If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                 It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tself.delete();\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires off XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not a region\r\n\t * @param {jquery} node\r\n\t * @returns {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.description\r\n\t *\r\n\t * @property {jquery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @returns {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tjQuery(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t});\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsId is not specified\r\n\t * @property {string} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {array.<string>} traits                      An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @fires regionRendered\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.region.Base\r\n\t * @fires regionRendered\r\n\t * @throws\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\"X-Requested-With\": luga.data.CONST.USER_AGENT\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero, detailSets have no setCurrentRowIndex() method\r\n\t\t\tvar index = 0;\r\n\t\t\tif(options.dataSource.getCurrentRowIndex !== undefined){\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t}\r\n\t\t\t// Apply CSS\r\n\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());","(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}