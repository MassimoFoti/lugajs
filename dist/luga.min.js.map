{"version":3,"sources":["luga.common.js","luga.ajaxform.js","luga.validator.js","luga.data.js"],"names":["luga","attributesToProperties","node","obj","attributes","undefined","i","length","attr","xml","ATTRIBUTE_PREFIX","name","value","childrenToProperties","childNodes","child","nodeType","isArray","tagName","nodeName","constructor","Array","curValue","push","nodeHasText","getTextValue","childObj","nodeToHash","data","nextSibling","namespace","ns","rootObject","parts","split","window","common","version","extend","baseFunc","func","args","apply","isFunction","type","isPlainObject","Object","prototype","toString","call","proto","getPrototypeOf","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","object","part","shift","merge","target","source","x","setProperty","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","notifyObservers","method","removeObserver","splice","class2type","forEach","element","collection","toLowerCase","rawType","stringType","dom","treeWalker","getInstance","rootNode","filterFunc","filter","acceptNode","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","document","createTreeWalker","SHOW_ELEMENT","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","jQuery","fieldValue","prop","val","string","toHash","toJson","flatData","jsonData","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","selector","find","each","index","item","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","MIME_TYPE","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","result","XPathEvaluator","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlDOMObj","async","loadXML","DOMParser","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","Sender","send","FORM_SELECTOR","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","HEADERS","MISSING_FUNCTION","HANDLERS","options","config","action","location","href","timeout","success","error","successmsg","errormsg","after","headers","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","response","url","sendJson","contentType","initForms","submit","ready","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","api","validateForm","formValidator","validateField","fieldValidator","validateFields","validateChildFields","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","resetCurrentRow","applyFormatter","hasFormatter","selectAll","clearFilter","delete","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","resetCurrentRowToFirst","setCurrentRowId","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","cache","incrementalLoad","dataType","xhrRequest","loadUrl","xhrOptions","loadRecords","xhrError","converters","text xml","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","status","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","nodes","Rss2Dataset","channelElements","itemElements","channelMeta","itemToHash","rec","text","setChannelMeta","$channel","items","$xml","parseXML","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","compile","templateNode","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","get","jItem","click","setRowId","setRowIndex","rowIndex","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","widgets","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents","on","ShowMoreScrolling","scrollBody","targetNode","scroll","scrolledToBottom","scrollTop","height","scrollHeight"],"mappings":";;;;;AAGA,GAAA,oBAAA,OACA,KAAA,wBAGA,QAAA,IAAA,KACA,IAAAA,QCLA,GDQA,WACA,aAg2BA,SAAAC,uBAAAC,KAAAC,KACA,GAAA,OAAAD,KAAAE,iBAAAC,IAAAH,KAAAE,WAGA,IAAA,IAAAE,EAAA,EAAAA,EAAAJ,KAAAE,WAAAG,OAAAD,IAAA,CACA,IAAAE,KAAAN,KAAAE,WAAAE,GACAH,IAAAH,KAAAS,IAAAC,iBAAAF,KAAAG,MAAAH,KAAAI,OASA,SAAAC,qBAAAX,KAAAC,KACA,IAAA,IAAAG,EAAA,EAAAA,EAAAJ,KAAAY,WAAAP,OAAAD,IAAA,CACA,IAAAS,MAAAb,KAAAY,WAAAR,GAEA,GAAA,IAAAS,MAAAC,SAAA,CACA,IAAAC,SAAA,EACAC,QAAAH,MAAAI,SAEA,QAAAd,IAAAF,IAAAe,SAAA,CAEA,GAAAf,IAAAe,SAAAE,cAAAC,MAAA,CACA,IAAAC,SAAAnB,IAAAe,SACAf,IAAAe,YACAf,IAAAe,SAAAK,KAAAD,UAEAL,SAAA,EAGA,IAAA,IAAAO,YAAAT,OAEAZ,IAAAY,MAAAI,UAAAM,aAAAV,WAEA,CACA,IAAAW,SAAA1B,KAAAS,IAAAkB,WAAAZ,QACA,IAAAE,QACAd,IAAAe,SAAAK,KAAAG,UAGAvB,IAAAe,SAAAQ,YAYA,SAAAD,aAAAvB,MACA,IAAAa,MAAAb,KAAAY,WAAA,GAEA,GAAA,IAAAC,MAAAC,UAAA,IAAAD,MAAAC,SACA,OAAAD,MAAAa,KASA,SAAAJ,YAAAtB,MACA,IAAAa,MAAAb,KAAAY,WAAA,GACA,OAAA,OAAAC,OAAA,OAAAA,MAAAc,cAAA,IAAAd,MAAAC,UAAA,IAAAD,MAAAC,UA75BAhB,KAAA8B,UAAA,SAAAC,GAAAC,YACA,IAAAC,MAAAF,GAAAG,MAAA,UACA7B,IAAA2B,aACAA,WAAAG,QAEA,IAAA,IAAA7B,EAAA,EAAAA,EAAA2B,MAAA1B,OAAAD,SACAD,IAAA2B,WAAAC,MAAA3B,MACA0B,WAAAC,MAAA3B,QAEA0B,WAAAA,WAAAC,MAAA3B,IAEA,OAAA0B,YAGAhC,KAAA8B,UAAA,eACA9B,KAAAoC,OAAAC,QAAA,WASArC,KAAAsC,OAAA,SAAAC,SAAAC,KAAAC,MACAF,SAAAG,MAAAF,KAAAC,OAQAzC,KAAAiB,QAAA,SAAAd,KACA,OAAAkB,MAAAJ,QAAAd,MAQAH,KAAA2C,WAAA,SAAAxC,KACA,MAAA,aAAAH,KAAA4C,KAAAzC,MASAH,KAAA6C,cAAA,SAAA1C,KAGA,GAAA,oBAAA2C,OAAAC,UAAAC,SAAAC,KAAA9C,KACA,OAAA,EAGA,IAAA+C,MAAAJ,OAAAK,eAAAhD,KAGA,GAAA,OAAA+C,MACA,OAAA,EAIA,IAAA9B,YAAA0B,OAAAC,UAAAK,eAAAH,KAAAC,MAAA,gBAAAA,MAAA9B,YACA,cAAA,aAAAA,cAAAiC,SAAAL,SAAAC,KAAA7B,eAAAiC,SAAAL,SAAAC,KAAAH,SAUA9C,KAAAsD,eAAA,SAAAC,MACA,GAAAA,KAAA,CAGA,IAAAC,UAAAxD,KAAAyD,eAAAtB,OAAAoB,MACA,OAAA,IAAAvD,KAAA2C,WAAAa,WACAA,eADA,IAcAxD,KAAAyD,eAAA,SAAAC,OAAAH,MAEA,GAAAG,QAAAH,KAAA,CAIA,QAAAlD,IAAAqD,OAAAH,MACA,OAAAG,OAAAH,MAGA,IADA,IAAAtB,MAAAsB,KAAArB,MAAA,KACAD,MAAA1B,OAAA,GAAA,CACA,IAAAoD,KAAA1B,MAAA2B,QACA,QAAAvD,IAAAqD,OAAAC,MAAA,CACA,GAAA,IAAA1B,MAAA1B,OAEA,OAAAmD,OAAAC,MAIAD,OAAAA,OAAAC,UAaA3D,KAAA6D,MAAA,SAAAC,OAAAC,QACA,IAAA,IAAAC,KAAAD,OACAD,OAAAE,GAAAD,OAAAC,IAWAhE,KAAAiE,YAAA,SAAAP,OAAAH,KAAA3C,OACA,IAAAqB,MAAAsB,KAAArB,MAAA,KAIA,IAHA,IAAAD,MAAA1B,SACAmD,OAAAH,MAAA3C,OAEAqB,MAAA1B,OAAA,GAAA,CACA,IAAAoD,KAAA1B,MAAA2B,QACA,QAAAvD,IAAAqD,OAAAC,MAAA,CACA,GAAA,IAAA1B,MAAA1B,OAAA,CAEAmD,OAAAC,MAAA/C,MACA,MAGA8C,OAAAA,OAAAC,WAEA1B,MAAA1B,OAAA,GAEAmD,OAAAC,SACAD,OAAAA,OAAAC,OAGAD,OAAAC,MAAA/C,QAKAZ,KAAAkE,gBACAC,gBACAC,kBAAA,wFACAC,2BAAA,sDACAC,uBAAA,uEAUAtE,KAAAuE,SAAA,WACA,GAAAC,KAAApD,cAAApB,KAAAuE,SACA,MAAAvE,KAAAkE,eAAAC,eAAA,kBAEAK,KAAAC,aACA,IAIAC,mBAAA,SAAAC,WACA,IAAAC,IALA,KASA,OAHAA,KAAAD,UAAAE,OAAA,GAAAC,cACAF,KAAAD,UAAAI,UAAA,GACAH,KAPA,WAoBAJ,KAAAQ,YAAA,SAAAC,UACA,GAAA,WAAAjF,KAAA4C,KAAAqC,UACA,MAAAjF,KAAAkE,eAAAC,eAAA,2BAEAK,KAAAC,UAAAlD,KAAA0D,WAYAT,KAAAU,gBAAA,SAAAP,UAAA/C,MACA,GAAA,WAAA5B,KAAA4C,KAAAhB,MACA,MAAA5B,KAAAkE,eAAAC,eAAA,uBAGA,IAAA,IADAgB,OAAAT,mBAAAC,WACArE,EAAA,EAAAA,EAAAkE,KAAAC,UAAAlE,OAAAD,IAAA,CACA,IAAA2E,SAAAT,KAAAC,UAAAnE,GACA2E,SAAAE,SAAAnF,KAAA2C,WAAAsC,SAAAE,UACAF,SAAAE,QAAAvD,QAWA4C,KAAAY,eAAA,SAAAH,UACA,IAAA,IAAA3E,EAAA,EAAAA,EAAAkE,KAAAC,UAAAlE,OAAAD,IACA,GAAAkE,KAAAC,UAAAnE,KAAA2E,SAAA,CACAT,KAAAC,UAAAY,OAAA/E,EAAA,GACA,SAOA,IAAAgF,eACA,QAAA,UAAA,OAAA,QAAA,WAAA,SAAA,SAAA,SAAA,SAAA,UAAAC,QAAA,SAAAC,QAAAlF,EAAAmF,YACAH,WAAA,WAAAE,QAAA,KAAAA,QAAAE,gBASA1F,KAAA4C,KAAA,SAAAzC,KACA,GAAA,OAAAA,IACA,MAAA,OAEA,IAAAwF,eAAAxF,IACA,GAAA,WAAAwF,SAAA,aAAAA,QAAA,CAEA,IAAAC,WAAA9C,OAAAC,UAAAC,SAAAC,KAAA9C,KACA,OAAAmF,WAAAM,YAEA,OAAAD,SAKA3F,KAAA8B,UAAA,uBAWA9B,KAAA6F,IAAAC,WAAAC,YAAA,SAAAC,SAAAC,YAEA,IAAAC,QACAC,WAAA,SAAAjG,MAEA,YAAAG,IAAA4F,aACA,IAAAA,WAAA/F,MACAkG,WAAAC,YAGAD,WAAAE,gBAMAC,WAAAL,OAAAC,WAEA,OADAI,WAAAJ,WAAAD,OAAAC,WACAK,SAAAC,iBAAAT,SAAAI,WAAAM,aAAAH,YAAA,IAKAvG,KAAA8B,UAAA,aAEA9B,KAAA2G,KAAAC,OACAC,eAAA,wBACAC,kBACAC,UAAA,EACAC,OAAA,GAEAC,UACAC,aAAA,wBAeAlH,KAAA2G,KAAAQ,MAAA,SAAAnB,SAAAoB,YAEA,GAAA,IAAApB,SAAAzF,OACA,MAAAP,KAAA2G,KAAAC,MAAAK,SAAA,aAKA,IAAA,IAFAI,OACAC,OAAAtH,KAAA2G,KAAAY,MAAAC,eAAAxB,UACA1F,EAAA,EAAAA,EAAAgH,OAAA/G,OAAAD,IACA,IAAA,IAAAN,KAAA2G,KAAAY,MAAAE,kBAAAH,OAAAhH,IAAA,CACA,IAAAoH,UAAAC,OAAAL,OAAAhH,IAAAE,KAAA,QACAoH,WAAA,KAEA,OADAD,OAAAL,OAAAhH,IAAAuH,KAAA,SAGA,IAAA,kBACAD,WAAAD,OAAAL,OAAAhH,IAAAwH,MACA,MAEA,IAAA,WACA,IAAA,SACA,IAAAH,OAAAL,OAAAhH,IAAAuH,KAAA,aACAD,WAAAD,OAAAL,OAAAhH,IAAAwH,OAEA,MAEA,QACAF,WAAAD,OAAAL,OAAAhH,IAAAwH,MAGA,OAAAF,cACA,IAAAR,aACAQ,WAAA5H,KAAA+H,OAAAX,WAAAQ,kBAEAvH,IAAAgH,IAAAK,WACAL,IAAAK,WAAAE,YAEA,IAAA5H,KAAAiB,QAAAoG,IAAAK,YACAL,IAAAK,WAAAnG,KAAAqG,YAGAP,IAAAK,YAAAL,IAAAK,WAAAE,aAMA,OAAAP,KAOArH,KAAA2G,KAAAqB,OAAA,SAAAhC,SAAAoB,YACA,OAAApH,KAAA2G,KAAAQ,MAAAnB,SAAAoB,aAWApH,KAAA2G,KAAAsB,OAAA,SAAAjC,UACA,IAAAkC,SAAAlI,KAAA2G,KAAAQ,MAAAnB,UACAmC,YACA,IAAA,IAAAnE,KAAAkE,SACAlI,KAAAiE,YAAAkE,SAAAnE,EAAAkE,SAAAlE,IAEA,OAAAmE,UAaAnI,KAAA2G,KAAAyB,cAAA,SAAApC,SAAAoB,YAEA,GAAA,IAAApB,SAAAzF,OACA,MAAAP,KAAA2G,KAAAC,MAAAK,SAAA,aAKA,IAAA,IAFArC,IAAA,GACA0C,OAAAtH,KAAA2G,KAAAY,MAAAC,eAAAxB,UACA1F,EAAA,EAAAA,EAAAgH,OAAA/G,OAAAD,IACA,IAAA,IAAAN,KAAA2G,KAAAY,MAAAE,kBAAAH,OAAAhH,IAAA,CACA,IAAAoH,UAAAC,OAAAL,OAAAhH,IAAAE,KAAA,QACAoH,WAAAD,OAAAL,OAAAhH,IAAAwH,MAEA,OADAH,OAAAL,OAAAhH,IAAAuH,KAAA,SAGA,IAAA,kBACA,IAAA,IAAAQ,EAAA,EAAAA,EAAAT,WAAArH,OAAA8H,IACAzD,IAAA0D,kBAAA1D,IAAA8C,UAAAE,WAAAS,GAAAjB,YAEA,MAEA,IAAA,WACA,IAAA,SACA,IAAAO,OAAAL,OAAAhH,IAAAuH,KAAA,aACAjD,IAAA0D,kBAAA1D,IAAA8C,UAAAE,WAAAR,aAEA,MAEA,QACAxC,IAAA0D,kBAAA1D,IAAA8C,UAAAE,WAAAR,aAIA,OAAAxC,KAGA,IAAA0D,kBAAA,SAAA1D,IAAA8C,UAAAE,WAAAR,YAYA,MAXA,KAAAxC,MACAA,KAAA,KAEAA,KAAA2D,mBAAAb,WACA9C,KAAA,IAEAA,MADA,IAAAwC,WACAmB,mBAAAvI,KAAA+H,OAAAX,WAAAQ,aAGAW,mBAAAX,aAKA5H,KAAA8B,UAAA,mBASA9B,KAAA2G,KAAAY,MAAAE,kBAAA,SAAAe,WACA,OAAA,IAAAxI,KAAA2G,KAAAY,MAAAkB,aAAAD,cAGA,IAAAb,OAAAa,WAAAX,KAAA,kBAGAxH,IAAAsH,OAAAa,WAAAhI,KAAA,UAYAR,KAAA2G,KAAAY,MAAAkB,aAAA,SAAAD,WACA,YAAAnI,IAAAsH,OAAAa,WAAAX,KAAA,UAIA,IAAA7H,KAAA2G,KAAAC,MAAAE,iBAAAa,OAAAa,WAAAX,KAAA,UAcA7H,KAAA2G,KAAAY,MAAAmB,cAAA,SAAA/H,KAAAqF,UACA,IAAA2C,SAAA,eAAAhI,KAAA,KACA,OAAAgH,OAAAgB,SAAA3C,WASAhG,KAAA2G,KAAAY,MAAAC,eAAA,SAAAxB,UACA,IAAAsB,UAOA,OANAK,OAAA3B,UAAA4C,KAAA5I,KAAA2G,KAAAC,MAAAC,gBAAAgC,KAAA,SAAAC,MAAAC,MACA/I,KAAA2G,KAAAY,MAAAkB,aAAAM,OACAzB,OAAA/F,KAAAwH,QAIAzB,QAGAtH,KAAA8B,UAAA,qBASA9B,KAAAgJ,aAAAC,SAAA,SAAAC,KAAA3F,MACA,OAAAvD,KAAAyD,eAAA0F,aAAAD,MAAA3F,OAWAvD,KAAAgJ,aAAAI,QAAA,SAAAF,KAAA3F,KAAA3C,OACA,IAAAyI,KAAAF,aAAAD,MACAlJ,KAAAiE,YAAAoF,KAAA9F,KAAA3C,OACA0I,aAAAJ,KAAAG,OAGA,IAAAC,aAAA,SAAAJ,KAAAG,MACAL,aAAAO,QAAAL,KAAAM,KAAAC,UAAAJ,QAGAF,aAAA,SAAAD,MACA,IAAAQ,SAAAV,aAAAW,QAAAT,MACA,OAAA,OAAAQ,YAGAF,KAAAI,MAAAF,WAGA1J,KAAA8B,UAAA,eAQA9B,KAAA+H,OAAAX,WAAA,SAAAxC,KAeA,OAdAA,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,KAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,KAAA,KAAA,KAEApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KAEApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,KACApF,IAAAA,IAAAiF,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,QAqBAhK,KAAA+H,OAAAkC,OAAA,SAAArF,IAAAnC,MACA,IAAAyH,QAAA,KACA,IAAA,IAAAlK,KAAAiB,QAAAwB,MACA,IAAA,IAAAnC,EAAA,EAAAA,EAAAmC,KAAAlC,OAAAD,IACA4J,QAAA,IAAAJ,OAAA,MAAAxJ,EAAA,MAAA,KACAsE,IAAAA,IAAAiF,QAAAK,QAAAzH,KAAAnC,IAGA,IAAA,IAAAN,KAAA6C,cAAAJ,MACA,IAAA,IAAAuB,KAAAvB,KACAyH,QAAA,IAAAJ,OAAA,MAAA9F,EAAA,MAAA,KACAY,IAAAA,IAAAiF,QAAAK,QAAAzH,KAAAuB,IAGA,OAAAY,KAQA5E,KAAA+H,OAAAoC,WAAA,SAAAvF,KACA,IAAAyC,OAIA,GAHA,MAAAzC,IAAAC,OAAA,KACAD,IAAAA,IAAAG,UAAA,IAEA,IAAAH,IAAArE,OACA,OAAA8G,IAIA,IAAA,IAFApF,MAAA2C,IAAA1C,MAAA,KAEA5B,EAAA,EAAAA,EAAA2B,MAAA1B,OAAAD,IAAA,CACA,IAAA8J,OAAAnI,MAAA3B,GAAA4B,MAAA,KACAwF,UAAA2C,mBAAAD,OAAA,IACAxC,WAAA,GACA,IAAAwC,OAAA7J,SACAqH,WAAAyC,mBAAAD,OAAA,UAEA/J,IAAAgH,IAAAK,WACAL,IAAAK,WAAAE,YAEA,IAAA5H,KAAAiB,QAAAoG,IAAAK,YACAL,IAAAK,WAAAnG,KAAAqG,YAGAP,IAAAK,YAAAL,IAAAK,WAAAE,YAGA,OAAAP,KAGA,IAAAiD,gBAAA,IAAAR,OAAA,cAAA,KAoBA9J,KAAA+H,OAAAwC,SAAA,SAAA3F,IAAAzE,KACA,IAAA,IAAAH,KAAA6C,cAAA1C,KAEA,IADA,IAAAqK,QACA,QAAAA,QAAAF,gBAAAG,KAAA7F,OAAA,CACA,IAAA8F,SAAA1K,KAAAyD,eAAAtD,IAAAqK,QAAA,IACA,QAAAnK,IAAAqK,SAAA,CACA,IAAAR,QAAA,IAAAJ,OAAAU,QAAA,GAAA,KACA5F,IAAAA,IAAAiF,QAAAK,QAAAQ,UAEAJ,gBAAAK,KAAA/F,MAIA,OAAAA,KAGA5E,KAAA8B,UAAA,cAEA9B,KAAAuH,MAAAX,OACAgE,aACAC,QAAA,eACAC,cAAA,sBAEAC,WAAA,kBAOA,IAAAC,cAAA,SAAA9K,MACA,IAAA+K,MAAAjL,KAAAuH,MAAAX,MAAAmE,WAOA,YANA1K,IAAAH,KAAAM,KAAA,MACAyK,OAAA/K,KAAAM,KAAA,WAEAH,IAAAH,KAAAM,KAAA,UACAyK,OAAA/K,KAAAM,KAAA,SAEAyK,OAOAjL,KAAAuH,MAAA2D,iBAAA,SAAAhL,MACA,IAAA+K,MAAAD,cAAArD,OAAAzH,OACAiL,OAAAxD,OAAA,IAAAsD,OAGAE,OAAA5K,OAAA,GACA4K,OAAAC,UASApL,KAAAuH,MAAA8D,eAAA,SAAAnL,KAAAoL,MACA,OAAAtL,KAAAuH,MAAAgE,WAAArL,KAAAoL,KAAAtL,KAAAuH,MAAAX,MAAAgE,YAAAC,UAQA7K,KAAAuH,MAAAiE,oBAAA,SAAAtL,KAAAoL,MACA,OAAAtL,KAAAuH,MAAAgE,WAAArL,KAAAoL,KAAAtL,KAAAuH,MAAAX,MAAAgE,YAAAE,gBAUA9K,KAAAuH,MAAAgE,WAAA,SAAArL,KAAAoL,KAAAG,eACApL,IAAAoL,WACAA,SAAAzL,KAAAuH,MAAAX,MAAAgE,YAAAC,SAEA,IAAAI,MAAAD,cAAArD,OAAAzH,OACAwL,IAAA/D,OAAA,eACA+D,IAAAlL,KAAA,KAAAyK,OACAS,IAAAC,SAAAF,UACAC,IAAAJ,KAAAA,MACA,IAAAH,OAAAxD,OAAA,IAAAsD,OAQA,OANAE,OAAA5K,OAAA,EACA4K,OAAAS,YAAAF,KAGA/D,OAAAzH,MAAA2L,OAAAH,KAEAA,KAKA1L,KAAA8B,UAAA,YAEA9B,KAAAS,IAAAqL,UAAA,kBACA9L,KAAAS,IAAAC,iBAAA,IACAV,KAAAS,IAAAsL,iBAAA,yBASA/L,KAAAS,IAAAuL,cAAA,SAAA9L,KAAAqD,MACA,IAAA0I,YAEA,QAAA5L,IAAA8B,OAAA+J,cAAA,CAIA,IAAA,IAHAC,cAAAjM,KAAAkM,YAAA7I,MAGAjD,EAAA,EAAAA,EAAA6L,cAAA5L,OAAAD,IACA2L,SAAA1K,KAAA4K,cAAA7L,IAEA,OAAA2L,SAOA,IAJA,IACAI,QADA,IAAAC,gBACAC,SAAAhJ,KAAArD,KAAA,KAAAsM,YAAAC,2BAAA,MACAC,YAAAL,OAAAM,cAEA,OAAAD,aACAT,SAAA1K,KAAAmL,aACAA,YAAAL,OAAAM,cAEA,OAAAV,UASAjM,KAAAS,IAAAkB,WAAA,SAAAzB,MACA,IAAAC,OAGA,OAFAF,uBAAAC,KAAAC,KACAU,qBAAAX,KAAAC,KACAA,KAyFAH,KAAAS,IAAAmM,aAAA,SAAA1M,MAEA,YAAAG,IAAA8B,OAAA+J,cACAhM,KAAAO,KAGA,IAAAoM,eACAC,kBAAA5M,KAAAF,KAAAS,IAAAqL,YASA9L,KAAAS,IAAAsM,gBAAA,SAAAC,QAGA,QAAA3M,IAAA8B,OAAA+J,cAAA,CACA,IAAAe,UAAA,IAAAf,cAAAlM,KAAAS,IAAAsL,kBAGA,OAFAkB,UAAAC,OAAA,EACAD,UAAAE,QAAAH,QACAC,UAKA,OAFA,IAAAG,WACAL,gBAAAC,OAAAhN,KAAAS,IAAAqL,YA78BA,QCRA,IAAA,KACA,KAAA,8BCDA,GDIA,WACA,aAEA9L,KAAA8B,UAAA,iBAGA9B,KAAA8B,UAAA,0BAUA9B,KAAAqN,SAAAC,SAAAC,YAAA,SAAAC,IAAAC,SAAAC,WAAAC,OACAhG,OAAA8F,UAAAG,QACAjG,OAAA8F,UAAAnC,KAAAkC,MAYAxN,KAAAqN,SAAAC,SAAAO,WAAA,SAAAL,IAAAC,SAAAC,WAAAI,YAAAH,OACAI,MAAAP,MAYAxN,KAAAqN,SAAAC,SAAAU,SAAA,SAAAR,IAAAC,SAAAC,WAAAI,YAAAH,OAEA3N,KAAAuH,MAAA2D,iBAAAuC,UACAzN,KAAAuH,MAAAiE,oBAAAiC,SAAAD,MASAxN,KAAAqN,SAAAC,SAAAW,gBAAA,SAAAR,SAAAS,OACAA,MAAAC,iBACA,IAAAnO,KAAAqN,SAAAe,QACAX,SAAAA,WAEAY,QAGArO,KAAAqN,SAAAzG,OACA0H,cAAA,iCACAC,eAAA,MACAC,iBAAA,IACAC,mBACAC,KAAA,oBACAC,OAAA,sBACAC,OAAA,sBACAC,SAAA,uBACAC,QAAA,uBACAC,YAAA,0BACAC,MAAA,qBACAC,UAAA,wBACAC,OAAA,sBACAC,MAAA,qBACAC,QAAA,wBAEAnI,UACA6H,QAAA,iCACAE,MAAA,4BACA9H,aAAA,wCACAmI,iBAAA,0DAEAC,UACAR,QAAA,qCACAE,MAAA,sCA0BAhP,KAAAqN,SAAAe,OAAA,SAAAmB,SAEAA,QAAA9B,SAAA9F,OAAA4H,QAAA9B,UACAjJ,KAAAgL,QACA/B,SAAA,KAEAgC,OAAAF,QAAA9B,SAAAjN,KAAA,WAAA+O,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAE,SAAAnI,SAAAkJ,SAAAC,KAEAxK,OAAAoK,QAAA9B,SAAAjN,KAAA,WAAA+O,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAG,SAAA5O,KAAAqN,SAAAzG,MAAA2H,eAEAqB,QAAAL,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAI,WAAA7O,KAAAqN,SAAAzG,MAAA4H,iBACAqB,QAAAN,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAK,UAAA9O,KAAAqN,SAAAzG,MAAA0I,SAAAR,QACAgB,MAAAP,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAO,QAAAhP,KAAAqN,SAAAzG,MAAA0I,SAAAN,MACAe,WAAAR,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAM,cAAA/O,KAAAqN,SAAAzG,MAAAK,SAAA6H,QACAkB,SAAAT,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAQ,YAAAjP,KAAAqN,SAAAzG,MAAAK,SAAA+H,MAEAnD,OAAA0D,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAS,SAAA,KACAe,MAAAV,QAAA9B,SAAAjN,KAAAR,KAAAqN,SAAAzG,MAAA6H,kBAAAU,QAAA,KACAe,QAAA,MAEAlQ,KAAA6D,MAAAW,KAAAgL,OAAAD,SACA/K,KAAAgL,OAAAI,QAAAO,SAAA3L,KAAAgL,OAAAI,QAAA,IACA,IAAAQ,KAAA5L,KAEA,GAAA,IAAA4L,KAAAZ,OAAA/B,SAAAlN,OACA,MAAAP,KAAAqN,SAAAzG,MAAAK,SAAA,aAMA,IAAAoJ,YAAA,WAEA,GAAA,OAAAD,KAAAZ,OAAAS,MAAA,CACA,IAAAK,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAAS,OACA,QAAA5P,IAAAiQ,SACA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAqN,SAAAzG,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAAS,QAEAK,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAA/B,aAOA8C,aAAA,WAEA,GAAA,OAAAH,KAAAZ,OAAA3D,OAAA,CACA,IAAAyE,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAA3D,QACA,QAAAxL,IAAAiQ,SACA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAqN,SAAAzG,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAA3D,SAEAyE,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAA/B,aAOA+C,YAAA,SAAA9C,WAAAC,MAAAG,aACA,IAAAwC,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAAM,OACA,QAAAzP,IAAAiQ,SACA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAqN,SAAAzG,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAAM,QAEAQ,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAAQ,SAAAI,KAAAZ,OAAA/B,SAAAC,WAAAI,YAAAH,SAMA8C,cAAA,SAAA/C,WAAAC,OACA,IAAA2C,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAAK,SACA,QAAAxP,IAAAiQ,SACA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAqN,SAAAzG,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAAK,UAEAS,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAAO,WAAAK,KAAAZ,OAAA/B,SAAAC,WAAAC,SAUAnJ,KAAA6J,KAAA,WAEA,IAAAqC,SAAA1Q,KAAA2G,KAAAyB,cAAAgI,KAAAZ,OAAA/B,UAAA,GAEA,OAAA2C,KAAAZ,OAAA3D,QACA0E,eAGA5I,OAAAgJ,MACA/O,KAAA8O,SACAZ,MAAA,SAAAnC,MAAAD,WAAAI,aACA0C,YAAA9C,WAAAC,MAAAG,cAEA3I,OAAAiL,KAAAZ,OAAArK,OACA+K,QAAAE,KAAAZ,OAAAU,QACAL,QAAA,SAAAe,SAAAlD,WAAAC,OACA8C,cAAA/C,WAAAC,QAEAiC,QAAAQ,KAAAZ,OAAAI,QACAiB,IAAAT,KAAAZ,OAAAC,SAGA,OAAAW,KAAAZ,OAAAS,OACAI,eAQA7L,KAAAsM,SAAA,WAEA,IAAAJ,SAAA1Q,KAAA2G,KAAAsB,OAAAmI,KAAAZ,OAAA/B,UAAA,GAEA,OAAA2C,KAAAZ,OAAA3D,QACA0E,eAGA5I,OAAAgJ,MACAI,YAAA,mBACAnP,KAAA4H,KAAAC,UAAAiH,UACAZ,MAAA,SAAAnC,MAAAD,WAAAI,aACA0C,YAAA9C,WAAAC,MAAAG,cAEA3I,OAAAiL,KAAAZ,OAAArK,OACA+K,QAAAE,KAAAZ,OAAAU,QACAL,QAAA,SAAAe,SAAAlD,WAAAC,OACA8C,cAAA/C,WAAAC,QAEAiC,QAAAQ,KAAAZ,OAAAI,QACAiB,IAAAT,KAAAZ,OAAAC,SAGA,OAAAW,KAAAZ,OAAAS,OACAI,gBAYArQ,KAAAqN,SAAA2D,UAAA,SAAAhL,eACA3F,IAAA2F,WACAA,SAAA2B,OAAA,SAEA3B,SAAA4C,KAAA5I,KAAAqN,SAAAzG,MAAA0H,eAAAzF,KAAA,SAAAC,MAAAC,MACA,IAAA0E,SAAA9F,OAAAoB,MACA0E,SAAAwD,OAAA,SAAA/C,OACAA,MAAAC,iBACA,IAAAnO,KAAAqN,SAAAe,QACAX,SAAAA,WAEAY,YAKA1G,OAAAnB,UAAA0K,MAAA,WACAlR,KAAAqN,SAAA2D,cA3RA,QCJA,IAAA,KACA,KAAA,8BCEA,GDCA,WACA,aAEAhR,KAAA8B,UAAA,kBAIA9B,KAAA8B,UAAA,2BAQA9B,KAAAmR,UAAA7D,SAAAO,WAAA,SAAAJ,SAAA2D,YAGA,IAAA,IAFAC,SAAA,GACAC,YAAA,EACAhR,EAAA,EAAAA,EAAA8Q,WAAA7Q,OAAAD,IAEA+Q,UAAAD,WAAA9Q,GAAAiR,QAAA,MAGA,IAAAD,YAAAF,WAAA9Q,GAAA,WACA8Q,WAAA9Q,GAAAkR,WACAF,YAAA,GAIA,KAAAD,UACAtD,MAAAsD,WAUArR,KAAAmR,UAAA7D,SAAAU,SAAA,SAAAP,SAAA2D,YAEA,GAAA,IAAAA,WAAA7Q,OAAA,CAOA,IAAA,IAHA+Q,YAAA,EACAG,QAAA,OAEAnR,EAAA,EAAAA,EAAA8Q,WAAA7Q,OAAAD,IACAmR,SAAA,WAAAL,WAAA9Q,GAAAK,KAAA,WAAAyQ,WAAA9Q,GAAAiR,QAAA,SAEA,IAAAD,YAAAF,WAAA9Q,GAAA,WACA8Q,WAAA9Q,GAAAkR,WACAF,YAAA,GAGAG,SAAA,QACAzR,KAAAuH,MAAAiE,oBAAAiC,SAAAgE,cAfAzR,KAAAuH,MAAA2D,iBAAAuC,WAwBAzN,KAAAmR,UAAA7D,SAAAoE,UAAA,SAAAjE,SAAA2D,YAUAzJ,OAAA8F,UAAA7E,KATA,cASA+I,YARA,aASAhK,OAAA8F,UAAA7E,KARA,iBAQAwC,SAGA,IAAA,IADAkG,YAAA,EACAhR,EAAA,EAAAA,EAAA8Q,WAAA7Q,OAAAD,IAAA,CACA,IAAAkI,UAAAb,OAAAyJ,WAAA9Q,GAAAJ,MAEAsI,UAAAoJ,SAAAjG,SAfA,aAiBAnD,UAAAqD,OAAAlE,OAAA3H,KAAA+H,OAAAkC,OAdA,+IAcAmH,WAAA9Q,GAAAiR,aAGA,IAAAD,YAAAF,WAAA9Q,GAAA,WACA8Q,WAAA9Q,GAAAkR,WACAF,YAAA,KAKAtR,KAAAmR,UAAAvK,OACA0H,cAAA,oCACAuD,YAAA,sBACAC,qBAAA,aACArD,mBACAsD,SAAA,8BACA/C,MAAA,2BACAE,OAAA,4BACAC,MAAA,2BACA6C,aAAA,iCACAnH,QAAA,6BACAoH,YAAA,gCACAC,SAAA,8BACAC,QAAA,6BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,aAAA,iCACAC,SAAA,6BACAC,SAAA,6BACAC,SAAA,6BACAC,YAAA,gCACAC,YAAA,gCACAC,cAAA,kCACAC,cAAA,kCACAC,iBAAA,oCAEA/L,UACAC,aAAA,yCACA+L,cAAA,0CACA5D,iBAAA,0DACA6D,wBAAA,yDACAC,yBAAA,yDACAC,wBAAA,gCACAC,kBAAA,iDACAC,wBAAA,sDACAC,uBAAA,qEAEAjE,UACAkE,WAAA,uCAwBAxT,KAAAmR,UAAAsC,cAAA,SAAAlE,SAEA/K,KAAAgL,QAEAkE,YAAA/L,OAAA4H,QAAA9B,UAAAjN,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAuD,eAAA,OACAlC,MAAAnI,OAAA4H,QAAA9B,UAAAjN,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAO,QAAAhP,KAAAmR,UAAAvK,MAAA0I,SAAAkE,WAEA3H,OAAAlE,OAAA4H,QAAA9B,UAAAjN,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAS,SAAA,KACAe,MAAAtI,OAAA4H,QAAA9B,UAAAjN,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAU,QAAA,MAEAnP,KAAA6D,MAAAW,KAAAgL,OAAAD,SAEA/K,KAAAgL,OAAAkE,YAAAlK,KAAAI,MAAApF,KAAAgL,OAAAkE,aAGA,IAAAtD,KAAA5L,KAQA,GANA4L,KAAAgB,cAEAhB,KAAAuD,mBAEAvD,KAAAZ,OAAA/B,SAAA9F,OAAAyI,KAAAZ,OAAA/B,UAEA,IAAA9F,OAAAyI,KAAAZ,OAAA/B,UAAAlN,OACA,MAAAP,KAAAmR,UAAAvK,MAAAK,SAAA,aAGAzC,KAAAoP,KAAA,WACAxD,KAAAgB,cACAhB,KAAAuD,mBAEA,IAAA,IADAE,QAAAzD,KAAAZ,OAAA/B,SAAA,GACAnN,EAAA,EAAAA,EAAAuT,QAAAC,SAAAvT,OAAAD,KAEA,IAAAN,KAAA2G,KAAAY,MAAAkB,aAAAoL,QAAAC,SAAAxT,KACA8P,KAAAgB,WAAA7P,KAAAvB,KAAAmR,UAAA4C,sBAAAhO,aACAyC,UAAAqL,QAAAC,SAAAxT,GACAmN,SAAA2C,KAAAZ,OAAA/B,aAaAjJ,KAAAwP,SAAA,SAAA9F,OACAkC,KAAAwD,OACAxD,KAAAvE,OAAAqC,OAGA,IAAA,IADA+F,sBACA3T,EAAA,EAAAA,EAAA8P,KAAAgB,WAAA7Q,OAAAD,IACA,QAAAD,IAAA+P,KAAAgB,WAAA9Q,SAAAD,IAAA+P,KAAAgB,WAAA9Q,GAAA0T,SAAA,CACA,QAAA3T,IAAA4T,mBAAA7D,KAAAgB,WAAA9Q,GAAAK,MAEA,UAEA,IAAAyP,KAAAgB,WAAA9Q,GAAA0T,YACA5D,KAAAuD,gBAAApS,KAAA6O,KAAAgB,WAAA9Q,IAEA2T,mBAAA7D,KAAAgB,WAAA9Q,GAAAK,OAAA,EAgBA,OAbA,IAAAyP,KAAA8D,WACA9D,KAAAN,aACAzP,IAAA6N,OACAA,MAAAC,oBAIA,IAAA3J,KAAAgL,OAAAkE,aAEAtD,KAAA+D,gBAEA/D,KAAAH,MAAA/B,QAEAkC,KAAAuD,iBAGAnP,KAAA2P,cAAA,WACA,IAAAC,QAAAzM,OAAA,qBAAAyI,KAAAZ,OAAA/B,UACA9F,OAAAyM,SAAAvL,KAAA,SAAAC,MAAAC,MACA,IAAAsL,WAAA1M,OAAAoB,WACA1I,IAAAgU,WAAA7T,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAuE,mBACAqB,WAAAvM,IAAAuM,WAAA7T,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAuE,sBASAxO,KAAA0P,QAAA,WACA,OAAA,IAAA9D,KAAAuD,gBAAApT,QAGAiE,KAAAqH,OAAA,SAAAqC,OACA,GAAA,OAAAkC,KAAAZ,OAAA3D,OAAA,CACA,IAAAyE,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAA3D,QACA,QAAAxL,IAAAiQ,SAIA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAmR,UAAAvK,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAA3D,SAHAyE,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAA/B,SAAAS,UAQA1J,KAAAsL,MAAA,WACA,IAAAQ,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAAM,OACA,QAAAzP,IAAAiQ,SAIA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAmR,UAAAvK,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAAM,QAHAQ,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAA/B,SAAA2C,KAAAuD,mBAOAnP,KAAAyL,MAAA,SAAA/B,OACA,GAAA,OAAAkC,KAAAZ,OAAAS,MAAA,CACA,IAAAK,SAAAtQ,KAAAsD,eAAA8M,KAAAZ,OAAAS,OACA,QAAA5P,IAAAiQ,SAIA,MAAAtQ,KAAA+H,OAAAkC,OAAAjK,KAAAmR,UAAAvK,MAAAK,SAAAoI,kBAAAe,KAAAZ,OAAAS,QAHAK,SAAA5N,MAAA,MAAA0N,KAAAZ,OAAA/B,SAAAS,WAUAlO,KAAA8B,UAAA,wCAoBA9B,KAAAmR,UAAA4C,sBAAAhO,YAAA,SAAAwJ,SAEA/K,KAAAgL,UACAxP,KAAA6D,MAAAW,KAAAgL,OAAAD,SACA,IAAAa,KAAA5L,KAEA,IAAA,IAAAxE,KAAA2G,KAAAY,MAAAkB,aAAA2H,KAAAZ,OAAAhH,WACA,OAAA,KAIA,OAFAb,OAAAyI,KAAAZ,OAAAhH,WAAAX,KAAA,SAIA,IAAA,kBAGA,IAAA,aACA,OAAA,IAAA7H,KAAAmR,UAAAmD,gBAAA9P,KAAAgL,QAEA,IAAA,QACA,QAAAnP,IAAAsH,OAAAnD,KAAAgL,OAAAhH,WAAAhI,KAAA,QACA,OAAA,IAAAR,KAAAmR,UAAAoD,gBACAC,WAAAxU,KAAA2G,KAAAY,MAAAmB,cAAAf,OAAAnD,KAAAgL,OAAAhH,WAAAhI,KAAA,QAAAgE,KAAAgL,OAAA/B,YAGA,MAEA,IAAA,WACA,QAAApN,IAAAsH,OAAAnD,KAAAgL,OAAAhH,WAAAhI,KAAA,QACA,OAAA,IAAAR,KAAAmR,UAAAsD,mBACAD,WAAAxU,KAAA2G,KAAAY,MAAAmB,cAAAf,OAAAnD,KAAAgL,OAAAhH,WAAAhI,KAAA,QAAAgE,KAAAgL,OAAA/B,YAGA,MAEA,QACA,OAAA,IAAAzN,KAAAmR,UAAAuD,cAAAlQ,KAAAgL,UAuBAxP,KAAAmR,UAAAwD,mBAAA,SAAApF,SAEA,GAAA/K,KAAApD,cAAApB,KAAAmR,UAAAwD,mBACA,MAAA3U,KAAAmR,UAAAvK,MAAAK,SAAA,wBAIAzC,KAAAgL,QACA+B,QAAA5J,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA5D,UAAA,GACA+J,WAAAjN,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAwD,cAAA,IAEAjS,KAAA6D,MAAAW,KAAAgL,OAAAD,SAEA/K,KAAAtE,KAAAyH,OAAA4H,QAAA/G,WACAhE,KAAA+M,QAAA/M,KAAAgL,OAAA+B,QACA/M,KAAA7D,KAAA,QAEAN,IAAAmE,KAAAtE,KAAAM,KAAA,QACAgE,KAAA7D,KAAA6D,KAAAtE,KAAAM,KAAA,aAEAH,IAAAmE,KAAAtE,KAAAM,KAAA,QACAgE,KAAA7D,KAAA6D,KAAAtE,KAAAM,KAAA,OASAgE,KAAA0P,QAAA,aAGA1P,KAAAqQ,YAAA,WACArQ,KAAAtE,KAAAyL,SAAAnH,KAAAgL,OAAAoF,YAEApQ,KAAAtE,KAAAM,KAAA,QAAAgE,KAAA+M,UAGA/M,KAAAsQ,UAAA,WACAtQ,KAAAtE,KAAAyR,YAAAnN,KAAAgL,OAAAoF,YACApQ,KAAAtE,KAAA6U,WAAA,UAOAvQ,KAAAwP,SAAA,WAEA,OAAA,IAAAxP,KAAAtE,KAAA2H,KAAA,aACArD,KAAAsQ,aACA,IAEA,IAAAtQ,KAAA0P,WACA1P,KAAAqQ,eACA,IAGArQ,KAAAsQ,aACA,KAkCA9U,KAAAmR,UAAAuD,cAAA,SAAAnF,SAmBA,GAhBA/K,KAAAgL,QACAwF,SAAArN,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAyD,UACAhI,QAAAvC,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA0D,SACA8C,UAAAtN,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA2D,YACA8C,UAAAvN,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA4D,YACA8C,UAAAxN,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA6D,YACA8C,UAAAzN,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA8D,YACA8C,YAAA1N,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA+D,eAAAxS,KAAAmR,UAAAvK,MAAAkL,qBACAwD,QAAA3N,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAgE,UACA8C,QAAA5N,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAiE,UACA8C,QAAA7N,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAkE,WAGA3S,KAAA6D,MAAAW,KAAAgL,OAAAD,SACAvP,KAAAsC,OAAAtC,KAAAmR,UAAAwD,mBAAAnQ,MAAAA,KAAAgL,cAEAnP,IAAAmE,KAAAgL,OAAAwF,SACA,IAEAxQ,KAAAgL,OAAAwF,SAAAxL,KAAAI,MAAApF,KAAAgL,OAAAwF,UAEA,MAAAS,IAMA,IAAArF,KAAA5L,KAGA,GADA4L,KAAAlQ,KAAAyH,OAAA4H,QAAA/G,WACA,IAAA4H,KAAAlQ,KAAAK,OACA,MAAAP,KAAAmR,UAAAvK,MAAAK,SAAA,cAEAmJ,KAAAxN,KAAA,OAGA4B,KAAAgN,SAAA,WAEA,IACApB,KAAAlQ,KAAAwV,QACAtF,KAAAlQ,KAAAyV,SAEA,MAAAF,MAOAjR,KAAAoR,QAAA,WACA,MAAA,KAAAxF,KAAAlQ,KAAA4H,OAMAtD,KAAAqR,WAAA,WACA,IAAAC,YAAAtR,KAAAgL,OAAAwF,SACA,IAAA,IAAAc,YACA,OAAA,EAEA,IAAA,IAAAA,YACA,OAAA,EAGA,IAAAC,kBAAA/V,KAAAsD,eAAAwS,aACA,QAAAzV,IAAA0V,kBACA,OAAAA,kBAAArT,MAAA,MAAA0N,KAAAlQ,OAGA,MAAAF,KAAA+H,OAAAkC,OAAAjK,KAAAmR,UAAAvK,MAAAK,SAAAoI,kBAAAyG,eAUAtR,KAAA0P,QAAA,WACA,GAAA9D,KAAAwF,UACA,OAAA,IAAAxF,KAAAyF,aASA,IAAA,IAAAG,QAAAhW,KAAAmR,UAAA8E,MAEA,QAAA5V,IAAA+P,KAAAlQ,KAAAM,KAAAR,KAAAmR,UAAAvK,MAAAiL,YAAAmE,QAEA,IAAAhW,KAAAmR,UAAA8E,MAAAD,MAAAtT,MAAA,MAAA0N,KAAAlQ,KAAAkQ,OACA,OAAA,EAKA,OAAA,IAsBApQ,KAAAmR,UAAAmD,gBAAA,SAAA/E,SAGA/K,KAAAgL,QACA0G,aAAAvO,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAqE,eACAqD,aAAAxO,OAAA4H,QAAA/G,WAAAhI,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAsE,gBAGA/S,KAAA6D,MAAAW,KAAAgL,OAAAD,SACAvP,KAAAsC,OAAAtC,KAAAmR,UAAAwD,mBAAAnQ,MAAAA,KAAAgL,SAGA,IAAAY,KAAA5L,KAGA,GAFA4L,KAAAxN,KAAA,SACAwN,KAAAlQ,KAAAyH,OAAA4H,QAAA/G,WACA,IAAA4H,KAAAlQ,KAAAK,OACA,MAAAP,KAAAmR,UAAAvK,MAAAK,SAAA,cAIA,QAAA5G,IAAA+P,KAAAZ,OAAA0G,eAAAvO,OAAAyO,UAAAhG,KAAAZ,OAAA0G,cACA,MAAAlW,KAAAmR,UAAAvK,MAAAK,SAAA,wBAKA,IAAAoP,aAAAjG,KAAAlQ,KAAA2H,KAAA,kBACA,IAAAwO,eACAA,aAAA,GAEAA,aAAAlG,SAAAkG,aAAA,IAQA7R,KAAA0P,QAAA,WAEA,OAAAmC,eAAAlG,SAAAC,KAAAZ,OAAA0G,aAAA,KAIA9F,KAAAlQ,KAAA4H,QAAAsI,KAAAZ,OAAA2G,eA4BAnW,KAAAmR,UAAAmF,mBAAA,SAAA/G,SAEA,GAAA/K,KAAApD,cAAApB,KAAAmR,UAAAmF,mBACA,MAAAtW,KAAAmR,UAAAvK,MAAAK,SAAA,yBAGAzC,KAAAgL,UACAxP,KAAA6D,MAAAW,KAAAgL,OAAAD,SACA/K,KAAAgQ,WAAAhQ,KAAAgL,OAAAgF,WACAhQ,KAAA7D,KAAAgH,OAAAnD,KAAAgL,OAAAgF,YAAAhU,KAAA,QACAgE,KAAA+M,QAAA,GACA/M,KAAAoQ,WAAA,GAGA,IAAA,IAAAtU,EAAA,EAAAA,EAAAkE,KAAAgQ,WAAAjU,OAAAD,IAAA,CACA,IAAAiW,MAAA5O,OAAAnD,KAAAgQ,WAAAlU,SACAD,IAAAkW,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA5D,WACArG,KAAA+M,QAAAgF,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAA5D,eAEAxK,IAAAkW,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAwD,eACAzN,KAAAoQ,WAAA2B,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAwD,cAUAzN,KAAA0P,QAAA,aAGA1P,KAAAqQ,YAAA,WAEA,GAAA,KAAArQ,KAAAoQ,WACA,IAAA,IAAAtU,EAAA,EAAAA,EAAAkE,KAAAgQ,WAAAjU,OAAAD,IAAA,CACA,IAAAiW,MAAA5O,OAAAnD,KAAAgQ,WAAAlU,IACAiW,MAAA5K,SAAAnH,KAAAoQ,YACA2B,MAAA/V,KAAA,QAAAgE,KAAA+M,WAKA/M,KAAAsQ,UAAA,WACA,GAAA,KAAAtQ,KAAAoQ,WACA,IAAA,IAAAtU,EAAA,EAAAA,EAAAkE,KAAAgQ,WAAAjU,OAAAD,IAAA,CACA,IAAAiW,MAAA5O,OAAAnD,KAAAgQ,WAAAlU,IACAiW,MAAA5E,YAAAnN,KAAAoQ,YACA2B,MAAAxB,WAAA,WASAvQ,KAAAwP,SAAA,WACA,OAAA,IAAAxP,KAAA0P,WACA1P,KAAAsQ,aACA,IAGAtQ,KAAAqQ,eACA,KAsBA7U,KAAAmR,UAAAoD,eAAA,SAAAhF,SAEA/K,KAAAgL,UACAxP,KAAA6D,MAAAW,KAAAgL,OAAAD,SACAvP,KAAAsC,OAAAtC,KAAAmR,UAAAmF,mBAAA9R,MAAAA,KAAAgL,SACAhL,KAAA5B,KAAA,QAMA4B,KAAAqR,WAAA,WAIA,IAAA,IAHAW,cAAA,EACAC,WAAAjS,KAAAgQ,WAEAlU,EAAA,EAAAA,EAAAmW,WAAAlW,OAAAD,IAAA,CACA,IAAAiW,MAAA5O,OAAA8O,WAAAnW,KACA,IAAAiW,MAAA1O,KAAA,aACA0O,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAyD,YACAsE,aAAAD,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAyD,WAIA,OAAAsE,cASAhS,KAAA0P,QAAA,WACA,GAAA,SAAA1P,KAAAqR,aAAA,CAEA,IAAA,IADAY,WAAAjS,KAAAgQ,WACAlU,EAAA,EAAAA,EAAAmW,WAAAlW,OAAAD,IAGA,IAAA,IAFAqH,OAAA8O,WAAAnW,IAEAuH,KAAA,WACA,OAAA,EAGA,OAAA,EAEA,OAAA,IAsBA7H,KAAAmR,UAAAsD,kBAAA,SAAAlF,SAEA/K,KAAAgL,UACAxP,KAAA6D,MAAAW,KAAAgL,OAAAD,SACAvP,KAAAsC,OAAAtC,KAAAmR,UAAAmF,mBAAA9R,MAAAA,KAAAgL,SACAhL,KAAA5B,KAAA,WACA4B,KAAAkS,WAAA,EACAlS,KAAAmS,WAAAnS,KAAAgL,OAAAgF,WAAAjU,OAGA,IAAA,IAAAD,EAAA,EAAAA,EAAAkE,KAAAgQ,WAAAjU,OAAAD,IAAA,CACA,IAAAiW,MAAA5O,OAAAnD,KAAAgQ,WAAAlU,KACA,IAAAiW,MAAA1O,KAAA,mBACAxH,IAAAkW,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAmE,eACApO,KAAAkS,WAAAH,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAmE,mBAEAvS,IAAAkW,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAoE,eACArO,KAAAmS,WAAAJ,MAAA/V,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAoE,eAUArO,KAAA0P,QAAA,WAGA,IAAA,IAFA0C,aAAA,EACAH,WAAAjS,KAAAgQ,WACAlU,EAAA,EAAAA,EAAAmW,WAAAlW,OAAAD,IAAA,CAEA,IAAAiW,MAAA5O,OAAAnD,KAAAgQ,WAAAlU,KACA,IAAAiW,MAAA1O,KAAA,cACA,IAAA0O,MAAA1O,KAAA,YACA+O,eAIA,OAAAA,cAAApS,KAAAkS,YAAAE,cAAApS,KAAAmS,aAOA3W,KAAA8B,UAAA,wBAEA9B,KAAAmR,UAAA8E,MAAAY,MAAA,SAAArO,UAAA2I,WACA,IAAAvJ,WAAAY,UAAAV,MACAgP,YAAA,IAAAlP,WAAAmP,QAAA,KACAC,YAAA,IAAApP,WAAAmP,QAAA,KACA,OAAA,IAAAD,aAAA,IAAAE,YASAhX,KAAAmR,UAAA8E,MAAAT,QAAA,SAAAhN,UAAA2I,WACA,IAAA8F,gBAAAtP,OAAA,IAAAwJ,UAAA3B,OAAAgG,SACA,GAAA,IAAAyB,gBAAA1W,OACA,MAAAP,KAAA+H,OAAAkC,OAAAjK,KAAAmR,UAAAvK,MAAAK,SAAAsM,wBAAApC,UAAA3B,OAAAgG,UAEA,OAAAhN,UAAAV,QAAAmP,gBAAAnP,OAGA9H,KAAAmR,UAAA8E,MAAAZ,YAAA,SAAA7M,UAAA2I,WAEA,OAAA,OADAnR,KAAAmR,UAAA+F,aAAA1O,UAAAV,MAAAqJ,UAAA3B,OAAA6F,cAOArV,KAAAmR,UAAA8E,MAAAV,QAAA,SAAA/M,UAAA2I,WACA,IAAAjH,QAAAiH,UAAA3B,OAAA6F,YACA8B,UAAAnX,KAAAmR,UAAA+F,aAAA1O,UAAAV,MAAAoC,SACAkN,QAAApX,KAAAmR,UAAA+F,aAAA/F,UAAA3B,OAAA+F,QAAArL,SACA,OAAA,OAAAiN,WAAA,OAAAC,SACAD,WAAAC,SAKApX,KAAAmR,UAAA8E,MAAAX,QAAA,SAAA9M,UAAA2I,WACA,IAAAjH,QAAAiH,UAAA3B,OAAA6F,YACA8B,UAAAnX,KAAAmR,UAAA+F,aAAA1O,UAAAV,MAAAoC,SACAmN,QAAArX,KAAAmR,UAAA+F,aAAA/F,UAAA3B,OAAA8F,QAAApL,SACA,OAAA,OAAAiN,WAAA,OAAAE,SACAF,WAAAE,SAKArX,KAAAmR,UAAA8E,MAAAf,UAAA,SAAA1M,UAAA2I,WACA,QAAA3I,UAAAV,MAAAvH,OAAA4Q,UAAA3B,OAAA0F,YAMAlV,KAAAmR,UAAA8E,MAAAhB,UAAA,SAAAzM,UAAA2I,WACA,QAAA3I,UAAAV,MAAAvH,OAAA4Q,UAAA3B,OAAAyF,YAMAjV,KAAAmR,UAAA8E,MAAAb,UAAA,SAAA5M,UAAA2I,WACA,OAAA,IAAAxJ,OAAAyO,UAAA5N,UAAAV,QAGAwP,WAAA9O,UAAAV,QAAAwP,WAAAnG,UAAA3B,OAAA4F,YAMApV,KAAAmR,UAAA8E,MAAAd,UAAA,SAAA3M,UAAA2I,WACA,OAAA,IAAAxJ,OAAAyO,UAAA5N,UAAAV,QAGAwP,WAAA9O,UAAAV,QAAAwP,WAAAnG,UAAA3B,OAAA2F,YASAnV,KAAAmR,UAAA8E,MAAA/L,QAAA,SAAA1B,UAAA2I,WACA,IAAAoG,UAAAvX,KAAAmR,UAAAqG,SAAArG,UAAA3B,OAAAtF,SACA,QAAA7J,IAAAkX,UACA,OAAAA,UAAA5M,KAAAnC,UAAAV,OAIA,MAAA9H,KAAA+H,OAAAkC,OAAAjK,KAAAmR,UAAAvK,MAAAK,SAAAoM,mBAAAlC,UAAA3B,OAAAtF,WAMAlK,KAAA8B,UAAA,2BAEA9B,KAAAmR,UAAAqG,SAAAC,YAAA,IAAA3N,OAAA,eACA9J,KAAAmR,UAAAqG,SAAAE,aAAA,IAAA5N,OAAA,UACA9J,KAAAmR,UAAAqG,SAAAG,QAAA,IAAA7N,OAAA,mBACA9J,KAAAmR,UAAAqG,SAAAI,gBAAA,IAAA9N,OAAA,aACA9J,KAAAmR,UAAAqG,SAAAK,OAAA,IAAA/N,OAAA,uDACA9J,KAAAmR,UAAAqG,SAAAM,aAAA,IAAAhO,OAAA,6BACA9J,KAAAmR,UAAAqG,SAAAO,aAAA,IAAAjO,OAAA,kCACA9J,KAAAmR,UAAAqG,SAAAQ,aAAA,IAAAlO,OAAA,6BACA9J,KAAAmR,UAAAqG,SAAAS,SAAA,IAAAnO,OAAA,qBACA9J,KAAAmR,UAAAqG,SAAAU,KAAA,IAAApO,OAAA,mCAIA9J,KAAA8B,UAAA,4BAaA9B,KAAAmR,UAAAgH,kBAAA,SAAAC,IAAAC,KAAAC,MAAAC,IAAAC,WACA,IAAAC,WAMA,OALAA,QAAAL,IAAA,IAAAtO,OAAAsO,KACAK,QAAAC,EAAAL,KACAI,QAAAE,EAAAL,MACAG,QAAAG,EAAAL,IACAE,QAAAI,EAAAL,UACAC,SAUAzY,KAAAmR,UAAA+F,aAAA,SAAA4B,QAAAC,aACA,IAAAC,YAAAhZ,KAAAmR,UAAA8H,UAAAF,aACA,QAAA1Y,IAAA2Y,YAAA,CAGA,IAAAA,YAAAZ,IAAAzN,KAAAmO,SACA,OAAA,KAKA,IAAAI,SAAAJ,QAAA5W,MAAA8W,YAAAH,GAEAM,SAAA,IAAAC,KAAAF,SAAAF,YAAAN,GAAAQ,SAAAF,YAAAL,GAAA,EAAAO,SAAAF,YAAAJ,IAEAS,YAAAF,SAAAG,gBAAAnJ,SAAA+I,SAAAF,YAAAN,GAAA,IACAa,aAAAJ,SAAAK,aAAArJ,SAAA+I,SAAAF,YAAAL,GAAA,EAAA,IACAc,WAAAN,SAAAO,YAAAvJ,SAAA+I,SAAAF,YAAAJ,GAAA,IACA,OAAA,IAAAS,cAAA,IAAAE,eAAA,IAAAE,WACAN,SAEA,KAEA,OAAA,MAGAnZ,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,0CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,cAAAjZ,KAAAmR,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnY,KAAAmR,UAAA8H,UAAA,YAAAjZ,KAAAmR,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KAMAnY,KAAAmR,UAAAH,UAAA,SAAAhL,eACA3F,IAAA2F,WACAA,SAAA2B,OAAA,SAEA3B,SAAA4C,KAAA5I,KAAAmR,UAAAvK,MAAA0H,eAAAzF,KAAA,SAAAC,MAAAC,MACA,IAAA0E,SAAA9F,OAAAoB,MAEA,SAAA0E,SAAAjN,KAAAR,KAAAmR,UAAAvK,MAAA6H,kBAAAsD,WACAtE,SAAAwD,OAAA,SAAA/C,OACA,IAAAlO,KAAAmR,UAAAsC,eACAhG,SAAAA,WAEAuG,SAAA9F,YAQAlO,KAAA8B,UAAA,sBAeA9B,KAAAmR,UAAAwI,IAAAC,aAAA,SAAArK,SACA,IAAAsK,cAAA,IAAA7Z,KAAAmR,UAAAsC,cAAAlE,SAEA,OADAsK,cAAA7F,WACA6F,cAAA3F,WAiBAlU,KAAAmR,UAAAwI,IAAAG,cAAA,SAAAvK,SACA,IAAA,IAAAvP,KAAA2G,KAAAY,MAAAkB,aAAA8G,QAAA/G,WACA,MAAAxI,KAAAmR,UAAAvK,MAAAK,SAAA,6BAGA5G,IAAAkP,QAAAO,QACAP,QAAAO,MAAA9P,KAAAmR,UAAAvK,MAAA0I,SAAAkE,YAEA,IAAAG,mBACAoG,eAAA,IAAA/Z,KAAAmR,UAAA4C,sBAAAhO,YAAAwJ,SAEA,GADAwK,eAAA/F,SAAA,OACA,IAAA+F,eAAA7F,UAAA,CACA,IAAA5D,SAAAtQ,KAAAsD,eAAAiM,QAAAO,OACA6D,gBAAApS,KAAAwY,gBACAzJ,SAAAf,QAAA/G,UAAAmL,iBAEA,OAAAoG,eAAA7F,WAgBAlU,KAAAmR,UAAAwI,IAAAK,eAAA,SAAAzK,SAEAA,QAAAO,QACAP,QAAAO,MAAA9P,KAAAmR,UAAAvK,MAAA0I,SAAAkE,YAMA,IAAA,IAJApC,cACA6C,sBACAN,mBAEArT,EAAA,EAAAA,EAAAiP,QAAAjI,OAAA/G,OAAAD,KAEA,IAAAN,KAAA2G,KAAAY,MAAAkB,aAAA8G,QAAAjI,OAAAhH,KACA8Q,WAAA7P,KAAAvB,KAAAmR,UAAA4C,sBAAAhO,aACAyC,UAAA+G,QAAAjI,OAAAhH,MAIA,IAAA,IAAA+H,EAAA,EAAAA,EAAA+I,WAAA7Q,OAAA8H,IAEA,GAAA+I,WAAA/I,IAAA+I,WAAA/I,GAAA2L,SAAA,CACA,QAAA3T,IAAA4T,mBAAA7C,WAAA/I,GAAA1H,MAEA,UAEA,IAAAyQ,WAAA/I,GAAA2L,YACAL,gBAAApS,KAAA6P,WAAA/I,IAEA4L,mBAAA7C,WAAA/I,GAAA1H,OAAA,EAOA,OAJAgT,gBAAApT,OAAA,GACAP,KAAAsD,eAAAiM,QAAAO,OACApN,MAAA,MAAA6M,QAAA9B,SAAAkG,kBAEA,IAAAA,gBAAApT,QAgBAP,KAAAmR,UAAAwI,IAAAM,oBAAA,SAAA1K,SACA,IAAAjI,OAAAtH,KAAA2G,KAAAY,MAAAC,eAAA+H,QAAAvJ,UACA,OAAAhG,KAAAmR,UAAAwI,IAAAK,gBACA1S,OAAAA,OACAwI,MAAAP,QAAAO,SAIAnI,OAAAnB,UAAA0K,MAAA,WACAlR,KAAAmR,UAAAH,cAnrCA,QCDA,IAAA,KACA,KAAA,+BASA,WACA,aAEAhR,KAAA8B,UAAA,aAGA9B,KAAA4B,KAAAsY,sBAEAla,KAAA4B,KAAAgF,OACAuT,WAAA,OAAA,SAAA,UACAC,QACAC,oBAAA,oBACAC,aAAA,cACAC,YAAA,aACAC,aAAA,cACAC,gBAAA,gBACAC,cAAA,eACAC,UAAA,YAEAxW,gBACAyW,gBAAA,iEACAC,yBAAA,oDACAC,sBAAA,oJACAC,0BAAA,sDACAC,uBAAA,+IACAC,cAAA,oEAEAC,OAAA,YACAC,cAAA,UACAC,YAAA,KASApb,KAAA4B,KAAAyZ,cAAA,SAAAC,MACA,YAAAjb,IAAAL,KAAA4B,KAAAsY,mBAAAoB,MACAtb,KAAA4B,KAAAsY,mBAAAoB,MAEA,MASAtb,KAAA4B,KAAA2Z,cAAA,SAAAD,KAAAE,YACA,GAAA,OAAAxb,KAAA4B,KAAAyZ,cAAAC,MACA,MAAAtb,KAAA+H,OAAAkC,OAAAjK,KAAA4B,KAAAgF,MAAAzC,eAAAyW,iBAAAU,OAEAtb,KAAA4B,KAAAsY,mBAAAoB,MAAAE,YAOAxb,KAAA4B,KAAA6Z,OACAzM,MAAA,QACA0M,QAAA,UACAC,MAAA,SAGA3b,KAAA8B,UAAA,mBAiBA9B,KAAA4B,KAAA2F,MAAAqU,yBAAA,SAAAC,OACA,GAAA,OAAAA,QAAA,IAAA7b,KAAA4B,KAAA2F,MAAAuU,aAAAD,OACA,MAAA7b,KAAA+H,OAAAkC,OAAAjK,KAAA4B,KAAAgF,MAAAzC,eAAA8W,eAAAY,QAEA,OACAA,MAAAA,MACAE,aAAAF,QAAA7b,KAAA4B,KAAA6Z,MAAAzM,MACAgN,eAAAH,QAAA7b,KAAA4B,KAAA6Z,MAAAC,QACAO,aAAAJ,QAAA7b,KAAA4B,KAAA6Z,MAAAE,QAaA3b,KAAA4B,KAAA2F,MAAArB,OAAA,SAAAgW,KAAAhW,OAAAiW,SACA,IAAA,IAAAnc,KAAA2C,WAAAuD,QACA,MAAAlG,KAAA4B,KAAAgF,MAAAzC,eAAA,yBAGA,IAAA,IADAiY,WACA9b,EAAA,EAAAA,EAAA4b,KAAA3b,OAAAD,IAAA,CACA,IAAA+b,YAAAnW,OAAAgW,KAAA5b,GAAAA,EAAA6b,SAEA,GAAA,OAAAE,YAAA,CAIA,IAAA,IAAArc,KAAA6C,cAAAwZ,aACA,MAAArc,KAAA4B,KAAAgF,MAAAzC,eAAA,yBAGAiY,QAAA7a,KAAA8a,cAEA,OAAAD,SAUApc,KAAA4B,KAAA2F,MAAA+U,OAAA,SAAAJ,KAAAK,UAAAJ,SACA,IAAA,IAAAnc,KAAA2C,WAAA4Z,WACA,MAAAvc,KAAA4B,KAAAgF,MAAAzC,eAAA,uBAEA,IAAA,IAAA7D,EAAA,EAAAA,EAAA4b,KAAA3b,OAAAD,IAAA,CACA,IAAAkc,aAAAD,UAAAL,KAAA5b,GAAAA,EAAA6b,SACA,IAAA,IAAAnc,KAAA6C,cAAA2Z,cACA,MAAAxc,KAAA4B,KAAAgF,MAAAzC,eAAA,yBAUAnE,KAAA4B,KAAA2F,MAAAuU,aAAA,SAAAD,OACA,IAAA,IAAAY,OAAAzc,KAAA4B,KAAA6Z,MACA,GAAAzb,KAAA4B,KAAA6Z,MAAAgB,OAAAZ,MACA,OAAA,EAGA,OAAA,GA7JA,GAiKA,WACA,aAiEA7b,KAAA4B,KAAA8a,QAAA,SAAAnN,SAEA,IAAA3I,OACAzC,gBACAwY,iBAAA,wDACAC,uBAAA,2CACAC,4BAAA,wEACAhC,yBAAA,kEACAiC,kBAAA,0GACAC,wBAAA,4HACAC,sBAAA,iFACAC,yBAAA,wCACAC,4BAAA,6DACAC,qBAAA,uFACAC,mBAAA,6EACAnC,cAAA,yCAIA,QAAA5a,IAAAkP,QAAA+L,KACA,MAAA1U,MAAAzC,eAAA,uBAEA,QAAA9D,IAAAkP,QAAAgN,YAAA,IAAAvc,KAAA2C,WAAA4M,QAAAgN,WACA,MAAA3V,MAAAzC,eAAA,4BAEA,QAAA9D,IAAAkP,QAAArJ,SAAA,IAAAlG,KAAA2C,WAAA4M,QAAArJ,QACA,MAAAU,MAAAzC,eAAA,yBAEAnE,KAAAsC,OAAAtC,KAAAuE,SAAAC,MAGA,IAAA4L,KAAA5L,KAEAA,KAAA8W,KAAA/L,QAAA+L,KAGA9W,KAAA6Y,WAGA7Y,KAAA8Y,eAGA9Y,KAAA+X,UAAA,UACAlc,IAAAkP,QAAAgN,YACA/X,KAAA+X,UAAAhN,QAAAgN,WAIA/X,KAAA+Y,gBAAA,KAGA/Y,KAAA0B,OAAA,KAGA1B,KAAAqX,MAAA,KAEArX,KAAAgZ,aAAA,KACAhZ,KAAAiZ,eACAjZ,KAAAkZ,mBACAlZ,KAAAmZ,cAAA,GAEA3d,KAAA4B,KAAA2Z,cAAA/W,KAAA8W,KAAA9W,MAIA,IAAAoZ,UAAA,WACAxN,KAAAmN,gBAAA,KACAnN,KAAAiN,WACAjN,KAAAkN,gBAGAO,YAAA,YACA,IAAAC,cACA1N,KAAAmN,gBAAAvd,KAAA4B,KAAA2F,MAAArB,OAAAkK,KAAAiN,QAAAjN,KAAAlK,OAAAkK,MACAA,KAAA2N,oBAIAC,eAAA,YACA,IAAAC,gBACAje,KAAA4B,KAAA2F,MAAA+U,OAAAlM,KAAAiN,QAAAjN,KAAAmM,UAAAnM,OAIA0N,UAAA,WACA,OAAA,OAAA1N,KAAAlK,QAGA+X,aAAA,WACA,OAAA,OAAA7N,KAAAmM,WAGA2B,UAAA,WACA,OAAA,IAAAJ,YACA1N,KAAAmN,gBAEAnN,KAAAiN,SAUA7Y,KAAA2Z,YAAA,WACA3Z,KAAA0B,OAAA,KACA1B,KAAA+Y,gBAAA,KACA/Y,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,QAaAA,KAAA4Z,OAAA,SAAAlY,QACA,QAAA7F,IAAA6F,OACA0X,gBAEA,CACA,IAAA,IAAA5d,KAAA2C,WAAAuD,QACA,MAAAU,MAAAzC,eAAA,yBAGA,IAAA,IADAka,KAAA7Z,KAAA6Y,QACA/c,EAAA,EAAAA,EAAA+d,KAAA9d,OAAAD,IACA,GAAA,OAAA4F,OAAAmY,KAAA/d,GAAAA,EAAAkE,MAAA,CAEA,IAAA8Z,YAAAD,KAAA/d,GACAkE,KAAA6Y,QAAAhY,OAAA/E,EAAA,UACAkE,KAAA8Y,YAAAgB,YAAAte,KAAA4B,KAAAgF,MAAAsU,SAGA2C,cAEArZ,KAAAuZ,kBACAvZ,KAAA+Z,SAAAve,KAAA4B,KAAA6Z,MAAAE,OACAnX,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,QAQAA,KAAAga,cAAA,SAAAC,YACA,YAAApe,IAAAmE,KAAAiZ,YAAAgB,YACAja,KAAAiZ,YAAAgB,YAEA,UAMAja,KAAAka,WAAA,WACA,IAAAC,SACAC,SAAAxO,KAAAuF,SACAkJ,YAAAzO,KAAA0O,mBAEAC,UAAA/e,KAAA4B,KAAA2F,MAAAqU,yBAAAxL,KAAA4O,YAEA,OADAhf,KAAA6D,MAAA8a,QAAAI,WACAJ,SAQAna,KAAAya,cAAA,WACA,OAAAza,KAAA0a,WAAA1a,KAAA2a,oBAUA3a,KAAA2a,gBAAA,WACA,OAAA3a,KAAAgZ,cAOAhZ,KAAA4a,mBAAA,WACA,IAAAC,IAAA7a,KAAAya,gBACA,OAAAza,KAAA8a,YAAAD,MAQA7a,KAAAsa,gBAAA,WACA,OAAAZ,YAAA3d,QAQAiE,KAAA0a,WAAA,SAAAK,OACA,IAAAC,UAAAhb,KAAA8Y,YAAAiC,OACA,YAAAlf,IAAAmf,UAEA,MAEA,IAAA1B,aACA,IAAAtZ,KAAA+Y,gBAAAxG,QAAAyI,WACAA,UAEA,KAGAA,WAUAhb,KAAAib,cAAA,SAAA3W,OACA,IAAA4W,WAOA,QAAArf,KALAqf,YADA,IAAA5B,YACAtZ,KAAA+Y,gBAAAzU,OAGAtE,KAAA6Y,QAAAvU,QAGA,MAAAlC,MAAAzC,eAAA,4BAEA,OAAAub,YAOAlb,KAAA8a,YAAA,SAAAD,KACA,OAAA,IAAAvB,YACAtZ,KAAA+Y,gBAAAxG,QAAAsI,KAEA7a,KAAA6Y,QAAAtG,QAAAsI,MAQA7a,KAAAmb,cAAA,WACA,OAAAnb,KAAAkZ,iBAAAlZ,KAAAkZ,gBAAAnd,OAAA,EAAAiE,KAAAkZ,gBAAA,GAAA,IAQAlZ,KAAAob,aAAA,WACA,OAAApb,KAAAmZ,cAAAnZ,KAAAmZ,cAAA,IAOAnZ,KAAAwa,SAAA,WACA,OAAAxa,KAAAqX,OAYArX,KAAAqb,OAAA,SAAAxC,SAEA,IAAAyC,iBACA,IAAA,IAAA9f,KAAAiB,QAAAoc,SACAyC,cAAAzC,YAEA,CAEA,IAAA,IAAArd,KAAA6C,cAAAwa,SACA,MAAAzW,MAAAzC,eAAA,kBAEA2b,cAAAve,KAAA8b,SAEA,IAAA,IAAA/c,EAAA,EAAAA,EAAAwf,cAAAvf,OAAAD,IAAA,CAEA,IAAA,IAAAN,KAAA6C,cAAAid,cAAAxf,IACA,MAAAsG,MAAAzC,eAAA,wBAGA,IAAA4b,SAAA/f,KAAA4B,KAAAgF,MAAAuU,cAAA3W,KAAA6Y,QAAA9c,OACAuf,cAAAxf,GAAAN,KAAA4B,KAAAgF,MAAAsU,QAAA6E,SACAvb,KAAA8Y,YAAAyC,UAAAD,cAAAxf,GACAkE,KAAA6Y,QAAA9b,KAAAue,cAAAxf,IAEA0d,iBACAH,cACArZ,KAAAuZ,kBACAvZ,KAAA+Z,SAAAve,KAAA4B,KAAA6Z,MAAAE,OACAnX,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,QAOAA,KAAAuZ,gBAAA,WAEA,OAAAvZ,KAAAgZ,cAGA,OADAhZ,KAAA0a,WAAA1a,KAAAgZ,cAOAhZ,KAAAwb,yBALAxb,KAAAyb,gBAAAzb,KAAAgZ,eAYAhZ,KAAAwb,uBAAA,WAEA,IAAA,IAAAlC,YACA,OAAA,OAAAtZ,KAAA+Y,iBAAA,IAAA/Y,KAAA+Y,gBAAAhd,YACAiE,KAAAyb,gBAAA,WAKAzb,KAAAyb,gBAAAzb,KAAA+Y,gBAAA,GAAAvd,KAAA4B,KAAAgF,MAAAsU,SAKA1W,KAAA6Y,QAAA9c,OAAA,EAEAiE,KAAAyb,gBAAAzb,KAAA6Y,QAAA,GAAArd,KAAA4B,KAAAgF,MAAAsU,SAGA1W,KAAAyb,gBAAA,OAYAzb,KAAAmR,OAAA,SAAAzP,QACA,QAAA7F,IAAA6F,OACA,OAAAgY,YAEA,IAAA,IAAAle,KAAA2C,WAAAuD,QACA,MAAAU,MAAAzC,eAAA,yBAEA,OAAAnE,KAAA4B,KAAA2F,MAAArB,OAAAgY,YAAAhY,OAAAkK,OASA5L,KAAA0b,cAAA,SAAAC,YAAAC,aACA,IAAApgB,KAAAiB,QAAAkf,eACAA,aAAAA,cAEA,IAAA,IAAA7f,EAAA,EAAAA,EAAA6f,YAAA5f,OAAAD,IAAA,CACA,IAAA+f,QAAAF,YAAA7f,GACA,IAAA,IAAAN,KAAA4B,KAAAgF,MAAAuT,UAAApD,QAAAqJ,YACA,MAAApgB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAwY,kBAAA0D,UAEA7b,KAAAiZ,YAAA4C,SAAAD,aAaA5b,KAAAyb,gBAAA,SAAAV,OAEA,GAAA/a,KAAAgZ,eAAA+B,MAAA,CAMA,IAAAe,kBACAC,SAAA/b,KAAA2a,kBACAqB,OAAAhc,KAAA0a,WAAA1a,KAAAgZ,cACAA,aAAA+B,MACAkB,WAAAjc,KAAA0a,WAAAK,OACAmB,QAAAlc,MAGA,GAAA,OAAA+a,OAAA,OAAA/a,KAAAgZ,aAGA,OAFAhZ,KAAAgZ,aAAA,UACAhZ,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAC,oBAAAiG,kBAIA,GAAA,OAAA9b,KAAA0a,WAAAK,OACA,MAAA3Y,MAAAzC,eAAA,yBAEAK,KAAAgZ,aAAA+B,MACA/a,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAC,oBAAAiG,oBAUA9b,KAAAmc,cAAA,SAAAtB,KACA,IAAAuB,aAAApc,KAAA8a,YAAAD,KACA,IAAA,IAAAuB,aACA,MAAAha,MAAAzC,eAAA,sBAEAK,KAAAyb,gBAAAjgB,KAAA4B,KAAAgF,MAAAuU,cAAAyF,eAUApc,KAAAqc,mBAAA,SAAA/X,OACAtE,KAAAmc,cAAAnc,KAAAib,cAAA3W,SAYAtE,KAAAsc,UAAA,SAAA5a,QACA,IAAA,IAAAlG,KAAA2C,WAAAuD,QACA,MAAAU,MAAAzC,eAAA,yBAEAK,KAAA0B,OAAAA,OACA2X,cACArZ,KAAA+Z,SAAAve,KAAA4B,KAAA6Z,MAAAE,OACAnX,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,QASAA,KAAA+Z,SAAA,SAAAwC,UACA,IAAA,IAAA/gB,KAAA4B,KAAA2F,MAAAuU,aAAAiF,UACA,MAAA/gB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAA8W,eAAA8F,WAEA,IAAAC,SAAAxc,KAAAqX,MACArX,KAAAqX,MAAAkF,SAGA,IAAAT,kBACAU,SAAAA,SACAC,aAAAzc,KAAAqX,MACA6E,QAAAlc,MAGAA,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAM,cAAA4F,mBAWA9b,KAAA0c,KAAA,SAAAf,YAAAgB,WAIA,QAAA9gB,IAAA8f,aAAA,OAAAA,YACA,MAAAvZ,MAAAzC,eAAA,qBAKA,QAHA9D,IAAA8gB,YACAA,UAAAnhB,KAAA4B,KAAAsf,KAAAE,MAAAC,MAEA,IAAArhB,KAAA4B,KAAAsf,KAAAI,iBAAAH,WACA,MAAAnhB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAiZ,oBAAA+D,YAGA,IAAAI,YAAAC,oBAAArB,aAEAgB,YAAAnhB,KAAA4B,KAAAsf,KAAAE,MAAAC,MACAF,UAAAM,sBAAAF,cAIA,IAAAjB,kBACAI,QAAAlc,KACAkd,eAAAld,KAAAkZ,gBACAiE,aAAAnd,KAAAmZ,cACAiE,eAAAL,YACAM,aAAAV,WAGA3c,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAK,gBAAA6F,kBAMA,IAAA,IAJAwB,eAAAP,YAAAA,YAAAhhB,OAAA,GACAwhB,eAAAvd,KAAAga,cAAAsD,gBACAE,aAAAhiB,KAAA4B,KAAAsf,KAAAe,gBAAAF,eAAAZ,WAEA7gB,EAAAihB,YAAAhhB,OAAA,EAAAD,GAAA,EAAAA,IAAA,CACA,IAAA4hB,iBAAAX,YAAAjhB,GACA6hB,iBAAA3d,KAAAga,cAAA0D,kBACAE,aAAApiB,KAAA4B,KAAAsf,KAAAe,gBAAAE,iBAAAhB,WACAa,aAAAK,2BAAAD,aAAAF,kBAAAF,cAGAxd,KAAA6Y,QAAA6D,KAAAc,cACAnE,cACArZ,KAAAwb,yBACAxb,KAAA+Z,SAAAve,KAAA4B,KAAA6Z,MAAAE,OACAnX,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAG,YAAA+F,kBACA9b,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,OAGAA,KAAAkZ,gBAAA6D,YAAAe,MAAA,GACA9d,KAAAmZ,cAAAwD,WAIA,IAAAkB,2BAAA,SAAAE,MAAAC,OACA,OAAA,SAAAC,EAAAC,GACA,IAAAC,IAAAJ,MAAAE,EAAAC,GAIA,OAHA,IAAAC,MACAA,IAAAH,MAAAC,EAAAC,IAEAC,MAIAnB,oBAAA,SAAArB,aAGA,OAAA,IAAAngB,KAAAiB,QAAAkf,cACAA,YAAAngB,KAAA4B,KAAAgF,MAAAsU,QAEAiF,YAAA5f,OAAA,GAAA4f,YAAA,KAAAngB,KAAA4B,KAAAgF,MAAAsU,QACAiF,YAAA5e,KAAAvB,KAAA4B,KAAAgF,MAAAsU,QACAiF,aAEAA,aAGAsB,sBAAA,SAAAF,aACA,OAAAnR,KAAAsN,gBAAAnd,OAAA,GAAA6P,KAAAsN,gBAAA,KAAA6D,YAAA,IAAAnR,KAAAuN,gBAAA3d,KAAA4B,KAAAsf,KAAAE,MAAAwB,IACA5iB,KAAA4B,KAAAsf,KAAAE,MAAAyB,KAGA7iB,KAAA4B,KAAAsf,KAAAE,MAAAwB,KAcApe,KAAA8X,OAAA,SAAApW,OAAA4c,SAEA,IAAAvF,gBAAAvd,KAAA4B,KAAA2F,MAAArB,OAAA1B,KAAA6Y,QAAAnX,OAAA1B,MACAxE,KAAA4B,KAAA2F,MAAA+U,OAAAiB,gBAAAuF,QAAAte,MACAA,KAAAuZ,kBACAvZ,KAAA+Z,SAAAve,KAAA4B,KAAA6Z,MAAAE,OACAnX,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,aAKAnE,IAAAkP,QAAArJ,QACA1B,KAAAsc,UAAAvR,QAAArJ,aAEA7F,IAAAkP,QAAA8N,SACA7Y,KAAAqb,OAAAtQ,QAAA8N,UA9rBA,GAosBA,WACA,aA2BArd,KAAA4B,KAAAmhB,UAAA,SAAAxT,SAEA,IAAA3I,OACAzC,gBACAyY,uBAAA,2CACAoG,qBAAA,kDAIA,QAAA3iB,IAAAkP,QAAA+L,KACA,MAAA1U,MAAAzC,eAAA,uBAEA,QAAA9D,IAAAkP,QAAA0T,cACA,MAAArc,MAAAzC,eAAA,qBAGAnE,KAAAsC,OAAAtC,KAAAuE,SAAAC,MAGA,IAAA4L,KAAA5L,KAEAA,KAAA8W,KAAA/L,QAAA+L,KACA9W,KAAAye,cAAA1T,QAAA0T,cACAze,KAAAye,cAAAje,YAAAR,MAGAA,KAAA6a,IAAA,KAEArf,KAAA4B,KAAA2Z,cAAA/W,KAAA8W,KAAA9W,MAKAA,KAAAka,WAAA,WACA,IAAAC,SACAuE,OAAA9S,KAAAiP,KAEAN,UAAA/e,KAAA4B,KAAA2F,MAAAqU,yBAAAxL,KAAA4O,YAEA,OADAhf,KAAA6D,MAAA8a,QAAAI,WACAJ,SAOAna,KAAAwa,SAAA,WACA,OAAA5O,KAAA6S,cAAAjE,YAGAxa,KAAA2e,SAAA,WACA/S,KAAAiP,IAAAjP,KAAA6S,cAAAhE,gBACA7O,KAAAlL,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAE,cAAAkB,WAAAhX,QAQAA,KAAA4e,qBAAA,SAAAxhB,MACAwO,KAAA+S,YAMA3e,KAAA6e,2BAAA,SAAAzhB,MACAwO,KAAA+S,YAMA3e,KAAA8e,sBAAA,SAAA1hB,MACAwO,KAAA+S,YAIA/S,KAAAiP,IAAAjP,KAAA6S,cAAAhE,iBA3GA,GAgHA,WACA,aAwCAjf,KAAA4B,KAAA2hB,YAAA,SAAAhU,SACAvP,KAAAsC,OAAAtC,KAAA4B,KAAA8a,QAAAlY,MAAA+K,UAEA,IAAAa,KAAA5L,KAEAoC,OACAzC,gBACAqf,uBAAA,6CACAC,YAAA,wDACAC,iBAAA,wDAIA,GAAAlf,KAAApD,cAAApB,KAAA4B,KAAA2hB,YACA,MAAA3c,MAAAzC,eAAA,uBAGAK,KAAAqM,IAAA,UACAxQ,IAAAkP,QAAAsB,MACArM,KAAAqM,IAAAtB,QAAAsB,KAGArM,KAAAoL,QAAA5P,KAAA4B,KAAAgF,MAAAwU,iBACA/a,IAAAkP,QAAAK,UACApL,KAAAoL,QAAAL,QAAAK,SAGApL,KAAAmf,OAAA,OACAtjB,IAAAkP,QAAAoU,QACAnf,KAAAmf,MAAApU,QAAAoU,OAGAnf,KAAA0L,gBACA7P,IAAAkP,QAAAW,UACA1L,KAAA0L,QAAAX,QAAAW,SAGA1L,KAAAof,iBAAA,OACAvjB,IAAAkP,QAAAqU,kBACApf,KAAAof,gBAAArU,QAAAqU,iBAIApf,KAAAqf,SAAA,KACArf,KAAAsf,WAAA,KAIA,IAAAC,QAAA,WACA,IAAAC,YACAnT,IAAAT,KAAAS,IACAhB,QAAA,SAAAe,SAAAlD,WAAAC,QACA,IAAAyC,KAAAwT,iBACAxT,KAAAgO,SAEAhO,KAAA6T,YAAArT,SAAAlD,WAAAC,QAEAiC,QAAAQ,KAAAR,QACA+T,MAAAvT,KAAAuT,MACAzT,QAAAE,KAAAF,QACAJ,MAAAM,KAAA8T,SAEAC,YACAC,WAAApkB,KAAAS,IAAAsM,kBAIA,OAAAqD,KAAAyT,WACAG,WAAAH,SAAAzT,KAAAyT,UAEAzT,KAAA0T,WAAAnc,OAAAgJ,KAAAqT,aAQAxf,KAAA6f,cAAA,WACA,OAAA7f,KAAAsf,aACAtf,KAAAsf,WAAAQ,QACA9f,KAAAsf,WAAA,OAQAtf,KAAA+f,OAAA,WACA,OAAA/f,KAAAqM,KASArM,KAAAggB,SAAA,WACA,GAAA,OAAAhgB,KAAAqM,IACA,MAAAjK,MAAAzC,eAAA,iBAEAK,KAAA+Z,SAAAve,KAAA4B,KAAA6Z,MAAAC,SACAlX,KAAAU,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAI,cAAAkG,QAAAlc,OACAA,KAAA6f,gBACAN,WAWAvf,KAAAyf,YAAA,SAAArT,SAAAlD,WAAAC,SASAnJ,KAAAigB,OAAA,SAAAC,QACAlgB,KAAAqM,IAAA6T,QAUAlgB,KAAA0f,SAAA,SAAAvW,MAAAD,WAAAI,aACAsC,KAAAmO,SAAAve,KAAA4B,KAAA6Z,MAAAzM,OACAoB,KAAAlL,gBAAAlF,KAAA4B,KAAAgF,MAAAwT,OAAAO,WACA+F,QAAAtQ,KACAmB,QAAAvR,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAsf,aAAArT,KAAAS,IAAAlD,MAAAgX,OAAA7W,cACAH,MAAAA,MACAD,WAAAA,WACAI,YAAAA,gBAzLA,GAgMA,WACA,aAgBA9N,KAAA4B,KAAAgjB,YAAA,SAAArV,SACAvP,KAAAsC,OAAAtC,KAAA4B,KAAA2hB,YAAA/e,MAAA+K,UAEA,IAAAa,KAAA5L,KAEAA,KAAAqf,SAAA,OAEArf,KAAAjB,KAAA,UACAlD,IAAAkP,QAAAhM,OACAiB,KAAAjB,KAAAgM,QAAAhM,MAIAiB,KAAAqgB,QAAA,KAQArgB,KAAAsgB,WAAA,WACA,OAAAtgB,KAAAqgB,SAOArgB,KAAAugB,QAAA,WACA,OAAAvgB,KAAAjB,MAOAiB,KAAAwgB,YAAA,SAAA3b,MACA+G,KAAAgO,SACAhO,KAAA6T,YAAA5a,OAUA7E,KAAAyf,YAAA,SAAA5a,KAAAqE,WAAAC,OAEA,GADAyC,KAAAyU,QAAAxb,KACA,OAAA+G,KAAA7M,KACA6M,KAAAyP,OAAAxW,UAEA,CACA,IAAAgU,QAAArd,KAAAyD,eAAA4F,KAAA+G,KAAA7M,WACAlD,IAAAgd,SACAjN,KAAAyP,OAAAxC,WASA7Y,KAAAygB,QAAA,SAAA1hB,MACAiB,KAAAjB,KAAAA,OApFA,GA0FA,WACA,aAeAvD,KAAA4B,KAAAsjB,WAAA,SAAA3V,SACAvP,KAAAsC,OAAAtC,KAAA4B,KAAA2hB,YAAA/e,MAAA+K,UAEA,IAAAa,KAAA5L,KAEAA,KAAAqf,SAAA,MAEArf,KAAAjB,KAAA,SACAlD,IAAAkP,QAAAhM,OACAiB,KAAAjB,KAAAgM,QAAAhM,MAIAiB,KAAA2gB,OAAA,KAQA3gB,KAAA4gB,UAAA,WACA,OAAA5gB,KAAA2gB,QAOA3gB,KAAAugB,QAAA,WACA,OAAAvgB,KAAAjB,MAOAiB,KAAA6gB,WAAA,SAAAnlB,MACAkQ,KAAAgO,SACAhO,KAAA6T,YAAA/jB,OAUAsE,KAAAyf,YAAA,SAAAqB,OAAA5X,WAAAC,OACAyC,KAAA+U,OAAAG,OAGA,IAAA,IAFAC,MAAAvlB,KAAAS,IAAAuL,cAAAsZ,OAAAlV,KAAA7M,MACA8Z,WACA/c,EAAA,EAAAA,EAAAilB,MAAAhlB,OAAAD,IACA+c,QAAA9b,KAAAvB,KAAAS,IAAAkB,WAAA4jB,MAAAjlB,KAEA8P,KAAAyP,OAAAxC,UAQA7Y,KAAAygB,QAAA,SAAA1hB,MACAiB,KAAAjB,KAAAA,OAjFA,GA+FA,WACA,aAQAvD,KAAA4B,KAAA4jB,YAAA,SAAAjW,SACAvP,KAAAsC,OAAAtC,KAAA4B,KAAA2hB,YAAA/e,MAAA+K,UAEA,IAAAa,KAAA5L,KAEAA,KAAAqf,SAAA,OAGArf,KAAA2gB,OAAA,KAGA3gB,KAAAihB,iBAAA,QAAA,OAAA,cAAA,WAAA,YAAA,iBAAA,YAAA,UAAA,gBAAA,WAAA,YAAA,OAAA,QAAA,MAAA,QAAA,YAAA,YAAA,YAGAjhB,KAAAkhB,cAAA,QAAA,OAAA,cAAA,SAAA,WAAA,WAAA,YAAA,OAAA,UAAA,UAGAlhB,KAAAmhB,eAOA,IAAAC,WAAA,SAAA7c,MAEA,IAAA,IADA8c,OACAvlB,EAAA,EAAAA,EAAA8P,KAAAsV,aAAAnlB,OAAAD,IACAulB,IAAAzV,KAAAsV,aAAAplB,IAAAqH,OAAAoB,MAAAH,KAAAwH,KAAAsV,aAAAplB,IAAAwlB,OAEA,OAAAD,KAOAE,eAAA,SAAAC,UACA,IAAA,IAAA1lB,EAAA,EAAAA,EAAA8P,KAAAqV,gBAAAllB,OAAAD,IACA8P,KAAAuV,YAAAvV,KAAAqV,gBAAAnlB,IAAA0lB,SAAApd,KAAA,IAAAwH,KAAAqV,gBAAAnlB,IAAAwlB,QAUAthB,KAAAka,WAAA,WACA,IAAAC,SACAsH,MAAA7V,KAAAuF,SACAkJ,YAAAzO,KAAA0O,mBAEAC,UAAA/e,KAAA4B,KAAA2F,MAAAqU,yBAAAxL,KAAA4O,YAGA,OAFAhf,KAAA6D,MAAA8a,QAAAI,WACA/e,KAAA6D,MAAA8a,QAAAvO,KAAAuV,aACAhH,SAOAna,KAAA4gB,UAAA,WACA,OAAA5gB,KAAA2gB,QAOA3gB,KAAA6gB,WAAA,SAAArY,QACAoD,KAAAgO,SACAhO,KAAA6T,YAAAjX,SAUAxI,KAAAyf,YAAA,SAAAjX,OAAAU,WAAAC,OACAyC,KAAA+U,OAAAnY,OACA,IAAAkZ,KAAAve,OAAAA,OAAAwe,SAAAnZ,SACAiZ,SAEAC,KAAAtd,KAAA,QAAAC,KAAA,SAAAC,MAAAtD,SACAygB,MAAA1kB,KAAAqkB,WAAAje,OAAAnD,UAEAuhB,eAAAG,KAAAtd,KAAA,YAEAwH,KAAAyP,OAAAoG,SAKAjmB,KAAA4B,KAAA4jB,YAAAnjB,QAAA,QA3GA,GA8GA,WACA,aAkBArC,KAAA4B,KAAAwkB,iBAAA,SAAA7W,SAEA,IAAA3I,OACAzC,gBACAkiB,kBAAA,kEACAC,YAAA,wDACAC,mBAAA,kEAIA,QAAAlmB,IAAAkP,QAAA0T,cACA,MAAArc,MAAAzC,eAAA,kBAGA,QAAA9D,IAAAkP,QAAAsB,IACA,MAAAjK,MAAAzC,eAAA,YAGAnE,KAAAsC,OAAAtC,KAAA4B,KAAAgjB,YAAApgB,MAAA+K,UAGA,IAAAa,KAAA5L,KAGAA,KAAAye,cAAA1T,QAAA0T,cACAze,KAAAye,cAAAje,YAAAR,MACAA,KAAAqM,IAAA,KACArM,KAAAgiB,WAAAjX,QAAAsB,IAKArM,KAAAiiB,UAAA,SAAApH,KACA,IAAAqH,QAAA1mB,KAAA+H,OAAAwC,SAAA6F,KAAAoW,WAAAnH,KACA,GAAAqH,UAAAtW,KAAAoW,WACA,MAAAxmB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAoiB,oBAAAG,UAEAtW,KAAAqU,OAAAiC,SACAtW,KAAAoU,YAQAhgB,KAAA6e,2BAAA,SAAAzhB,MACA,OAAAA,KAAA6e,WACArQ,KAAAqW,UAAA7kB,KAAA6e,YAGArQ,KAAAgO,WAtEA,GA8EA,WACA,aAkBApe,KAAA4B,KAAA+kB,gBAAA,SAAApX,SAEA,IAAA3I,OACAzC,gBACAkiB,kBAAA,iEACAC,YAAA,uDACAC,mBAAA,iEAIA,QAAAlmB,IAAAkP,QAAA0T,cACA,MAAArc,MAAAzC,eAAA,kBAGA,QAAA9D,IAAAkP,QAAAsB,IACA,MAAAjK,MAAAzC,eAAA,YAGAnE,KAAAsC,OAAAtC,KAAA4B,KAAAsjB,WAAA1gB,MAAA+K,UAGA,IAAAa,KAAA5L,KAGAA,KAAAye,cAAA1T,QAAA0T,cACAze,KAAAye,cAAAje,YAAAR,MACAA,KAAAqM,IAAA,KACArM,KAAAgiB,WAAAjX,QAAAsB,IAKArM,KAAAiiB,UAAA,SAAApH,KACA,IAAAqH,QAAA1mB,KAAA+H,OAAAwC,SAAA6F,KAAAoW,WAAAnH,KACA,GAAAqH,UAAAtW,KAAAoW,WACA,MAAAxmB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAoiB,oBAAAG,UAEAtW,KAAAqU,OAAAiC,SACAtW,KAAAoU,YAQAhgB,KAAA6e,2BAAA,SAAAzhB,MACA,OAAAA,KAAA6e,WACArQ,KAAAqW,UAAA7kB,KAAA6e,YAGArQ,KAAAgO,WAtEA,GA8EA,WACA,aAEApe,KAAA8B,UAAA,oBAEA9B,KAAA4B,KAAAglB,OAAAhgB,OACA6H,mBACAoY,iBAAA,kCACAC,OAAA,kBACAC,YAAA,uBACAC,YAAA,8BACAC,OAAA,yBACAC,iBAAA,yBAEAC,oBAAA,8BACAC,gBACA,iCACA,mCACA,sCACA,gCAEAjjB,gBACAkjB,8BAAA,2EACAC,oBAAA,gCACAC,6BAAA,6EAEAnN,QACAoN,gBAAA,kBAEAC,WACAX,OAAA,8BAaA,IAAAtX,QACAkY,cAAA,GAQA1nB,KAAA4B,KAAAglB,OAAAe,MAAA,SAAApY,SAEA,OADAvP,KAAA6D,MAAA2L,OAAAD,SACAC,QASAxP,KAAA4B,KAAAglB,OAAAgB,qBAAA,SAAA1nB,MACA,OAAAA,KAAA0B,KAAA5B,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAyY,mBAQAlnB,KAAA4B,KAAAglB,OAAAhT,KAAA,SAAA1T,MACA,IAAA2nB,aAAA3nB,KAAAM,KAAAR,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAoY,kBACA,QAAAxmB,IAAAwnB,aACA,MAAA7nB,KAAA4B,KAAAglB,OAAAhgB,MAAAzC,eAAA,8BAGA,GAAA,OADAnE,KAAA4B,KAAAyZ,cAAAwM,cAEA,MAAA7nB,KAAA+H,OAAAkC,OAAAjK,KAAA4B,KAAAglB,OAAAhgB,MAAAzC,eAAAmjB,qBAAAO,eAEA,IAAAC,WAAA5nB,KAAAM,KAAAR,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAsY,kBACA1mB,IAAAynB,aACAA,WAAA9nB,KAAA4B,KAAAglB,OAAAhgB,MAAAugB,qBAEA,IAAAY,YAAA/nB,KAAAsD,eAAAwkB,YACA,QAAAznB,IAAA0nB,YACA,MAAA/nB,KAAA+H,OAAAkC,OAAAjK,KAAA4B,KAAAglB,OAAAhgB,MAAAzC,eAAAojB,8BAAAO,aAEA,IAAAC,aAAA7nB,KAAAA,QAOAF,KAAA4B,KAAAglB,OAAAoB,YAAA,SAAAhiB,eACA3F,IAAA2F,WACAA,SAAA2B,OAAA,SAEA3B,SAAA4C,KAAA5I,KAAA4B,KAAAglB,OAAAhgB,MAAA6gB,UAAAX,QAAAje,KAAA,SAAAC,MAAAC,MACA/I,KAAA4B,KAAAglB,OAAAhT,KAAAjM,OAAAoB,UAIA/I,KAAA8B,UAAA,0BAcA9B,KAAA4B,KAAAglB,OAAArf,MAAA0gB,0BAAA,SAAArB,QACA,OACA1mB,KAAA0mB,OAAApX,OAAAtP,KACAgoB,GAAAtB,OAAApL,aAIA7T,OAAAnB,UAAA0K,MAAA,YAEA,IAAA1B,OAAAkY,cACA1nB,KAAA4B,KAAAglB,OAAAoB,gBAjIA,GAsIA,WACA,aAwBAhoB,KAAA4B,KAAAglB,OAAAuB,KAAA,SAAA5Y,SAaA,GAXAvP,KAAAsC,OAAAtC,KAAAuE,SAAAC,MAEAA,KAAAoC,OACAzC,gBACAikB,cAAA,wDACAC,aAAA,qDAKA9Y,QAAArP,KAAAyH,OAAA4H,QAAArP,MACA,IAAAqP,QAAArP,KAAAK,OACA,MAAAiE,KAAAoC,MAAAzC,eAAA,aAGAK,KAAAgL,QACAtP,KAAA,KAEAooB,OAAA/Y,QAAArP,KAAAM,KAAAR,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAoY,mBAAA,KACA0B,WAAAhZ,QAAArP,KAAAM,KAAAR,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAuY,cAAA,KAEAwB,OAAAjZ,QAAAiZ,QAAA,KACAN,GAAA,MAEAloB,KAAA6D,MAAAW,KAAAgL,OAAAD,SACA,IAAAa,KAAA5L,KAYA,GATAA,KAAAgX,WAAA,KACA,OAAAhX,KAAAgL,OAAA0Y,GAEA1jB,KAAAgX,WAAAhX,KAAAgL,OAAA0Y,GAIA1jB,KAAAgX,WAAAxb,KAAA4B,KAAAyZ,cAAA7W,KAAAgL,OAAA8Y,QAEA,OAAA9jB,KAAAgX,WACA,MAAAxb,KAAA+H,OAAAkC,OAAAjK,KAAA4B,KAAAglB,OAAAhgB,MAAAzC,eAAAmjB,qBAAA9iB,KAAAgL,OAAAiZ,OAEAjkB,KAAAgX,WAAAxW,YAAAR,MAGAA,KAAAgkB,OAAAxoB,KAAA4B,KAAAglB,OAAAhgB,MAAAwgB,eAEA,IAAAsB,WAAAlkB,KAAAgL,OAAAtP,KAAAM,KAAAR,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAwY,aACA5mB,IAAAqoB,aACAlkB,KAAAgkB,OAAAhkB,KAAAgkB,OAAAG,OAAAD,WAAAxmB,MAAA,OAEA,OAAAsC,KAAAgL,OAAAgZ,SACAhkB,KAAAgkB,OAAAhkB,KAAAgkB,OAAAG,OAAAnkB,KAAAgL,OAAAgZ,SAIAhkB,KAAAgL,OAAAtP,KAAA0B,KAAA5B,KAAA4B,KAAAglB,OAAAhgB,MAAA6H,kBAAAyY,iBAAA1iB,MAEAA,KAAAokB,YAAA,WAKA,IAAA,IAJAC,WACA3oB,KAAAsE,KAAAgL,OAAAtP,KACAsb,WAAAhX,KAAAgX,YAEAlb,EAAA,EAAAA,EAAAkE,KAAAgkB,OAAAjoB,OAAAD,IAAA,CACA,IAAAkC,KAAAxC,KAAAsD,eAAAkB,KAAAgkB,OAAAloB,IACA,QAAAD,IAAAmC,KAIA,MAAAxC,KAAA+H,OAAAkC,OAAAzF,KAAAoC,MAAAzC,eAAAikB,eAAA5jB,KAAAgkB,OAAAloB,KAHAkC,KAAAqmB,aAYArkB,KAAAskB,OAAA,WAEA,IAAAC,KAAA/oB,KAAA4B,KAAAglB,OAAArf,MAAA0gB,0BAAAzjB,MACAA,KAAAU,gBAAAlF,KAAA4B,KAAAglB,OAAAhgB,MAAAwT,OAAAoN,gBAAAuB,OAQAvkB,KAAA6e,2BAAA,SAAAzhB,MACAwO,KAAAwY,eAMApkB,KAAA4e,qBAAA,SAAAxhB,MACAwO,KAAA0Y,UAMAtkB,KAAA8e,sBAAA,SAAA1hB,MACAwO,KAAA0Y,WAjIA,GAuIA,WACA,aAUA9oB,KAAA4B,KAAAglB,OAAAoC,WAAA,SAAAzZ,SAEAvP,KAAAsC,OAAAtC,KAAA4B,KAAAglB,OAAAuB,KAAA3jB,MAAA+K,UACA,IAAAa,KAAA5L,KAGA4L,KAAAxJ,MAAAqiB,2BACAC,mBAAA,4BACAC,sBAAA,iGACAC,sBAAA,8GAGA5kB,KAAA6kB,SAAA,GA0CA7kB,KAAA8kB,aAAA,WACA,OAAA9kB,KAAA6kB,SAAA7kB,KAAAgX,WAAAkD,eAOAla,KAAAskB,OAAA,WAEA,GAAA,KAAAtkB,KAAA6kB,SAAA,CACA7kB,KAAAgL,OAAAtP,KAAAoL,KAAA9G,KAAA8kB,gBACA9kB,KAAAokB,cACA,IAAAG,KAAA/oB,KAAA4B,KAAAglB,OAAArf,MAAA0gB,0BAAAzjB,MACAA,KAAAU,gBAAAlF,KAAA4B,KAAAglB,OAAAhgB,MAAAwT,OAAAoN,gBAAAuB,QAlDA,SAAA7oB,MAEA,GAAA,OAAAkQ,KAAAZ,OAAA+Y,WACAnY,KAAAiZ,SAAAL,WAAAO,QAAArpB,KAAAoL,YAEA,CACA,IAAAke,aAAA7hB,OAAA,IAAAyI,KAAAZ,OAAA+Y,YACA,GAAA,IAAAiB,aAAAjpB,OACA,MAAAP,KAAA+H,OAAAkC,OAAAmG,KAAAxJ,MAAAqiB,0BAAAG,uBAAAhZ,KAAAZ,OAAA+Y,aAEA,IAAAkB,YAAAD,aAAAhpB,KAAA,OACA,QAAAH,IAAAopB,YAEArZ,KAAAiZ,SAAAL,WAAAO,QAAAC,aAAAle,YAEA,CAEA,IAAA0Y,YACAnT,IAAA4Y,YACA5F,SAAA,OACAhU,QAAA,SAAAe,SAAAlD,WAAAC,OACAyC,KAAAiZ,SAAAL,WAAAO,QAAA3Y,UACAR,KAAA0Y,UAEAhZ,MAAA,SAAAnC,MAAAD,WAAAI,aACA,MAAA9N,KAAA+H,OAAAkC,OAAAmG,KAAAxJ,MAAAqiB,0BAAAE,uBAAAM,gBAGA9hB,OAAAgJ,KAAAqT,cA2BA0F,CAAAllB,KAAAgL,OAAAtP,OApFA,GAyFA,WACA,aAEAF,KAAA8B,UAAA,2BASA,IAAA8E,OACA6H,mBACAkb,OAAA,yBACAC,WAAA,2BACAC,cAAA,8BACAC,KAAA,wBAEArC,WACAkC,OAAA,4BACAC,WAAA,8BACAC,cAAA,iCACAC,KAAA,4BAQA9pB,KAAA4B,KAAAglB,OAAA4B,OAAA7S,OAAA,SAAApG,SACA,IAAAgW,MAAAhW,QAAArP,KAAA0I,KAAAhC,MAAA6gB,UAAAkC,QACA,GAAApE,MAAAhlB,OAAA,EAAA,CACA,QAAAF,IAAAkP,QAAAiM,WAAA4D,mBAEA,OAEA,IAAA3T,SAAA8Z,MAAA/kB,KAAAoG,MAAA6H,kBAAAkb,QAEApE,MAAA5T,YAAAlG,UAEA,IAAA3C,MAAA,GAEA,IAAAyG,QAAAiM,WAAA4D,qBAEAmG,MAAA5T,YAAAlG,WAGA3C,MAAAyG,QAAAiM,WAAA4D,qBAEAzX,OAAA4d,MAAAwE,IAAAjhB,QAAA6C,SAAAF,WAIA8Z,MAAA1c,KAAA,SAAAC,MAAAC,MACA,IAAAihB,MAAAriB,OAAAoB,MACAihB,MAAAC,MAAA,SAAA/b,OACAA,MAAAC,iBACAoX,MAAA5T,YAAAlG,UACAue,MAAAre,SAAAF,gBAUAzL,KAAA4B,KAAAglB,OAAA4B,OAAA0B,SAAA,SAAA3a,SACAA,QAAArP,KAAA0I,KAAAhC,MAAA6gB,UAAAmC,YAAA/gB,KAAA,SAAAC,MAAAC,MACA,IAAAihB,MAAAriB,OAAAoB,MACAihB,MAAAC,MAAA,SAAA/b,OACAA,MAAAC,iBACA,IAAAoR,MAAAyK,MAAAxpB,KAAAoG,MAAA6H,kBAAAmb,YACAra,QAAAiM,WAAAyE,gBAAAV,YASAvf,KAAA4B,KAAAglB,OAAA4B,OAAA2B,YAAA,SAAA5a,SACAA,QAAArP,KAAA0I,KAAAhC,MAAA6gB,UAAAoC,eAAAhhB,KAAA,SAAAC,MAAAC,MACA,IAAAihB,MAAAriB,OAAAoB,MACAihB,MAAAC,MAAA,SAAA/b,OACAA,MAAAC,iBACA,IAAAic,SAAAja,SAAA6Z,MAAAxpB,KAAAoG,MAAA6H,kBAAAob,eAAA,IACAta,QAAAiM,WAAAqF,mBAAAuJ,eASApqB,KAAA4B,KAAAglB,OAAA4B,OAAAtH,KAAA,SAAA3R,SACAA,QAAArP,KAAA0I,KAAAhC,MAAA6gB,UAAAqC,MAAAjhB,KAAA,SAAAC,MAAAC,MACA,IAAAihB,MAAAriB,OAAAoB,MACAihB,MAAAC,MAAA,SAAA/b,OACAA,MAAAC,iBACA,IAAAkc,QAAAL,MAAAxpB,KAAAoG,MAAA6H,kBAAAqb,MACAva,QAAAiM,WAAA0F,KAAAmJ,cA1GA,GAgHA,WACA,aAEArqB,KAAA8B,UAAA,kBAMA9B,KAAA4B,KAAAsf,KAAAE,OACAwB,IAAA,YACAC,KAAA,aACAxB,IAAA,UAGA,IAAAza,OACAzC,gBACAmmB,sBAAA,2CACAC,uBAAA,+CASAvqB,KAAA4B,KAAAsf,KAAAI,iBAAA,SAAAH,WACA,IAAA,IAAA1E,OAAAzc,KAAA4B,KAAAsf,KAAAE,MACA,GAAAphB,KAAA4B,KAAAsf,KAAAE,MAAA3E,OAAA0E,UACA,OAAA,EAGA,OAAA,GASAnhB,KAAA4B,KAAAsf,KAAAe,gBAAA,SAAA4B,SAAA1C,WACA,QAAA9gB,IAAAL,KAAA4B,KAAAsf,KAAA2C,UACA,MAAA7jB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAmmB,uBAAAzG,WAEA,QAAAxjB,IAAAL,KAAA4B,KAAAsf,KAAA2C,UAAA1C,WACA,MAAAnhB,KAAA+H,OAAAkC,OAAArD,MAAAzC,eAAAomB,wBAAApJ,YAEA,OAAAnhB,KAAA4B,KAAAsf,KAAA2C,UAAA1C,YAQAnhB,KAAA8B,UAAA,uBAEA9B,KAAA4B,KAAAsf,KAAAsJ,KAAAC,UAAA,SAAA5iB,MACA,OAAA,SAAA4a,EAAAC,GACA,IAAAgI,GAAA1qB,KAAAyD,eAAAgf,EAAA5a,MACA8iB,GAAA3qB,KAAAyD,eAAAif,EAAA7a,MAGA,OAFA6iB,GAAAA,GAAA,IAAAtR,KAAAsR,IAAA,EACAC,GAAAA,GAAA,IAAAvR,KAAAuR,IAAA,EACAD,GAAAC,KAIA3qB,KAAA4B,KAAAsf,KAAAsJ,KAAAI,WAAA,SAAA/iB,MACA,OAAA,SAAA4a,EAAAC,GACA,IAAAgI,GAAA1qB,KAAAyD,eAAAgf,EAAA5a,MACA8iB,GAAA3qB,KAAAyD,eAAAif,EAAA7a,MAGA,OAFA6iB,GAAAA,GAAA,IAAAtR,KAAAsR,IAAA,GACAC,GAAAA,GAAA,IAAAvR,KAAAuR,IAAA,GACAD,KAIA1qB,KAAA8B,UAAA,yBAEA9B,KAAA4B,KAAAsf,KAAArJ,OAAA4S,UAAA,SAAA5iB,MACA,OAAA,SAAA4a,EAAAC,GAGA,OAFAD,EAAAziB,KAAAyD,eAAAgf,EAAA5a,MACA6a,EAAA1iB,KAAAyD,eAAAif,EAAA7a,WACAxH,IAAAoiB,QAAApiB,IAAAqiB,EACAD,IAAAC,EAAA,EAAAD,EAAA,GAAA,EAEAA,EAAAC,IAIA1iB,KAAA4B,KAAAsf,KAAArJ,OAAA+S,WAAA,SAAA/iB,MACA,OAAA,SAAA4a,EAAAC,GAGA,OAFAD,EAAAziB,KAAAyD,eAAAgf,EAAA5a,MACA6a,EAAA1iB,KAAAyD,eAAAif,EAAA7a,WACAxH,IAAAoiB,QAAApiB,IAAAqiB,EACAD,IAAAC,EAAA,EAAAD,GAAA,EAAA,EAEAC,EAAAD,IAIAziB,KAAA8B,UAAA,yBAEA9B,KAAA4B,KAAAsf,KAAAnZ,OAAA0iB,UAAA,SAAA5iB,MACA,OAAA,SAAA4a,EAAAC,GAGA,GAFAD,EAAAziB,KAAAyD,eAAAgf,EAAA5a,MACA6a,EAAA1iB,KAAAyD,eAAAif,EAAA7a,WACAxH,IAAAoiB,QAAApiB,IAAAqiB,EACA,OAAAD,IAAAC,EAAA,EAAAD,EAAA,GAAA,EAQA,IAAA,IANAoI,GAAApI,EAAAzf,WACA8nB,GAAApI,EAAA1f,WACA+nB,QAAAF,GAAAnlB,cACAslB,QAAAF,GAAAplB,cACAulB,OAAAJ,GAAAtqB,OAAAuqB,GAAAvqB,OAAAuqB,GAAAvqB,OAAAsqB,GAAAtqB,OAEAD,EAAA,EAAAA,EAAA2qB,OAAA3qB,IAAA,CACA,IAAA4qB,WAAAH,QAAAlmB,OAAAvE,GACA6qB,WAAAH,QAAAnmB,OAAAvE,GACA8qB,MAAAP,GAAAhmB,OAAAvE,GACA+qB,MAAAP,GAAAjmB,OAAAvE,GACA,GAAA4qB,WAAAC,WACA,OAAA,EAEA,GAAAD,WAAAC,WACA,OAAA,EAEA,GAAAC,MAAAC,MACA,OAAA,EAEA,GAAAD,MAAAC,MACA,OAAA,EAGA,OAAAR,GAAAtqB,SAAAuqB,GAAAvqB,OACA,EAEAsqB,GAAAtqB,OAAAuqB,GAAAvqB,OACA,GAEA,IAIAP,KAAA4B,KAAAsf,KAAAnZ,OAAA6iB,WAAA,SAAA/iB,MACA,OAAA,SAAA4a,EAAAC,GAGA,GAFAD,EAAAziB,KAAAyD,eAAAgf,EAAA5a,MACA6a,EAAA1iB,KAAAyD,eAAAif,EAAA7a,WACAxH,IAAAoiB,QAAApiB,IAAAqiB,EACA,OAAAD,IAAAC,EAAA,EAAAD,GAAA,EAAA,EAOA,IAAA,IALAoI,GAAApI,EAAAzf,WACA8nB,GAAApI,EAAA1f,WACA+nB,QAAAF,GAAAnlB,cACAslB,QAAAF,GAAAplB,cACAulB,OAAAJ,GAAAtqB,OAAAuqB,GAAAvqB,OAAAuqB,GAAAvqB,OAAAsqB,GAAAtqB,OACAD,EAAA,EAAAA,EAAA2qB,OAAA3qB,IAAA,CACA,IAAA4qB,WAAAH,QAAAlmB,OAAAvE,GACA6qB,WAAAH,QAAAnmB,OAAAvE,GACA8qB,MAAAP,GAAAhmB,OAAAvE,GACA+qB,MAAAP,GAAAjmB,OAAAvE,GACA,GAAA4qB,WAAAC,WACA,OAAA,EAEA,GAAAD,WAAAC,WACA,OAAA,EAEA,GAAAC,MAAAC,MACA,OAAA,EAEA,GAAAD,MAAAC,MACA,OAAA,EAGA,OAAAR,GAAAtqB,SAAAuqB,GAAAvqB,OACA,EAEAsqB,GAAAtqB,OAAAuqB,GAAAvqB,QACA,EAEA,IAtLA,GA2LA,WACA,aAEAP,KAAA8B,UAAA,qBAmBA9B,KAAA4B,KAAA0pB,QAAAC,SAAA,SAAAhc,SAEA/K,KAAAoC,OACAzC,gBACAqnB,0BAAA,4DACAC,sBAAA,0DAIAjnB,KAAAgL,QAEAkR,aAAArgB,EACAqrB,UAAA,GACA7a,SAAAxQ,GAEAL,KAAA6D,MAAAW,KAAAgL,OAAAD,SAGA,IAAAa,KAAA5L,KAEA,QAAAnE,IAAAmE,KAAAgL,OAAAkR,QACA,MAAAlc,KAAAoC,MAAAzC,eAAA,0BAEA,QAAA9D,IAAAmE,KAAAgL,OAAAqB,IACA,MAAArM,KAAAoC,MAAAzC,eAAA,sBAGA,IAAAwnB,WAAA,EACAnnB,KAAAgL,OAAAkR,QAAA1b,YAAAR,MAEAA,KAAAonB,YAAA,WACA,IAAAC,WAAArnB,KAAAgL,OAAAkR,QAAAoE,aAKA,MAHA,KAAAtgB,KAAAgL,OAAAkc,YACAG,WAAA7rB,KAAAyD,eAAAooB,WAAArnB,KAAAgL,OAAAkc,YAEA1rB,KAAA+H,OAAAwC,SAAA/F,KAAAgL,OAAAqB,IAAAgb,aAMArnB,KAAAsnB,QAAA,aAMAtnB,KAAAunB,OAAA,aAGAvnB,KAAAwnB,MAAA,WACA,IAAAtH,OAAAlgB,KAAAonB,cACAlH,SAAAlgB,KAAAgL,OAAAqB,KACArM,KAAAgL,OAAAkR,QAAA+D,OAAAC,QACAlgB,KAAAgL,OAAAkR,QAAA8D,YAGAhgB,KAAAsnB,WAIAtnB,KAAAmnB,UAAA,WACA,OAAAA,WAGAnnB,KAAAynB,YAAA,WACAznB,KAAAgL,OAAAkR,QAAA1B,aAAAhf,KAAA4B,KAAA6Z,MAAAE,OACAgQ,WAAA,EACAnnB,KAAAunB,WAGAJ,WAAA,EACAnnB,KAAAsnB,YAOAtnB,KAAA8e,sBAAA,SAAA1hB,MACAwO,KAAA6b,eAIAznB,KAAAynB,eAoBAjsB,KAAA4B,KAAA0pB,QAAAY,eAAA,SAAA3c,SACA/K,KAAAgL,QAEAkR,aAAArgB,EACAqrB,UAAA,GACA7a,SAAAxQ,EAEA8rB,YAAA9rB,EACA+rB,cAAA,YAEApsB,KAAA6D,MAAAW,KAAAgL,OAAAD,SACAvP,KAAAsC,OAAAtC,KAAA4B,KAAA0pB,QAAAC,SAAA/mB,MAAAA,KAAAgL,SAGA,IAAAY,KAAA5L,KASA,GANA4L,KAAAxJ,MAAAylB,uBACAC,eAAA,oEAIA9nB,KAAAgL,OAAA2c,OAAAxkB,OAAAnD,KAAAgL,OAAA2c,QACA,IAAA3nB,KAAAgL,OAAA2c,OAAA5rB,OACA,MAAAiE,KAAAoC,MAAAylB,sBAAA,eAGA7nB,KAAA+nB,aAAA,WACA5kB,OAAAyI,KAAAZ,OAAA2c,QAAAK,GAAA,QAAA,SAAAte,OACAA,MAAAC,kBACA,IAAAiC,KAAAub,aACAvb,KAAA4b,WAKAxnB,KAAAsnB,QAAA,WACAtnB,KAAAgL,OAAA2c,OAAAxgB,SAAAnH,KAAAgL,OAAA4c,gBAGA5nB,KAAAunB,OAAA,WACAvnB,KAAAgL,OAAA2c,OAAAxa,YAAAnN,KAAAgL,OAAA4c,gBAIA5nB,KAAA+nB,gBAmBAvsB,KAAA4B,KAAA0pB,QAAAmB,kBAAA,SAAAld,SAEA/K,KAAAgL,QAEAkR,aAAArgB,EACAqrB,UAAA,GACA7a,SAAAxQ,EAEAH,UAAAG,GAEAL,KAAA6D,MAAAW,KAAAgL,OAAAD,SACAvP,KAAAsC,OAAAtC,KAAA4B,KAAA0pB,QAAAC,SAAA/mB,MAAAA,KAAAgL,SAEA,IAAAY,KAAA5L,KAEAkoB,YAAA,OACArsB,IAAAmE,KAAAgL,OAAAtP,OACAwsB,YAAA,EACAloB,KAAAgL,OAAAtP,KAAAyH,OAAAnB,WAGAhC,KAAA+nB,aAAA,WACA,IAAAI,WAAAvc,KAAAZ,OAAAtP,KAEAyH,OAAAglB,YAAAC,OAAA,WACA,IAAAC,kBAAA,GACA,IAAAH,WAEA/kB,OAAAglB,YAAAG,cAAAnlB,OAAAglB,YAAAI,SAAAplB,OAAAxF,QAAA4qB,WACAF,kBAAA,GAKAllB,OAAAglB,YAAAG,aAAAH,WAAA,GAAAK,aAAAL,WAAAI,WACAF,kBAAA,IAGA,IAAAA,mBAAA,IAAAzc,KAAAub,aACAvb,KAAA4b,WAOAxnB,KAAA+nB,gBA7OA","file":"luga.min.js","sourcesContent":["/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.6dev\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {array}    args      An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is an array. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isArray = function(obj){\r\n\t\treturn Array.isArray(obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a function. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isFunction = function(obj){\r\n\t\treturn luga.type(obj) === \"function\";\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {string} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {object} target  An object that will receive the new properties\r\n\t * @param {object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\ttarget[x] = source[x];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  {object} observer  Observer object\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, data){\r\n\t\t\tif(luga.type(data) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && luga.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element, i, collection){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @returns {string}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {Node}         rootNode    Start node. Required\r\n\t * @param {function}     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {object}              A JavaScript object containing name/value pairs\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Deprecated. Use luga.form.toMap() instead\r\n\t * @deprecated\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\t\treturn luga.form.toMap(rootNode, demoronize);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jquery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toMap(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {string}               A URI encoded string\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}  name       Name of the field. Mandatory\r\n\t * @param {jquery}  rootNode   Root node, optional, default to document\r\n\t * @returns {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @returns {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {string} root    Top-level key inside localStorage\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path);\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {string} root    Top-level key inside localStorage\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @param {string} value   String to be persisted\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tvar json = getRootState(root);\r\n\t\tluga.setProperty(json, path, value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tvar setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tvar getRootState = function(root){\r\n\t\tvar rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @returns {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(luga.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {string} str  The querystring\r\n\t * @returns {object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param   {string} str   String containing placeholders\r\n\t * @param   {object} obj   An objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XML */\r\n\r\n\tluga.namespace(\"luga.xml\");\r\n\r\n\tluga.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {string} path\r\n\t * @returns {Array<Node>}\r\n\t */\r\n\tluga.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @returns {object}\r\n\t */\r\n\tluga.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @returns {string}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @returns {string}\r\n\t */\r\n\tluga.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.xml.MIME_TYPE);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {string} xmlStr\r\n\t * @returns {Document}\r\n\t */\r\n\tluga.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jquery}       formNode  jQuery object wrapping the form\r\n\t * @param {jquery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\",\r\n\t\t\tHEADERS: \"data-lugajax-headers\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jquery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {string} method       HTTP method to be used. Default to GET\r\n\t * @property {number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {string} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {string} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {string} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {string} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {string} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {string} after        Name of the function to be invoked after the form is send. Default to null\r\n\t * @property {object} headers      A set of name/value pairs to be used as custom HTTP headers. Available only with JavaScript API\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null,\r\n\t\t\theaders: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toJson(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t * @param {jquery|undefined} rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.ajaxform.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t * @param {jquery|undefined} rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/*! \r\nLuga Data 0.9.5 2016-10-05T14:00:18.004Z\r\nCopyright 2013-2016 Massimo Foti (massimo@massimocorner.com)\r\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\r\n */\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} uuid\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.STATE\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {boolean}          isStateLoading\r\n\t * @property {boolean}          isStateError\r\n\t * @property {boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throws {Exception}\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      filter. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @returns {array.<luga.data.DataSet.row>}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.isFunction(filter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FORMATTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      updater. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.isFunction(formatter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {string}  state\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {number}                         recordCount\r\n\t * @property {array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}                uuid       Unique identifier. Required\r\n\t * @property {array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} filter   A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @returns {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @returns {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(luga.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} filter   An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @returns {array.<luga.data.DataSet.row>}\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  New index. Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fires stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fires preDataSorted\r\n\t\t * @fires dataSorted\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter.  Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater. Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string}    url              URL to be fetched. Default to null\r\n\t * @property {number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = {};\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError,\r\n\t\t\t\t// Need to override jQuery's XML converter\r\n\t\t\t\tconverters: {\r\n\t\t\t\t\t\"text xml\": luga.xml.parseFromString\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         JSON data. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @returns {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {Node} Node\r\n\t\t */\r\n\t\tthis.loadRawXml = function(node){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(node);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {Node}     xmlDoc       XML data. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlDoc, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {string} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n/**\r\n * @typedef {object} luga.data.DataSet.context\r\n * @extends luga.data.stateDescription\r\n *\r\n * @property {number}                         recordCount\r\n * @property {array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"text\";\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given\r\n\t\t * @param {jquery} item  A jQuery wrapper around an <item>\r\n\t\t * @returns {object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\trec[self.itemElements[i]] = jQuery(item).find(self.itemElements[i]).text();\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {jquery} $channel A jQuery wrapper around the <channel> tag\r\n\t\t */\r\n\t\tvar setChannelMeta = function($channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tself.channelMeta[self.channelElements[i]] = $channel.find(\">\" + self.channelElements[i]).text();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML document\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {string} xmlStr  XML document as string\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(xmlStr);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call\r\n\t\t * @param {string}   xmlStr       XML document as string. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlStr, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlStr;\r\n\t\t\tvar $xml = jQuery(jQuery.parseXML(xmlStr));\r\n\t\t\tvar items = [];\r\n\t\t\t// Collect data from each <item>\r\n\t\t\t$xml.find(\"item\").each(function(index, element){\r\n\t\t\t\titems.push(itemToHash(jQuery(this)));\r\n\t\t\t});\r\n\t\t\tsetChannelMeta($xml.find(\"channel\"));\r\n\t\t\t// Insert all records\r\n\t\t\tself.insert(items);\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.data.Rss2Dataset.version = \"0.6.0\";\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {string}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extends luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {string}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {boolean} autoregister  Determine if we call luga.data.region.init() on jQuery(document).ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @returns {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {jquery} node\r\n\t * @returns {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {jquery|undefined} rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.description\r\n\t *\r\n\t * @property {jquery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @returns {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {string} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {array.<string>} traits                      An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @fires regionRendered\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.region.Base\r\n\t * @fires regionRendered\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\t\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t\t// It's a detailSet, abort\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t // Remove class from everyone\r\n\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {string} paramPath            Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {string} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extends luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  button          Button that will trigger the showMore. Required\r\n\t * @property {string}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.widgets.ShowMore\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\tthis.config.button = jQuery(this.config.button);\r\n\t\tif(this.config.button.length === 0){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tjQuery(self.config.button).on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tthis.config.button.addClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tthis.config.button.removeClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ShowMoreScrolling.options\r\n\t *\r\n\t * @extends luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  node  A jQuery object wrapping the node containing the records. It must have a scrollbar. Optional. If not specified, the whole document is assumed.\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore infinite scrolling class\r\n\t * @param {luga.data.widgets.ShowMoreScrolling.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.widgets.ShowMore\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreScrolling = function(options){\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tnode: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\t\t/** @type {luga.data.widgets.ShowMoreScrolling} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar scrollBody = false;\r\n\t\tif(this.config.node === undefined){\r\n\t\t\tscrollBody = true;\r\n\t\t\tthis.config.node = jQuery(document);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tvar targetNode = self.config.node;\r\n\r\n\t\t\tjQuery(targetNode).scroll(function(){\r\n\t\t\t\tvar scrolledToBottom = false;\r\n\t\t\t\tif(scrollBody === true){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() === (jQuery(targetNode).height() - jQuery(window).height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() >= (targetNode[0].scrollHeight - targetNode.height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif((scrolledToBottom === true) && (self.isEnabled() === true)){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}