{"version":3,"sources":["luga.min.js","luga.core.js","luga.ajaxform.js","luga.csi.js","luga.validator.js"],"names":["luga","attributesToProperties","node","obj","attributes","undefined","i","length","attr","xml","ATTRIBUTE_PREFIX","name","value","childrenToProperties","childNodes","child","nodeType","isArray","tagName","nodeName","constructor","Array","curValue","push","nodeHasText","getTextValue","childObj","nodeToHash","data","nextSibling","version","namespace","ns","rootObject","parts","split","window","extend","baseFunc","func","args","apply","isFunction","type","isPlainObject","Object","prototype","toString","call","proto","getPrototypeOf","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","object","part","shift","merge","target","source","x","setProperty","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","prefix","suffix","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","notifyObservers","method","removeObserver","splice","class2type","forEach","element","collection","toLowerCase","rawType","stringType","dom","treeWalker","getInstance","rootNode","filterFunc","filter","acceptNode","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","document","createTreeWalker","SHOW_ELEMENT","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toHash","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","jQuery","fieldValue","fieldType","prop","val","string","toJson","flatData","jsonData","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","selector","find","each","index","item","replace","RegExp","String","fromCharCode","format","pattern","queryToHash","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","MIME_TYPE","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","evaluator","XPathEvaluator","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToString","serializer","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlParser","xmlDOMObj","async","loadXML","DOMParser","domDoc","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","sender","Sender","send","FORM_SELECTOR","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","HEADERS","MISSING_FUNCTION","HANDLERS","options","config","action","location","href","timeout","success","error","successmsg","errormsg","after","headers","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","response","url","sendJson","contentType","JSON","stringify","initForms","submit","formHandler","ready","csi","NODE_SELECTOR","URL_ATTRIBUTE","AFTER_ATTRIBUTE","FILE_NOT_FOUND","Include","onSuccess","onError","qXHR","xhrTimeout","load","XHR_TIMEOUT","afterHandler","loadIncludes","includeObj","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","ERROR_SELECTOR","ERROR_CLASS","ALERT_SELECTOR","FAILED_UPDATE","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","parse","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","datObj","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","formValidator","api","validateForm","validateField","fieldValidator","validateFields","validateChildFields"],"mappings":"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","file":"luga.min.js","sourcesContent":[null,"/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.version = \"0.5.0\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {array}    args      An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is an array. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isArray = function(obj){\r\n\t\treturn Array.isArray(obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a function. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isFunction = function(obj){\r\n\t\treturn luga.type(obj) === \"function\";\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {string} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {object} target  An object that will receive the new properties\r\n\t * @param {object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\ttarget[x] = source[x];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  {object} observer  Observer object\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, data){\r\n\t\t\tif(luga.type(data) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && luga.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element, i, collection){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @returns {string}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {Node}         rootNode    Start node. Required\r\n\t * @param {function}     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {object}              A JavaScript object containing name/value pairs\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jquery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toHash(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {string}               A URI encoded string\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}  name       Name of the field. Mandatory\r\n\t * @param {jquery}  rootNode   Root node, optional, default to document\r\n\t * @returns {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name=\" + name + \"]\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @returns {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\t/* Utilities */\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @returns {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(luga.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {string} str  The querystring\r\n\t * @returns {object}\r\n\t */\r\n\tluga.string.queryToHash = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param   {string} str   String containing placeholders\r\n\t * @param   {object} obj   An objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XML */\r\n\r\n\tluga.namespace(\"luga.xml\");\r\n\r\n\tluga.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {string} path\r\n\t * @returns {Array<Node>}\r\n\t */\r\n\tluga.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @returns {object}\r\n\t */\r\n\tluga.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @returns {string}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @returns {string}\r\n\t */\r\n\tluga.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.xml.MIME_TYPE);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {string} xmlStr\r\n\t * @returns {Document}\r\n\t */\r\n\tluga.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\tluga.ajaxform.version = \"0.7.5\";\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jquery}       formNode  jQuery object wrapping the form\r\n\t * @param {jquery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\",\r\n\t\t\tHEADERS: \"data-lugajax-headers\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jquery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {string} method       HTTP method to be used. Default to GET\r\n\t * @property {number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {string} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {string} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {string} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {string} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {string} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {string} after        Name of the function to be invoked after the form is send. Default to null\r\n\t * @property {object} headers      A set of name/value pairs to be used as custom HTTP headers. Available only with JavaScript API\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null,\r\n\t\t\theaders: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toJson(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t */\r\n\tluga.ajaxform.initForms = function(){\r\n\t\tjQuery(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.csi\");\r\n\r\n\tluga.csi.version = \"1.1.2\";\r\n\r\n\tluga.csi.CONST = {\r\n\t\tNODE_SELECTOR: \"div[data-lugacsi]\",\r\n\t\tURL_ATTRIBUTE: \"data-lugacsi\",\r\n\t\tAFTER_ATTRIBUTE: \"data-lugacsi-after\",\r\n\t\tMESSAGES: {\r\n\t\t\tFILE_NOT_FOUND: \"luga.csi failed to retrieve text from: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.csi.Include.options\r\n\t *\r\n\t * @property {jquery}   rootNode     Root node for widget (DOM reference). Required\r\n\t * @property {string}   url          Url to be included. Optional. Default to the value of the \"data-lugacsi\" attribute inside rootNode\r\n\t * @property {function} success      Function that will be invoked once the url is successfully fetched. Optional, default to the internal \"onSuccess\" method\r\n\t * @property {function} after        Function that will be invoked once the include is successfully performed.\r\n\t *                                   It will be called with the handler(rootNode, url, response) signature. Optional, it can be set using the \"data-lugacsi-after\" attribute\r\n\t * @property {function} error        Function that will be invoked if the url request fails. Optional, default to the internal \"onError\" method\r\n\t * @property {int}      xhrTimeout   Timeout for XHR call (ms). Optional. Default to 5000 ms\r\n\t */\r\n\r\n\t/**\r\n\t * Client-side Include widget\r\n\t *\r\n\t * @param {luga.csi.Include.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.csi.Include = function(options){\r\n\r\n\t\tvar onSuccess = function(response, textStatus, jqXHR){\r\n\t\t\tjQuery(config.rootNode).html(response);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar onError = function(qXHR, textStatus, errorThrown){\r\n\t\t\tthrow(luga.string.format(luga.csi.CONST.MESSAGES.FILE_NOT_FOUND, [config.url]));\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\t\t\turl: jQuery(options.rootNode).attr(luga.csi.CONST.URL_ATTRIBUTE),\r\n\t\t\tafter: jQuery(options.rootNode).attr(luga.csi.CONST.AFTER_ATTRIBUTE),\r\n\t\t\tsuccess: onSuccess,\r\n\t\t\terror: onError,\r\n\t\t\txhrTimeout: 5000\r\n\t\t};\r\n\t\tluga.merge(config, options);\r\n\r\n\t\tthis.load = function(){\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\turl: config.url,\r\n\t\t\t\ttimeout: config.XHR_TIMEOUT,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tconfig.success.apply(null, [response, textStatus, jqXHR]);\r\n\t\t\t\t\tvar afterHandler = luga.lookupFunction(config.after);\r\n\t\t\t\t\tif(afterHandler !== undefined){\r\n\t\t\t\t\t\tafterHandler.apply(null, [config.rootNode, config.url, response]);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\tconfig.error.apply(null, [jqXHR, textStatus, errorThrown]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke this to programmatically load CSI inside the current document\r\n\t */\r\n\tluga.csi.loadIncludes = function(){\r\n\t\tjQuery(luga.csi.CONST.NODE_SELECTOR).each(function(index, item){\r\n\t\t\tvar includeObj = new luga.csi.Include({rootNode: item});\r\n\t\t\tincludeObj.load();\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.csi.loadIncludes();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\tluga.validator.version = \"0.9.2\";\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t */\r\n\tluga.validator.initForms = function(){\r\n\t\tjQuery(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() === true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(null, []);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}