{"version":3,"sources":["luga.common.js","luga.ajaxform.js","luga.validator.js","luga.data.js"],"names":["window","luga","namespace","ns","rootObject","parts","split","undefined","i","length","common","version","extend","baseFunc","func","args","apply","isArray","obj","Array","isFunction","type","isPlainObject","Object","prototype","toString","call","proto","getPrototypeOf","constructor","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","object","part","shift","merge","target","source","x","setProperty","value","class2type","forEach","element","collection","toLowerCase","rawType","stringType","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_GENERIC_OBSERVER_PARAMETER","INVALID_EVENT_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","eventObservers","addObserver","observer","eventName","methodName","arguments","push","eventMap","findObserverIndex","eventArray","currentMap","notifyObservers","payload","genericMethod","str","charAt","toUpperCase","substring","generateGenericMethodName","removeObserver","splice","index","dom","nodeIterator","getInstance","rootNode","filterFunc","filter","node","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","acceptNode","document","createNodeIterator","SHOW_ELEMENT","treeWalker","createTreeWalker","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","jQuery","attr","fieldValue","prop","val","string","toHash","toJson","flatData","jsonData","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","name","find","each","item","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","Sender","send","FORM_SELECTOR","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","HEADERS","MISSING_FUNCTION","HANDLERS","options","config","action","location","href","method","timeout","success","error","successmsg","errormsg","after","headers","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","data","response","url","sendJson","contentType","initForms","submit","ready","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","api","validateForm","formValidator","validateField","fieldValidator","validateFields","validateChildFields","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","getTextValue","child","childNodes","nodeType","nodeHasText","nextSibling","xml","MIME_TYPE","ATTRIBUTE_PREFIX","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","result","XPathEvaluator","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToHash","attributes","attributesToProperties","tagName","nodeName","curValue","childObj","childrenToProperties","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlDOMObj","async","loadXML","DOMParser","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","delete","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","cache","incrementalLoad","dataType","xhrRequest","cancelRequest","abort","getUrl","loadData","xhrOptions","loadRecords","xhrError","converters","text xml","setUrl","newUrl","status","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","nodes","Rss2Dataset","channelElements","itemElements","channelMeta","items","$xml","parseXML","rec","text","itemToHash","$channel","setChannelMeta","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","PagedView","pageSize","currentPage","currentOffsetStart","getCurrentOffsetStart","getCurrentOffsetEnd","currentPageNumber","getCurrentPageNumber","currentPageRecordCount","currentOffsetEnd","getPageSize","pageCount","getPagesCount","offSet","goToPage","pageNumber","isPageInRange","goToNextPage","goToPrevPage","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","compile","templateNode","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","get","jItem","on","setRowId","setRowIndex","rowIndex","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","widgets","PagingBar","pagedView","style","nextText","prevText","maxLinks","innerHTML","pages","pageIndex","renderPrevLink","renderMainLinks","renderNextLink","textNode","createTextNode","linkNode","createElement","setAttribute","addGoToPageEvent","appendChild","recordsCount","pagesCount","currentPageIndex","range","getIndexRange","startIndex","endIndex","linkText","getLinkText","strongNode","separatorNode","addEventListener","tempPos","start","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents","ShowMoreScrolling","scrollBody","targetNode","scroll","scrolledToBottom","scrollTop","height","scrollHeight"],"mappings":";;;;;AAGA,GAAA,oBAAA,OACA,KAAA,wBCDA,GDIA,oBAAA,OACAA,OAAAC,SAGA,WACA,aAUAA,KAAAC,UAAA,SAAAC,GAAAC,YACA,IAAAC,MAAAF,GAAAG,MAAA,UACAC,IAAAH,aACAA,WAAAJ,QAEA,IAAA,IAAAQ,EAAA,EAAAA,EAAAH,MAAAI,OAAAD,SACAD,IAAAH,WAAAC,MAAAG,MACAJ,WAAAC,MAAAG,QAEAJ,WAAAA,WAAAC,MAAAG,IAEA,OAAAJ,YAGAH,KAAAC,UAAA,eACAD,KAAAS,OAAAC,QAAA,QASAV,KAAAW,OAAA,SAAAC,SAAAC,KAAAC,MACAF,SAAAG,MAAAF,KAAAC,OAQAd,KAAAgB,QAAA,SAAAC,KACA,OAAAC,MAAAF,QAAAC,MAQAjB,KAAAmB,WAAA,SAAAF,KACA,MAAA,aAAAjB,KAAAoB,KAAAH,MASAjB,KAAAqB,cAAA,SAAAJ,KAGA,GAAA,oBAAAK,OAAAC,UAAAC,SAAAC,KAAAR,KACA,OAAA,EAGA,IAAAS,MAAAJ,OAAAK,eAAAV,KAGA,GAAA,OAAAS,MACA,OAAA,EAIA,IAAAE,YAAAN,OAAAC,UAAAM,eAAAJ,KAAAC,MAAA,gBAAAA,MAAAE,YACA,cAAA,aAAAA,cAAAE,SAAAN,SAAAC,KAAAG,eAAAE,SAAAN,SAAAC,KAAAH,SAUAtB,KAAA+B,eAAA,SAAAC,MACA,GAAAA,KAAA,CAGA,IAAAC,UAAAjC,KAAAkC,eAAAnC,OAAAiC,MACA,OAAA,IAAAhC,KAAAmB,WAAAc,WACAA,eADA,IAcAjC,KAAAkC,eAAA,SAAAC,OAAAH,MAEA,GAAAG,QAAAH,KAAA,CAIA,QAAA1B,IAAA6B,OAAAH,MACA,OAAAG,OAAAH,MAGA,IADA,IAAA5B,MAAA4B,KAAA3B,MAAA,KACAD,MAAAI,OAAA,GAAA,CACA,IAAA4B,KAAAhC,MAAAiC,QACA,QAAA/B,IAAA6B,OAAAC,MAAA,CACA,GAAA,IAAAhC,MAAAI,OAEA,OAAA2B,OAAAC,MAIAD,OAAAA,OAAAC,UAaApC,KAAAsC,MAAA,SAAAC,OAAAC,QACA,IAAA,IAAAC,KAAAD,QACA,IAAAA,OAAAX,eAAAY,KACAF,OAAAE,GAAAD,OAAAC,KAYAzC,KAAA0C,YAAA,SAAAP,OAAAH,KAAAW,OACA,IAAAvC,MAAA4B,KAAA3B,MAAA,KAIA,IAHA,IAAAD,MAAAI,SACA2B,OAAAH,MAAAW,OAEAvC,MAAAI,OAAA,GAAA,CACA,IAAA4B,KAAAhC,MAAAiC,QACA,QAAA/B,IAAA6B,OAAAC,MAAA,CACA,GAAA,IAAAhC,MAAAI,OAAA,CAEA2B,OAAAC,MAAAO,MACA,MAGAR,OAAAA,OAAAC,WAEAhC,MAAAI,OAAA,GAEA2B,OAAAC,SACAD,OAAAA,OAAAC,OAGAD,OAAAC,MAAAO,QAKA,IAAAC,eACA,QAAA,UAAA,OAAA,QAAA,WAAA,SAAA,SAAA,SAAA,SAAA,UAAAC,QAAA,SAAAC,QAAAvC,EAAAwC,YACAH,WAAA,WAAAE,QAAA,KAAAA,QAAAE,gBASAhD,KAAAoB,KAAA,SAAAH,KACA,GAAA,OAAAA,IACA,MAAA,OAEA,IAAAgC,eAAAhC,IACA,GAAA,WAAAgC,SAAA,aAAAA,QAAA,CAEA,IAAAC,WAAA5B,OAAAC,UAAAC,SAAAC,KAAAR,KACA,OAAA2B,WAAAM,YAEA,OAAAD,SAUAjD,KAAAmD,gBACAC,gBACAC,kBAAA,wFACAC,mCAAA,sDACAC,iCAAA,0DACAC,uBAAA,uEAUAxD,KAAAyD,SAAA,WACA,GAAAC,KAAA9B,cAAA5B,KAAAyD,SACA,MAAAzD,KAAAmD,eAAAC,eAAA,kBAMAM,KAAAC,aAKAD,KAAAE,kBAoCAF,KAAAG,YAAA,SAAAC,SAAAC,UAAAC,YACA,GAAA,WAAAhE,KAAAoB,KAAA0C,UACA,MAAA9D,KAAAmD,eAAAC,eAAA,mCAKA,GAHA,IAAAa,UAAAzD,QACAkD,KAAAC,UAAAO,KAAAJ,UAEA,IAAAG,UAAAzD,OAAA,CACA,GAAA,WAAAR,KAAAoB,KAAA2C,YAAA,WAAA/D,KAAAoB,KAAA4C,YACA,MAAAhE,KAAAmD,eAAAC,eAAA,iCAKA,IAAAe,UACAL,SAAAA,SACAE,WAAAA,iBAGA1D,IAAAoD,KAAAE,eAAAG,WACAL,KAAAE,eAAAG,YAAAI,WAGA,IAAAC,kBAAAV,KAAAE,eAAAG,WAAAI,WACAT,KAAAE,eAAAG,WAAAG,KAAAC,YAWA,IAAAC,kBAAA,SAAAC,WAAAF,UACA,IAAA,IAAA5D,EAAA,EAAAA,EAAA8D,WAAA7D,OAAAD,IAAA,CAIA,IAAA+D,WAAAD,WAAA9D,GACA,GAAA+D,WAAAR,WAAAK,SAAAL,UAAAQ,WAAAN,aAAAG,SAAAH,WACA,OAAAzD,EAGA,OAAA,GAYAmD,KAAAa,gBAAA,SAAAR,UAAAS,SACA,GAAA,WAAAxE,KAAAoB,KAAAoD,SACA,MAAAxE,KAAAmD,eAAAC,eAAA,uBAGA,IAAAqB,cA5FA,SAAAV,WACA,IAAAW,IALA,KASA,OAHAA,KAAAX,UAAAY,OAAA,GAAAC,cACAF,KAAAX,UAAAc,UAAA,GACAH,KAPA,UA+FAI,CAAAf,WACAL,KAAAC,UAAAd,QAAA,SAAAC,QAAAvC,EAAAwC,YACAD,QAAA2B,gBAAAzE,KAAAmB,WAAA2B,QAAA2B,iBACA3B,QAAA2B,eAAAD,WAIA,IAAAZ,eAAAF,KAAAE,eAAAG,gBACAzD,IAAAsD,gBACAA,eAAAf,QAAA,SAAAC,QAAAvC,EAAAwC,YACA,aAAA/C,KAAAoB,KAAA0B,QAAAgB,SAAAhB,QAAAkB,cACAlB,QAAAgB,SAAAhB,QAAAkB,YAAAQ,YAmBAd,KAAAqB,eAAA,SAAAjB,SAAAC,UAAAC,YACA,GAAA,IAAAC,UAAAzD,OACA,IAAA,IAAAD,EAAA,EAAAA,EAAAmD,KAAAC,UAAAnD,OAAAD,IACA,GAAAmD,KAAAC,UAAApD,KAAAuD,SAAA,CACAJ,KAAAC,UAAAqB,OAAAzE,EAAA,GACA,MAIA,GAAA,IAAA0D,UAAAzD,aACAF,IAAAoD,KAAAE,eAAAG,WAAA,CAIA,IAAAI,UACAL,SAAAA,SACAE,WAAAA,YAEAiB,MAAAb,kBAAAV,KAAAE,eAAAG,WAAAI,WAGA,IAAAc,QACAvB,KAAAE,eAAAG,WAAAiB,OAAAC,MAAA,GAEA,IAAAvB,KAAAE,eAAAG,WAAAvD,eACAkD,KAAAE,eAAAG,eAUA/D,KAAAC,UAAA,yBAWAD,KAAAkF,IAAAC,aAAAC,YAAA,SAAAC,SAAAC,YAEA,IAAAC,kBACA,SAAAC,MAEA,YAAAlF,IAAAgF,aACA,IAAAA,WAAAE,MACAC,WAAAC,YAGAD,WAAAE,eAMAC,WAAAL,kBAEA,OADAK,WAAAC,WAAAN,kBACAO,SAAAC,mBAAAV,SAAAI,WAAAO,aAAAJ,YAAA,IAGA5F,KAAAC,UAAA,uBAWAD,KAAAkF,IAAAe,WAAAb,YAAA,SAAAC,SAAAC,YAEA,IAAAC,kBACA,SAAAC,MAEA,YAAAlF,IAAAgF,aACA,IAAAA,WAAAE,MACAC,WAAAC,YAGAD,WAAAE,eAMAC,WAAAL,kBAEA,OADAK,WAAAC,WAAAN,kBACAO,SAAAI,iBAAAb,SAAAI,WAAAO,aAAAJ,YAAA,IAKA5F,KAAAC,UAAA,aAEAD,KAAAmG,KAAAC,OACAC,eAAA,wBACAC,kBACAC,UAAA,EACAC,OAAA,GAEAC,UACAC,aAAA,wBAeA1G,KAAAmG,KAAAQ,MAAA,SAAAtB,SAAAuB,YAEA,GAAA,IAAAvB,SAAA7E,OACA,MAAAR,KAAAmG,KAAAC,MAAAK,SAAA,aAKA,IAFA,IAAAI,OACAC,OAAA9G,KAAAmG,KAAAY,MAAAC,eAAA3B,UACA9E,EAAA,EAAAA,EAAAuG,OAAAtG,OAAAD,IACA,IAAA,IAAAP,KAAAmG,KAAAY,MAAAE,kBAAAH,OAAAvG,IAAA,CACA,IAAA2G,UAAAC,OAAAL,OAAAvG,IAAA6G,KAAA,QACAC,WAAA,KAEA,OADAF,OAAAL,OAAAvG,IAAA+G,KAAA,SAGA,IAAA,kBACAD,WAAAF,OAAAL,OAAAvG,IAAAgH,MACA,MAEA,IAAA,WACA,IAAA,SACA,IAAAJ,OAAAL,OAAAvG,IAAA+G,KAAA,aACAD,WAAAF,OAAAL,OAAAvG,IAAAgH,OAEA,MAEA,QACAF,WAAAF,OAAAL,OAAAvG,IAAAgH,MAGA,OAAAF,cACA,IAAAT,aACAS,WAAArH,KAAAwH,OAAAZ,WAAAS,kBAEA/G,IAAAuG,IAAAK,WACAL,IAAAK,WAAAG,YAEA,IAAArH,KAAAgB,QAAA6F,IAAAK,YACAL,IAAAK,WAAAhD,KAAAmD,YAGAR,IAAAK,YAAAL,IAAAK,WAAAG,aAMA,OAAAR,KAOA7G,KAAAmG,KAAAsB,OAAA,SAAApC,SAAAuB,YACA,OAAA5G,KAAAmG,KAAAQ,MAAAtB,SAAAuB,aAWA5G,KAAAmG,KAAAuB,OAAA,SAAArC,UACA,IAAAsC,SAAA3H,KAAAmG,KAAAQ,MAAAtB,UACAuC,YACA,IAAA,IAAAnF,KAAAkF,SACA3H,KAAA0C,YAAAkF,SAAAnF,EAAAkF,SAAAlF,IAEA,OAAAmF,UAaA5H,KAAAmG,KAAA0B,cAAA,SAAAxC,SAAAuB,YAEA,GAAA,IAAAvB,SAAA7E,OACA,MAAAR,KAAAmG,KAAAC,MAAAK,SAAA,aAKA,IAFA,IAAA/B,IAAA,GACAoC,OAAA9G,KAAAmG,KAAAY,MAAAC,eAAA3B,UACA9E,EAAA,EAAAA,EAAAuG,OAAAtG,OAAAD,IACA,IAAA,IAAAP,KAAAmG,KAAAY,MAAAE,kBAAAH,OAAAvG,IAAA,CACA,IAAA2G,UAAAC,OAAAL,OAAAvG,IAAA6G,KAAA,QACAC,WAAAF,OAAAL,OAAAvG,IAAAgH,MAEA,OADAJ,OAAAL,OAAAvG,IAAA+G,KAAA,SAGA,IAAA,kBACA,IAAA,IAAAQ,EAAA,EAAAA,EAAAT,WAAA7G,OAAAsH,IACApD,IAAAqD,kBAAArD,IAAAwC,UAAAG,WAAAS,GAAAlB,YAEA,MAEA,IAAA,WACA,IAAA,SACA,IAAAO,OAAAL,OAAAvG,IAAA+G,KAAA,aACA5C,IAAAqD,kBAAArD,IAAAwC,UAAAG,WAAAT,aAEA,MAEA,QACAlC,IAAAqD,kBAAArD,IAAAwC,UAAAG,WAAAT,aAIA,OAAAlC,KAGA,IAAAqD,kBAAA,SAAArD,IAAAwC,UAAAG,WAAAT,YAYA,MAXA,KAAAlC,MACAA,KAAA,KAEAA,KAAAsD,mBAAAd,WACAxC,KAAA,IAEAA,MADA,IAAAkC,WACAoB,mBAAAhI,KAAAwH,OAAAZ,WAAAS,aAGAW,mBAAAX,aAKArH,KAAAC,UAAA,mBASAD,KAAAmG,KAAAY,MAAAE,kBAAA,SAAAgB,WACA,OAAA,IAAAjI,KAAAmG,KAAAY,MAAAmB,aAAAD,cAGA,IAAAd,OAAAc,WAAAX,KAAA,kBAGAhH,IAAA6G,OAAAc,WAAAb,KAAA,UAYApH,KAAAmG,KAAAY,MAAAmB,aAAA,SAAAD,WACA,YAAA3H,IAAA6G,OAAAc,WAAAX,KAAA,UAIA,IAAAtH,KAAAmG,KAAAC,MAAAE,iBAAAa,OAAAc,WAAAX,KAAA,UAcAtH,KAAAmG,KAAAY,MAAAoB,cAAA,SAAAC,KAAA/C,UAEA,OAAA8B,OADA,eAAAiB,KAAA,KACA/C,WASArF,KAAAmG,KAAAY,MAAAC,eAAA,SAAA3B,UACA,IAAAyB,UAOA,OANAK,OAAA9B,UAAAgD,KAAArI,KAAAmG,KAAAC,MAAAC,gBAAAiC,KAAA,SAAArD,MAAAsD,MACAvI,KAAAmG,KAAAY,MAAAmB,aAAAK,OACAzB,OAAA5C,KAAAqE,QAIAzB,QAGA9G,KAAAC,UAAA,qBASAD,KAAAwI,aAAAC,SAAA,SAAAC,KAAA1G,MACA,OAAAhC,KAAAkC,eAAAyG,aAAAD,MAAA1G,KAAAR,aAUAxB,KAAAwI,aAAAI,QAAA,SAAAF,KAAA1G,KAAAW,OACA,IAAAkG,KAAAF,aAAAD,MACA1I,KAAA0C,YAAAmG,KAAA7G,KAAAR,WAAAmB,OACAmG,aAAAJ,KAAAG,OAGA,IAAAC,aAAA,SAAAJ,KAAAG,MACAL,aAAAO,QAAAL,KAAAM,KAAAC,UAAAJ,QAGAF,aAAA,SAAAD,MACA,IAAAQ,SAAAV,aAAAW,QAAAT,MACA,OAAA,OAAAQ,YAGAF,KAAAI,MAAAF,WAGAlJ,KAAAC,UAAA,eAQAD,KAAAwH,OAAAZ,WAAA,SAAAlC,KAeA,OADAA,KADAA,KADAA,KADAA,KADAA,KADAA,KAFAA,KADAA,KADAA,KADAA,KAFAA,KADAA,IAAAA,IAAA2E,QAAA,IAAAC,OAAAC,OAAAC,aAAA,KAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,KAAA,KAAA,MAEAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MAEAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,OACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,OACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,QAqBAxJ,KAAAwH,OAAAiC,OAAA,SAAA/E,IAAA5D,MACA,IAAA4I,QAAA,KACA,IAAA,IAAA1J,KAAAgB,QAAAF,MACA,IAAA,IAAAP,EAAA,EAAAA,EAAAO,KAAAN,OAAAD,IACAmJ,QAAA,IAAAJ,OAAA,MAAA/I,EAAA,MAAA,KACAmE,IAAAA,IAAA2E,QAAAK,QAAA5I,KAAAP,IAGA,IAAA,IAAAP,KAAAqB,cAAAP,MACA,IAAA,IAAA2B,KAAA3B,KACA4I,QAAA,IAAAJ,OAAA,MAAA7G,EAAA,MAAA,KACAiC,IAAAA,IAAA2E,QAAAK,QAAA5I,KAAA2B,IAGA,OAAAiC,KAQA1E,KAAAwH,OAAAmC,WAAA,SAAAjF,KACA,IAAAmC,OAIA,GAHA,MAAAnC,IAAAC,OAAA,KACAD,IAAAA,IAAAG,UAAA,IAEA,IAAAH,IAAAlE,OACA,OAAAqG,IAIA,IAFA,IAAAzG,MAAAsE,IAAArE,MAAA,KAEAE,EAAA,EAAAA,EAAAH,MAAAI,OAAAD,IAAA,CACA,IAAAqJ,OAAAxJ,MAAAG,GAAAF,MAAA,KACA6G,UAAA2C,mBAAAD,OAAA,IACAvC,WAAA,GACA,IAAAuC,OAAApJ,SACA6G,WAAAwC,mBAAAD,OAAA,UAEAtJ,IAAAuG,IAAAK,WACAL,IAAAK,WAAAG,YAEA,IAAArH,KAAAgB,QAAA6F,IAAAK,YACAL,IAAAK,WAAAhD,KAAAmD,YAGAR,IAAAK,YAAAL,IAAAK,WAAAG,YAGA,OAAAR,KAGA,IAAAiD,gBAAA,IAAAR,OAAA,cAAA,KAoBAtJ,KAAAwH,OAAAuC,SAAA,SAAArF,IAAAzD,KACA,IAAA,IAAAjB,KAAAqB,cAAAJ,KAEA,IADA,IAAA+I,QACA,QAAAA,QAAAF,gBAAAG,KAAAvF,OAAA,CACA,IAAAwF,SAAAlK,KAAAkC,eAAAjB,IAAA+I,QAAA,IACA,QAAA1J,IAAA4J,SAAA,CACA,IAAAR,QAAA,IAAAJ,OAAAU,QAAA,GAAA,KACAtF,IAAAA,IAAA2E,QAAAK,QAAAQ,UAEAJ,gBAAAK,KAAAzF,MAIA,OAAAA,KAGA1E,KAAAC,UAAA,cAEAD,KAAA+G,MAAAX,OACAgE,aACAC,QAAA,eACAC,cAAA,sBAEAC,WAAA,kBASA,IAAAC,cAAA,SAAAhF,MACA,IAAAiF,MAAAzK,KAAA+G,MAAAX,MAAAmE,WAOA,YANAjK,IAAAkF,KAAA4B,KAAA,MACAqD,OAAAjF,KAAA4B,KAAA,WAEA9G,IAAAkF,KAAA4B,KAAA,UACAqD,OAAAjF,KAAA4B,KAAA,SAEAqD,OAOAzK,KAAA+G,MAAA2D,iBAAA,SAAAlF,MACA,IAAAiF,MAAAD,cAAArD,OAAA3B,OACAmF,OAAAxD,OAAA,IAAAsD,OAGAE,OAAAnK,OAAA,GACAmK,OAAAC,UAUA5K,KAAA+G,MAAA8D,eAAA,SAAArF,KAAAsF,MACA,OAAA9K,KAAA+G,MAAAgE,WAAAvF,KAAAsF,KAAA9K,KAAA+G,MAAAX,MAAAgE,YAAAC,UASArK,KAAA+G,MAAAiE,oBAAA,SAAAxF,KAAAsF,MACA,OAAA9K,KAAA+G,MAAAgE,WAAAvF,KAAAsF,KAAA9K,KAAA+G,MAAAX,MAAAgE,YAAAE,gBAWAtK,KAAA+G,MAAAgE,WAAA,SAAAvF,KAAAsF,KAAAG,eACA3K,IAAA2K,WACAA,SAAAjL,KAAA+G,MAAAX,MAAAgE,YAAAC,SAEA,IAAAI,MAAAD,cAAArD,OAAA3B,OACA0F,IAAA/D,OAAA,eACA+D,IAAA9D,KAAA,KAAAqD,OACAS,IAAAC,SAAAF,UACAC,IAAAJ,KAAAA,MACA,IAAAH,OAAAxD,OAAA,IAAAsD,OAQA,OANAE,OAAAnK,OAAA,EACAmK,OAAAS,YAAAF,KAGA/D,OAAA3B,MAAA6F,OAAAH,KAEAA,KA17BA,GCRA,oBAAA,KACA,KAAA,8BCDA,GDIA,WACA,aAEAlL,KAAAC,UAAA,iBAGAD,KAAAC,UAAA,0BAUAD,KAAAsL,SAAAC,SAAAC,YAAA,SAAAC,IAAAC,SAAAC,WAAAC,OACAzE,OAAAuE,UAAAG,QACA1E,OAAAuE,UAAAZ,KAAAW,MAYAzL,KAAAsL,SAAAC,SAAAO,WAAA,SAAAL,IAAAC,SAAAC,WAAAI,YAAAH,OACAI,MAAAP,MAYAzL,KAAAsL,SAAAC,SAAAU,SAAA,SAAAR,IAAAC,SAAAC,WAAAI,YAAAH,OAEA5L,KAAA+G,MAAA2D,iBAAAgB,UACA1L,KAAA+G,MAAAiE,oBAAAU,SAAAD,MASAzL,KAAAsL,SAAAC,SAAAW,gBAAA,SAAAR,SAAAS,OACAA,MAAAC,iBACA,IAAApM,KAAAsL,SAAAe,QACAX,SAAAA,WAEAY,QAGAtM,KAAAsL,SAAAlF,OACAmG,cAAA,iCACAC,eAAA,MACAC,iBAAA,IACAC,mBACAC,KAAA,oBACAC,OAAA,sBACAC,OAAA,sBACAC,SAAA,uBACAC,QAAA,uBACAC,YAAA,0BACAC,MAAA,qBACAC,UAAA,wBACAC,OAAA,sBACAC,MAAA,qBACAC,QAAA,wBAEA5G,UACAsG,QAAA,iCACAE,MAAA,4BACAvG,aAAA,wCACA4G,iBAAA,0DAEAC,UACAR,QAAA,qCACAE,MAAA,sCA0BAjN,KAAAsL,SAAAe,OAAA,SAAAmB,SAEAA,QAAA9B,SAAAvE,OAAAqG,QAAA9B,UACAhI,KAAA+J,QACA/B,SAAA,KAEAgC,OAAAF,QAAA9B,SAAAtE,KAAA,WAAAoG,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAE,SAAA9G,SAAA6H,SAAAC,KAEAC,OAAAL,QAAA9B,SAAAtE,KAAA,WAAAoG,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAG,SAAA7M,KAAAsL,SAAAlF,MAAAoG,eAEAsB,QAAAN,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAI,WAAA9M,KAAAsL,SAAAlF,MAAAqG,iBACAsB,QAAAP,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAK,UAAA/M,KAAAsL,SAAAlF,MAAAmH,SAAAR,QACAiB,MAAAR,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAO,QAAAjN,KAAAsL,SAAAlF,MAAAmH,SAAAN,MACAgB,WAAAT,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAM,cAAAhN,KAAAsL,SAAAlF,MAAAK,SAAAsG,QACAmB,SAAAV,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAQ,YAAAlN,KAAAsL,SAAAlF,MAAAK,SAAAwG,MAEA5B,OAAAmC,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAS,SAAA,KACAgB,MAAAX,QAAA9B,SAAAtE,KAAApH,KAAAsL,SAAAlF,MAAAsG,kBAAAU,QAAA,KACAgB,QAAA,MAEApO,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACA9J,KAAA+J,OAAAK,QAAAO,SAAA3K,KAAA+J,OAAAK,QAAA,IACA,IAAAQ,KAAA5K,KAEA,GAAA,IAAA4K,KAAAb,OAAA/B,SAAAlL,OACA,MAAAR,KAAAsL,SAAAlF,MAAAK,SAAA,aAMA,IAAA8H,YAAA,WAEA,GAAA,OAAAD,KAAAb,OAAAU,MAAA,CACA,IAAAK,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAAU,OACA,QAAA7N,IAAAkO,SACA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsL,SAAAlF,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAAU,QAEAK,SAAAzN,MAAA,MAAAuN,KAAAb,OAAA/B,aAOA+C,aAAA,WAEA,GAAA,OAAAH,KAAAb,OAAApC,OAAA,CACA,IAAAmD,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAApC,QACA,QAAA/K,IAAAkO,SACA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsL,SAAAlF,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAApC,SAEAmD,SAAAzN,MAAA,MAAAuN,KAAAb,OAAA/B,aAOAgD,YAAA,SAAA/C,WAAAC,MAAAG,aACA,IAAAyC,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAAO,OACA,QAAA1N,IAAAkO,SACA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsL,SAAAlF,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAAO,QAEAQ,SAAAzN,MAAA,MAAAuN,KAAAb,OAAAS,SAAAI,KAAAb,OAAA/B,SAAAC,WAAAI,YAAAH,SAMA+C,cAAA,SAAAhD,WAAAC,OACA,IAAA4C,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAAM,SACA,QAAAzN,IAAAkO,SACA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsL,SAAAlF,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAAM,UAEAS,SAAAzN,MAAA,MAAAuN,KAAAb,OAAAQ,WAAAK,KAAAb,OAAA/B,SAAAC,WAAAC,SAUAlI,KAAA4I,KAAA,WAEA,IAAAsC,SAAA5O,KAAAmG,KAAA0B,cAAAyG,KAAAb,OAAA/B,UAAA,GAEA,OAAA4C,KAAAb,OAAApC,QACAoD,eAGAtH,OAAA0H,MACAC,KAAAF,SACAZ,MAAA,SAAApC,MAAAD,WAAAI,aACA2C,YAAA/C,WAAAC,MAAAG,cAEA8B,OAAAS,KAAAb,OAAAI,OACAO,QAAAE,KAAAb,OAAAW,QACAL,QAAA,SAAAgB,SAAApD,WAAAC,OACA+C,cAAAhD,WAAAC,QAEAkC,QAAAQ,KAAAb,OAAAK,QACAkB,IAAAV,KAAAb,OAAAC,SAGA,OAAAY,KAAAb,OAAAU,OACAI,eAQA7K,KAAAuL,SAAA,WAEA,IAAAL,SAAA5O,KAAAmG,KAAAuB,OAAA4G,KAAAb,OAAA/B,UAAA,GAEA,OAAA4C,KAAAb,OAAApC,QACAoD,eAGAtH,OAAA0H,MACAK,YAAA,mBACAJ,KAAA9F,KAAAC,UAAA2F,UACAZ,MAAA,SAAApC,MAAAD,WAAAI,aACA2C,YAAA/C,WAAAC,MAAAG,cAEA8B,OAAAS,KAAAb,OAAAI,OACAO,QAAAE,KAAAb,OAAAW,QACAL,QAAA,SAAAgB,SAAApD,WAAAC,OACA+C,cAAAhD,WAAAC,QAEAkC,QAAAQ,KAAAb,OAAAK,QACAkB,IAAAV,KAAAb,OAAAC,SAGA,OAAAY,KAAAb,OAAAU,OACAI,gBAYAvO,KAAAsL,SAAA6D,UAAA,SAAA9J,eACA/E,IAAA+E,WACAA,SAAA8B,OAAA,SAEA9B,SAAAgD,KAAArI,KAAAsL,SAAAlF,MAAAmG,eAAAjE,KAAA,SAAArD,MAAAsD,MACA,IAAAmD,SAAAvE,OAAAoB,MACAmD,SAAA0D,OAAA,SAAAjD,OACAA,MAAAC,iBACA,IAAApM,KAAAsL,SAAAe,QACAX,SAAAA,WAEAY,YAKAnF,OAAArB,UAAAuJ,MAAA,WACArP,KAAAsL,SAAA6D,cA3RA,GCJA,oBAAA,KACA,KAAA,8BCEA,GDCA,WACA,aAEAnP,KAAAC,UAAA,kBAIAD,KAAAC,UAAA,2BAQAD,KAAAsP,UAAA/D,SAAAO,WAAA,SAAAJ,SAAA6D,YAGA,IAFA,IAAAC,SAAA,GACAC,YAAA,EACAlP,EAAA,EAAAA,EAAAgP,WAAA/O,OAAAD,IAEAiP,UAAAD,WAAAhP,GAAAmP,QAAA,MAGA,IAAAD,YAAAF,WAAAhP,GAAA,WACAgP,WAAAhP,GAAAoP,WACAF,YAAA,GAIA,KAAAD,UACAxD,MAAAwD,WAUAxP,KAAAsP,UAAA/D,SAAAU,SAAA,SAAAP,SAAA6D,YAEA,GAAA,IAAAA,WAAA/O,OAAA,CAOA,IAHA,IAAAiP,YAAA,EACAG,QAAA,OAEArP,EAAA,EAAAA,EAAAgP,WAAA/O,OAAAD,IACAqP,SAAA,WAAAL,WAAAhP,GAAA6H,KAAA,WAAAmH,WAAAhP,GAAAmP,QAAA,SAEA,IAAAD,YAAAF,WAAAhP,GAAA,WACAgP,WAAAhP,GAAAoP,WACAF,YAAA,GAGAG,SAAA,QACA5P,KAAA+G,MAAAiE,oBAAAU,SAAAkE,cAfA5P,KAAA+G,MAAA2D,iBAAAgB,WAwBA1L,KAAAsP,UAAA/D,SAAAsE,UAAA,SAAAnE,SAAA6D,YAUApI,OAAAuE,UAAArD,KATA,cASAyH,YARA,aASA3I,OAAAuE,UAAArD,KARA,iBAQAuC,SAGA,IADA,IAAA6E,YAAA,EACAlP,EAAA,EAAAA,EAAAgP,WAAA/O,OAAAD,IAAA,CACA,IAAA0H,UAAAd,OAAAoI,WAAAhP,GAAAiF,MAEAyC,UAAA8H,SAAA5E,SAfA,aAiBAlD,UAAAoD,OAAAlE,OAAAnH,KAAAwH,OAAAiC,OAdA,+IAcA8F,WAAAhP,GAAAmP,aAGA,IAAAD,YAAAF,WAAAhP,GAAA,WACAgP,WAAAhP,GAAAoP,WACAF,YAAA,KAKAzP,KAAAsP,UAAAlJ,OACAmG,cAAA,oCACAyD,YAAA,sBACAC,qBAAA,aACAvD,mBACAwD,SAAA,8BACAjD,MAAA,2BACAE,OAAA,4BACAC,MAAA,2BACA+C,aAAA,iCACA9F,QAAA,6BACA+F,YAAA,gCACAC,SAAA,8BACAC,QAAA,6BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,aAAA,iCACAC,SAAA,6BACAC,SAAA,6BACAC,SAAA,6BACAC,YAAA,gCACAC,YAAA,gCACAC,cAAA,kCACAC,cAAA,kCACAC,iBAAA,oCAEA1K,UACAC,aAAA,yCACA0K,cAAA,0CACA9D,iBAAA,0DACA+D,wBAAA,yDACAC,yBAAA,yDACAC,wBAAA,gCACAC,kBAAA,iDACAC,wBAAA,sDACAC,uBAAA,qEAEAnE,UACAoE,WAAA,uCAwBA3R,KAAAsP,UAAAsC,cAAA,SAAApE,SAEA9J,KAAA+J,QAEAoE,YAAA1K,OAAAqG,QAAA9B,UAAAtE,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAyD,eAAA,OACAnC,MAAA7G,OAAAqG,QAAA9B,UAAAtE,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAO,QAAAjN,KAAAsP,UAAAlJ,MAAAmH,SAAAoE,WAEAtG,OAAAlE,OAAAqG,QAAA9B,UAAAtE,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAS,SAAA,KACAgB,MAAAhH,OAAAqG,QAAA9B,UAAAtE,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAU,QAAA,MAEApN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SAEA9J,KAAA+J,OAAAoE,YAAA7I,KAAAI,MAAA1F,KAAA+J,OAAAoE,aAGA,IAAAvD,KAAA5K,KAQA,GANA4K,KAAAiB,cAEAjB,KAAAwD,mBAEAxD,KAAAb,OAAA/B,SAAAvE,OAAAmH,KAAAb,OAAA/B,UAEA,IAAAvE,OAAAmH,KAAAb,OAAA/B,UAAAlL,OACA,MAAAR,KAAAsP,UAAAlJ,MAAAK,SAAA,aAGA/C,KAAAqO,KAAA,WACAzD,KAAAiB,cACAjB,KAAAwD,mBAEA,IADA,IAAAE,QAAA1D,KAAAb,OAAA/B,SAAA,GACAnL,EAAA,EAAAA,EAAAyR,QAAAC,SAAAzR,OAAAD,KAEA,IAAAP,KAAAmG,KAAAY,MAAAmB,aAAA8J,QAAAC,SAAA1R,KACA+N,KAAAiB,WAAArL,KAAAlE,KAAAsP,UAAA4C,sBAAA9M,aACA6C,UAAA+J,QAAAC,SAAA1R,GACAmL,SAAA4C,KAAAb,OAAA/B,aAaAhI,KAAAyO,SAAA,SAAAhG,OACAmC,KAAAyD,OACAzD,KAAAjD,OAAAc,OAGA,IADA,IAAAiG,sBACA7R,EAAA,EAAAA,EAAA+N,KAAAiB,WAAA/O,OAAAD,IACA,QAAAD,IAAAgO,KAAAiB,WAAAhP,SAAAD,IAAAgO,KAAAiB,WAAAhP,GAAA4R,SAAA,CACA,QAAA7R,IAAA8R,mBAAA9D,KAAAiB,WAAAhP,GAAA6H,MAEA,UAEA,IAAAkG,KAAAiB,WAAAhP,GAAA4R,YACA7D,KAAAwD,gBAAA5N,KAAAoK,KAAAiB,WAAAhP,IAEA6R,mBAAA9D,KAAAiB,WAAAhP,GAAA6H,OAAA,EAgBA,OAbA,IAAAkG,KAAA+D,WACA/D,KAAAN,aACA1N,IAAA6L,OACAA,MAAAC,oBAIA,IAAA1I,KAAA+J,OAAAoE,aAEAvD,KAAAgE,gBAEAhE,KAAAH,MAAAhC,QAEAmC,KAAAwD,iBAGApO,KAAA4O,cAAA,WACA,IAAAC,QAAApL,OAAA,qBAAAmH,KAAAb,OAAA/B,UACAvE,OAAAoL,SAAAjK,KAAA,SAAArD,MAAAsD,MACA,IAAAiK,WAAArL,OAAAoB,WACAjI,IAAAkS,WAAApL,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAyE,mBACAqB,WAAAjL,IAAAiL,WAAApL,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAyE,sBASAzN,KAAA2O,QAAA,WACA,OAAA,IAAA/D,KAAAwD,gBAAAtR,QAGAkD,KAAA2H,OAAA,SAAAc,OACA,GAAA,OAAAmC,KAAAb,OAAApC,OAAA,CACA,IAAAmD,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAApC,QACA,QAAA/K,IAAAkO,SAIA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsP,UAAAlJ,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAApC,SAHAmD,SAAAzN,MAAA,MAAAuN,KAAAb,OAAA/B,SAAAS,UAQAzI,KAAAsK,MAAA,WACA,IAAAQ,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAAO,OACA,QAAA1N,IAAAkO,SAIA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsP,UAAAlJ,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAAO,QAHAQ,SAAAzN,MAAA,MAAAuN,KAAAb,OAAA/B,SAAA4C,KAAAwD,mBAOApO,KAAAyK,MAAA,SAAAhC,OACA,GAAA,OAAAmC,KAAAb,OAAAU,MAAA,CACA,IAAAK,SAAAxO,KAAA+B,eAAAuM,KAAAb,OAAAU,OACA,QAAA7N,IAAAkO,SAIA,MAAAxO,KAAAwH,OAAAiC,OAAAzJ,KAAAsP,UAAAlJ,MAAAK,SAAA6G,kBAAAgB,KAAAb,OAAAU,QAHAK,SAAAzN,MAAA,MAAAuN,KAAAb,OAAA/B,SAAAS,WAUAnM,KAAAC,UAAA,wCAoBAD,KAAAsP,UAAA4C,sBAAA9M,YAAA,SAAAoI,SAEA9J,KAAA+J,UACAzN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SAGA,IAAA,IAAAxN,KAAAmG,KAAAY,MAAAmB,aAFAxE,KAEA+J,OAAAxF,WACA,OAAA,KAIA,OAFAd,OALAzD,KAKA+J,OAAAxF,WAAAX,KAAA,SAIA,IAAA,kBAGA,IAAA,aACA,OAAA,IAAAtH,KAAAsP,UAAAmD,gBAAA/O,KAAA+J,QAEA,IAAA,QACA,QAAAnN,IAAA6G,OAAAzD,KAAA+J,OAAAxF,WAAAb,KAAA,QACA,OAAA,IAAApH,KAAAsP,UAAAoD,gBACAC,WAAA3S,KAAAmG,KAAAY,MAAAoB,cAAAhB,OAAAzD,KAAA+J,OAAAxF,WAAAb,KAAA,QAAA1D,KAAA+J,OAAA/B,YAGA,MAEA,IAAA,WACA,QAAApL,IAAA6G,OAAAzD,KAAA+J,OAAAxF,WAAAb,KAAA,QACA,OAAA,IAAApH,KAAAsP,UAAAsD,mBACAD,WAAA3S,KAAAmG,KAAAY,MAAAoB,cAAAhB,OAAAzD,KAAA+J,OAAAxF,WAAAb,KAAA,QAAA1D,KAAA+J,OAAA/B,YAGA,MAEA,QACA,OAAA,IAAA1L,KAAAsP,UAAAuD,cAAAnP,KAAA+J,UAuBAzN,KAAAsP,UAAAwD,mBAAA,SAAAtF,SAEA,GAAA9J,KAAA9B,cAAA5B,KAAAsP,UAAAwD,mBACA,MAAA9S,KAAAsP,UAAAlJ,MAAAK,SAAA,wBAIA/C,KAAA+J,QACAiC,QAAAvI,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAArC,UAAA,GACA0I,WAAA5L,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA0D,cAAA,IAEApQ,KAAAsC,MAAAoB,KAAA+J,OAAAD,SAEA9J,KAAA8B,KAAA2B,OAAAqG,QAAAvF,WACAvE,KAAAgM,QAAAhM,KAAA+J,OAAAiC,QACAhM,KAAA0E,KAAA,QAEA9H,IAAAoD,KAAA8B,KAAA4B,KAAA,QACA1D,KAAA0E,KAAA1E,KAAA8B,KAAA4B,KAAA,aAEA9G,IAAAoD,KAAA8B,KAAA4B,KAAA,QACA1D,KAAA0E,KAAA1E,KAAA8B,KAAA4B,KAAA,OASA1D,KAAA2O,QAAA,aAGA3O,KAAAsP,YAAA,WACAtP,KAAA8B,KAAA2F,SAAAzH,KAAA+J,OAAAsF,YAEArP,KAAA8B,KAAA4B,KAAA,QAAA1D,KAAAgM,UAGAhM,KAAAuP,UAAA,WACAvP,KAAA8B,KAAAsK,YAAApM,KAAA+J,OAAAsF,YACArP,KAAA8B,KAAA0N,WAAA,UAOAxP,KAAAyO,SAAA,WAEA,OAAA,IAAAzO,KAAA8B,KAAA8B,KAAA,aACA5D,KAAAuP,aACA,IAEA,IAAAvP,KAAA2O,WACA3O,KAAAsP,eACA,IAGAtP,KAAAuP,aACA,KAkCAjT,KAAAsP,UAAAuD,cAAA,SAAArF,SAmBA,GAhBA9J,KAAA+J,QACA0F,SAAAhM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA2D,UACA3G,QAAAvC,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA4D,SACA8C,UAAAjM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA6D,YACA8C,UAAAlM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA8D,YACA8C,UAAAnM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA+D,YACA8C,UAAApM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAgE,YACA8C,YAAArM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAiE,eAAA3Q,KAAAsP,UAAAlJ,MAAA6J,qBACAwD,QAAAtM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAkE,UACA8C,QAAAvM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAmE,UACA8C,QAAAxM,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAoE,WAGA9Q,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACAxN,KAAAW,OAAAX,KAAAsP,UAAAwD,mBAAApP,MAAAA,KAAA+J,cAEAnN,IAAAoD,KAAA+J,OAAA0F,SACA,IAEAzP,KAAA+J,OAAA0F,SAAAnK,KAAAI,MAAA1F,KAAA+J,OAAA0F,UAEA,MAAAS,IAMA,IAAAtF,KAAA5K,KAGA,GADA4K,KAAA9I,KAAA2B,OAAAqG,QAAAvF,WACA,IAAAqG,KAAA9I,KAAAhF,OACA,MAAAR,KAAAsP,UAAAlJ,MAAAK,SAAA,cAEA6H,KAAAlN,KAAA,OAGAsC,KAAAiM,SAAA,WAEA,IACArB,KAAA9I,KAAAqO,QACAvF,KAAA9I,KAAAsO,SAEA,MAAAF,MAOAlQ,KAAAqQ,QAAA,WACA,MAAA,KAAAzF,KAAA9I,KAAA+B,OAMA7D,KAAAsQ,WAAA,WACA,IAAAC,YAAAvQ,KAAA+J,OAAA0F,SACA,IAAA,IAAAc,YACA,OAAA,EAEA,IAAA,IAAAA,YACA,OAAA,EAGA,IAAAC,kBAAAlU,KAAA+B,eAAAkS,aACA,QAAA3T,IAAA4T,kBACA,OAAAA,kBAAAnT,MAAA,MAAAuN,KAAA9I,OAGA,MAAAxF,KAAAwH,OAAAiC,OAAAzJ,KAAAsP,UAAAlJ,MAAAK,SAAA6G,kBAAA2G,eAUAvQ,KAAA2O,QAAA,WACA,GAAA/D,KAAAyF,UACA,OAAA,IAAAzF,KAAA0F,aASA,IAAA,IAAAG,QAAAnU,KAAAsP,UAAA8E,MAEA,QAAA9T,IAAAgO,KAAA9I,KAAA4B,KAAApH,KAAAsP,UAAAlJ,MAAA4J,YAAAmE,QAEA,IAAAnU,KAAAsP,UAAA8E,MAAAD,MAAApT,MAAA,MAAAuN,KAAA9I,KAAA8I,OACA,OAAA,EAKA,OAAA,IAsBAtO,KAAAsP,UAAAmD,gBAAA,SAAAjF,SAGA9J,KAAA+J,QACA4G,aAAAlN,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAuE,eACAqD,aAAAnN,OAAAqG,QAAAvF,WAAAb,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAwE,gBAGAlR,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACAxN,KAAAW,OAAAX,KAAAsP,UAAAwD,mBAAApP,MAAAA,KAAA+J,SAGA,IAAAa,KAAA5K,KAGA,GAFA4K,KAAAlN,KAAA,SACAkN,KAAA9I,KAAA2B,OAAAqG,QAAAvF,WACA,IAAAqG,KAAA9I,KAAAhF,OACA,MAAAR,KAAAsP,UAAAlJ,MAAAK,SAAA,cAIA,QAAAnG,IAAAgO,KAAAb,OAAA4G,eAAAlN,OAAAoN,UAAAjG,KAAAb,OAAA4G,cACA,MAAArU,KAAAsP,UAAAlJ,MAAAK,SAAA,wBAKA,IAAA+N,aAAAlG,KAAA9I,KAAA8B,KAAA,kBACA,IAAAkN,eACAA,aAAA,GAEAA,aAAAnG,SAAAmG,aAAA,IAQA9Q,KAAA2O,QAAA,WAEA,OAAAmC,eAAAnG,SAAAC,KAAAb,OAAA4G,aAAA,KAIA/F,KAAA9I,KAAA+B,QAAA+G,KAAAb,OAAA6G,eA4BAtU,KAAAsP,UAAAmF,mBAAA,SAAAjH,SAEA,GAAA9J,KAAA9B,cAAA5B,KAAAsP,UAAAmF,mBACA,MAAAzU,KAAAsP,UAAAlJ,MAAAK,SAAA,yBAGA/C,KAAA+J,UACAzN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACA9J,KAAAiP,WAAAjP,KAAA+J,OAAAkF,WACAjP,KAAA0E,KAAAjB,OAAAzD,KAAA+J,OAAAkF,YAAAvL,KAAA,QACA1D,KAAAgM,QAAA,GACAhM,KAAAqP,WAAA,GAGA,IAAA,IAAAxS,EAAA,EAAAA,EAAAmD,KAAAiP,WAAAnS,OAAAD,IAAA,CACA,IAAAmU,MAAAvN,OAAAzD,KAAAiP,WAAApS,SACAD,IAAAoU,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAArC,WACA3G,KAAAgM,QAAAgF,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAArC,eAEA/J,IAAAoU,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA0D,eACA1M,KAAAqP,WAAA2B,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA0D,cAUA1M,KAAA2O,QAAA,aAGA3O,KAAAsP,YAAA,WAEA,GAAA,KAAAtP,KAAAqP,WACA,IAAA,IAAAxS,EAAA,EAAAA,EAAAmD,KAAAiP,WAAAnS,OAAAD,IAAA,CACA,IAAAmU,MAAAvN,OAAAzD,KAAAiP,WAAApS,IACAmU,MAAAvJ,SAAAzH,KAAAqP,YACA2B,MAAAtN,KAAA,QAAA1D,KAAAgM,WAKAhM,KAAAuP,UAAA,WACA,GAAA,KAAAvP,KAAAqP,WACA,IAAA,IAAAxS,EAAA,EAAAA,EAAAmD,KAAAiP,WAAAnS,OAAAD,IAAA,CACA,IAAAmU,MAAAvN,OAAAzD,KAAAiP,WAAApS,IACAmU,MAAA5E,YAAApM,KAAAqP,YACA2B,MAAAxB,WAAA,WASAxP,KAAAyO,SAAA,WACA,OAAA,IAAAzO,KAAA2O,WACA3O,KAAAuP,aACA,IAGAvP,KAAAsP,eACA,KAsBAhT,KAAAsP,UAAAoD,eAAA,SAAAlF,SAEA9J,KAAA+J,UACAzN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACAxN,KAAAW,OAAAX,KAAAsP,UAAAmF,mBAAA/Q,MAAAA,KAAA+J,SACA/J,KAAAtC,KAAA,QAMAsC,KAAAsQ,WAAA,WAIA,IAHA,IAAAW,cAAA,EACAC,WAAAlR,KAAAiP,WAEApS,EAAA,EAAAA,EAAAqU,WAAApU,OAAAD,IAAA,CACA,IAAAmU,MAAAvN,OAAAyN,WAAArU,KACA,IAAAmU,MAAApN,KAAA,aACAoN,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA2D,YACAsE,aAAAD,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAA2D,WAIA,OAAAsE,cASAjR,KAAA2O,QAAA,WACA,GAAA,SAAA3O,KAAAsQ,aAAA,CAEA,IADA,IAAAY,WAAAlR,KAAAiP,WACApS,EAAA,EAAAA,EAAAqU,WAAApU,OAAAD,IAAA,CAGA,IAAA,IAFA4G,OAAAyN,WAAArU,IAEA+G,KAAA,WACA,OAAA,EAGA,OAAA,EAEA,OAAA,IAsBAtH,KAAAsP,UAAAsD,kBAAA,SAAApF,SAEA9J,KAAA+J,UACAzN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACAxN,KAAAW,OAAAX,KAAAsP,UAAAmF,mBAAA/Q,MAAAA,KAAA+J,SACA/J,KAAAtC,KAAA,WACAsC,KAAAmR,WAAA,EACAnR,KAAAoR,WAAApR,KAAA+J,OAAAkF,WAAAnS,OAGA,IAAA,IAAAD,EAAA,EAAAA,EAAAmD,KAAAiP,WAAAnS,OAAAD,IAAA,CACA,IAAAmU,MAAAvN,OAAAzD,KAAAiP,WAAApS,KACA,IAAAmU,MAAApN,KAAA,mBACAhH,IAAAoU,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAqE,eACArN,KAAAmR,WAAAH,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAqE,mBAEAzQ,IAAAoU,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAsE,eACAtN,KAAAoR,WAAAJ,MAAAtN,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAsE,eAUAtN,KAAA2O,QAAA,WAGA,IAFA,IAAA0C,aAAA,EACAH,WAAAlR,KAAAiP,WACApS,EAAA,EAAAA,EAAAqU,WAAApU,OAAAD,IAAA,CAEA,IAAAmU,MAAAvN,OAAAzD,KAAAiP,WAAApS,KACA,IAAAmU,MAAApN,KAAA,cACA,IAAAoN,MAAApN,KAAA,YACAyN,eAIA,OAAAA,cAAArR,KAAAmR,YAAAE,cAAArR,KAAAoR,aAOA9U,KAAAC,UAAA,wBAOAD,KAAAsP,UAAA8E,MAAAY,MAAA,SAAA/M,UAAAqH,WACA,IAAAjI,WAAAY,UAAAV,MACA0N,YAAA,IAAA5N,WAAA6N,QAAA,KACAC,YAAA,IAAA9N,WAAA6N,QAAA,KACA,OAAA,IAAAD,aAAA,IAAAE,YAYAnV,KAAAsP,UAAA8E,MAAAT,QAAA,SAAA1L,UAAAqH,WACA,IAAA8F,gBAAAjO,OAAA,IAAAmI,UAAA7B,OAAAkG,SACA,GAAA,IAAAyB,gBAAA5U,OACA,MAAAR,KAAAwH,OAAAiC,OAAAzJ,KAAAsP,UAAAlJ,MAAAK,SAAAiL,wBAAApC,UAAA7B,OAAAkG,UAEA,OAAA1L,UAAAV,QAAA6N,gBAAA7N,OAQAvH,KAAAsP,UAAA8E,MAAAZ,YAAA,SAAAvL,UAAAqH,WAEA,OAAA,OADAtP,KAAAsP,UAAA+F,aAAApN,UAAAV,MAAA+H,UAAA7B,OAAA+F,cAYAxT,KAAAsP,UAAA8E,MAAAV,QAAA,SAAAzL,UAAAqH,WACA,IAAA5F,QAAA4F,UAAA7B,OAAA+F,YACA8B,UAAAtV,KAAAsP,UAAA+F,aAAApN,UAAAV,MAAAmC,SACA6L,QAAAvV,KAAAsP,UAAA+F,aAAA/F,UAAA7B,OAAAiG,QAAAhK,SACA,OAAA,OAAA4L,WAAA,OAAAC,SACAD,WAAAC,SAUAvV,KAAAsP,UAAA8E,MAAAX,QAAA,SAAAxL,UAAAqH,WACA,IAAA5F,QAAA4F,UAAA7B,OAAA+F,YACA8B,UAAAtV,KAAAsP,UAAA+F,aAAApN,UAAAV,MAAAmC,SACA8L,QAAAxV,KAAAsP,UAAA+F,aAAA/F,UAAA7B,OAAAgG,QAAA/J,SACA,OAAA,OAAA4L,WAAA,OAAAE,SACAF,WAAAE,SAUAxV,KAAAsP,UAAA8E,MAAAf,UAAA,SAAApL,UAAAqH,WACA,QAAArH,UAAAV,MAAA/G,OAAA8O,UAAA7B,OAAA4F,YAWArT,KAAAsP,UAAA8E,MAAAhB,UAAA,SAAAnL,UAAAqH,WACA,QAAArH,UAAAV,MAAA/G,OAAA8O,UAAA7B,OAAA2F,YAWApT,KAAAsP,UAAA8E,MAAAb,UAAA,SAAAtL,UAAAqH,WACA,OAAA,IAAAnI,OAAAoN,UAAAtM,UAAAV,QAGAkO,WAAAxN,UAAAV,QAAAkO,WAAAnG,UAAA7B,OAAA8F,YAWAvT,KAAAsP,UAAA8E,MAAAd,UAAA,SAAArL,UAAAqH,WACA,OAAA,IAAAnI,OAAAoN,UAAAtM,UAAAV,QAGAkO,WAAAxN,UAAAV,QAAAkO,WAAAnG,UAAA7B,OAAA6F,YAYAtT,KAAAsP,UAAA8E,MAAA1K,QAAA,SAAAzB,UAAAqH,WACA,IAAAoG,UAAA1V,KAAAsP,UAAAqG,SAAArG,UAAA7B,OAAA/D,SACA,QAAApJ,IAAAoV,UACA,OAAAA,UAAAvL,KAAAlC,UAAAV,OAIA,MAAAvH,KAAAwH,OAAAiC,OAAAzJ,KAAAsP,UAAAlJ,MAAAK,SAAA+K,mBAAAlC,UAAA7B,OAAA/D,WAMA1J,KAAAC,UAAA,2BAEAD,KAAAsP,UAAAqG,SAAAC,YAAA,IAAAtM,OAAA,eACAtJ,KAAAsP,UAAAqG,SAAAE,aAAA,IAAAvM,OAAA,UACAtJ,KAAAsP,UAAAqG,SAAAG,QAAA,IAAAxM,OAAA,mBACAtJ,KAAAsP,UAAAqG,SAAAI,gBAAA,IAAAzM,OAAA,aACAtJ,KAAAsP,UAAAqG,SAAAK,OAAA,IAAA1M,OAAA,uDACAtJ,KAAAsP,UAAAqG,SAAAM,aAAA,IAAA3M,OAAA,6BACAtJ,KAAAsP,UAAAqG,SAAAO,aAAA,IAAA5M,OAAA,kCACAtJ,KAAAsP,UAAAqG,SAAAQ,aAAA,IAAA7M,OAAA,6BACAtJ,KAAAsP,UAAAqG,SAAAS,SAAA,IAAA9M,OAAA,qBACAtJ,KAAAsP,UAAAqG,SAAAU,KAAA,IAAA/M,OAAA,mCAIAtJ,KAAAC,UAAA,4BAaAD,KAAAsP,UAAAgH,kBAAA,SAAAC,IAAAC,KAAAC,MAAAC,IAAAC,WACA,IAAAC,WAMA,OALAA,QAAAL,IAAA,IAAAjN,OAAAiN,KACAK,QAAAC,EAAAL,KACAI,QAAAE,EAAAL,MACAG,QAAAG,EAAAL,IACAE,QAAAI,EAAAL,UACAC,SAUA5W,KAAAsP,UAAA+F,aAAA,SAAA4B,QAAAC,aACA,IAAAC,YAAAnX,KAAAsP,UAAA8H,UAAAF,aACA,QAAA5W,IAAA6W,YAAA,CAGA,IAAAA,YAAAZ,IAAApM,KAAA8M,SACA,OAAA,KAKA,IAAAI,SAAAJ,QAAA5W,MAAA8W,YAAAH,GAEAM,SAAA,IAAAC,KAAAF,SAAAF,YAAAN,GAAAQ,SAAAF,YAAAL,GAAA,EAAAO,SAAAF,YAAAJ,IAEAS,YAAAF,SAAAG,gBAAApJ,SAAAgJ,SAAAF,YAAAN,GAAA,IACAa,aAAAJ,SAAAK,aAAAtJ,SAAAgJ,SAAAF,YAAAL,GAAA,EAAA,IACAc,WAAAN,SAAAO,YAAAxJ,SAAAgJ,SAAAF,YAAAJ,GAAA,IACA,OAAA,IAAAS,cAAA,IAAAE,eAAA,IAAAE,WACAN,SAEA,KAEA,OAAA,MAGAtX,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,0CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,cAAApX,KAAAsP,UAAAgH,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAtW,KAAAsP,UAAA8H,UAAA,YAAApX,KAAAsP,UAAAgH,kBAAA,2CAAA,EAAA,EAAA,EAAA,KAMAtW,KAAAsP,UAAAH,UAAA,SAAA9J,eACA/E,IAAA+E,WACAA,SAAA8B,OAAA,SAEA9B,SAAAgD,KAAArI,KAAAsP,UAAAlJ,MAAAmG,eAAAjE,KAAA,SAAArD,MAAAsD,MACA,IAAAmD,SAAAvE,OAAAoB,MAEA,SAAAmD,SAAAtE,KAAApH,KAAAsP,UAAAlJ,MAAAsG,kBAAAwD,WACAxE,SAAA0D,OAAA,SAAAjD,OACA,IAAAnM,KAAAsP,UAAAsC,eACAlG,SAAAA,WAEAyG,SAAAhG,YAQAnM,KAAAC,UAAA,sBAeAD,KAAAsP,UAAAwI,IAAAC,aAAA,SAAAvK,SACA,IAAAwK,cAAA,IAAAhY,KAAAsP,UAAAsC,cAAApE,SAEA,OADAwK,cAAA7F,WACA6F,cAAA3F,WAiBArS,KAAAsP,UAAAwI,IAAAG,cAAA,SAAAzK,SACA,IAAA,IAAAxN,KAAAmG,KAAAY,MAAAmB,aAAAsF,QAAAvF,WACA,MAAAjI,KAAAsP,UAAAlJ,MAAAK,SAAA,6BAGAnG,IAAAkN,QAAAQ,QACAR,QAAAQ,MAAAhO,KAAAsP,UAAAlJ,MAAAmH,SAAAoE,YAEA,IAAAG,mBACAoG,eAAAlY,KAAAsP,UAAA4C,sBAAA9M,YAAAoI,SAEA,GADA0K,eAAA/F,SAAA,OACA,IAAA+F,eAAA7F,UAAA,CACA,IAAA7D,SAAAxO,KAAA+B,eAAAyL,QAAAQ,OACA8D,gBAAA5N,KAAAgU,gBACA1J,SAAAhB,QAAAvF,UAAA6J,iBAEA,OAAAoG,eAAA7F,WAgBArS,KAAAsP,UAAAwI,IAAAK,eAAA,SAAA3K,SAEAA,QAAAQ,QACAR,QAAAQ,MAAAhO,KAAAsP,UAAAlJ,MAAAmH,SAAAoE,YAMA,IAJA,IAAApC,cACA6C,sBACAN,mBAEAvR,EAAA,EAAAA,EAAAiN,QAAA1G,OAAAtG,OAAAD,KAEA,IAAAP,KAAAmG,KAAAY,MAAAmB,aAAAsF,QAAA1G,OAAAvG,KACAgP,WAAArL,KAAAlE,KAAAsP,UAAA4C,sBAAA9M,aACA6C,UAAAuF,QAAA1G,OAAAvG,MAIA,IAAA,IAAAuH,EAAA,EAAAA,EAAAyH,WAAA/O,OAAAsH,IAEA,GAAAyH,WAAAzH,IAAAyH,WAAAzH,GAAAqK,SAAA,CACA,QAAA7R,IAAA8R,mBAAA7C,WAAAzH,GAAAM,MAEA,UAEA,IAAAmH,WAAAzH,GAAAqK,YACAL,gBAAA5N,KAAAqL,WAAAzH,IAEAsK,mBAAA7C,WAAAzH,GAAAM,OAAA,EAGA0J,gBAAAtR,OAAA,GACAR,KAAA+B,eAAAyL,QAAAQ,OACAjN,MAAA,MAAAyM,QAAA9B,SAAAoG,kBAEA,OAAA,IAAAA,gBAAAtR,QAgBAR,KAAAsP,UAAAwI,IAAAM,oBAAA,SAAA5K,SACA,IAAA1G,OAAA9G,KAAAmG,KAAAY,MAAAC,eAAAwG,QAAAnI,UACA,OAAArF,KAAAsP,UAAAwI,IAAAK,gBACArR,OAAAA,OACAkH,MAAAR,QAAAQ,SAIA7G,OAAArB,UAAAuJ,MAAA,WACArP,KAAAsP,UAAAH,cAjuCA,GCDA,oBAAA,KACA,KAAA,+BASA,WACA,aAEAnP,KAAAC,UAAA,aAGAD,KAAA8O,KAAAuJ,sBAEArY,KAAA8O,KAAA1I,OACAkS,WAAA,OAAA,SAAA,UACAC,QACAC,oBAAA,oBACAC,aAAA,cACAC,YAAA,aACAC,aAAA,cACAC,gBAAA,gBACAC,cAAA,eACAC,UAAA,YAEA1V,gBACA2V,gBAAA,iEACAC,yBAAA,oDACAC,sBAAA,oJACAC,0BAAA,sDACAC,uBAAA,+IACAC,cAAA,oEAEAC,OAAA,YACAC,cAAA,UACAC,YAAA,KASAvZ,KAAA8O,KAAA0K,cAAA,SAAAC,MACA,YAAAnZ,IAAAN,KAAA8O,KAAAuJ,mBAAAoB,MACAzZ,KAAA8O,KAAAuJ,mBAAAoB,MAEA,MASAzZ,KAAA8O,KAAA4K,cAAA,SAAAD,KAAAE,YACA,GAAA,OAAA3Z,KAAA8O,KAAA0K,cAAAC,MACA,MAAAzZ,KAAAwH,OAAAiC,OAAAzJ,KAAA8O,KAAA1I,MAAAhD,eAAA2V,iBAAAU,OAEAzZ,KAAA8O,KAAAuJ,mBAAAoB,MAAAE,YAOA3Z,KAAA8O,KAAA8K,OACA3M,MAAA,QACA4M,QAAA,UACAC,MAAA,SAGA9Z,KAAAC,UAAA,mBAiBAD,KAAA8O,KAAA/H,MAAAgT,yBAAA,SAAAC,OACA,GAAA,OAAAA,QAAA,IAAAha,KAAA8O,KAAA/H,MAAAkT,aAAAD,OACA,MAAAha,KAAAwH,OAAAiC,OAAAzJ,KAAA8O,KAAA1I,MAAAhD,eAAAgW,eAAAY,QAEA,OACAA,MAAAA,MACAE,aAAAF,QAAAha,KAAA8O,KAAA8K,MAAA3M,MACAkN,eAAAH,QAAAha,KAAA8O,KAAA8K,MAAAC,QACAO,aAAAJ,QAAAha,KAAA8O,KAAA8K,MAAAE,QAaA9Z,KAAA8O,KAAA/H,MAAAxB,OAAA,SAAA8U,KAAA9U,OAAA+U,SACA,IAAA,IAAAta,KAAAmB,WAAAoE,QACA,MAAAvF,KAAA8O,KAAA1I,MAAAhD,eAAA,yBAGA,IADA,IAAAmX,WACAha,EAAA,EAAAA,EAAA8Z,KAAA7Z,OAAAD,IAAA,CACA,IAAAia,YAAAjV,OAAA8U,KAAA9Z,GAAAA,EAAA+Z,SAEA,GAAA,OAAAE,YAAA,CAIA,IAAA,IAAAxa,KAAAqB,cAAAmZ,aACA,MAAAxa,KAAA8O,KAAA1I,MAAAhD,eAAA,sBAGAmX,QAAArW,KAAAsW,cAEA,OAAAD,SAUAva,KAAA8O,KAAA/H,MAAA0T,OAAA,SAAAJ,KAAAK,UAAAJ,SACA,IAAA,IAAAta,KAAAmB,WAAAuZ,WACA,MAAA1a,KAAA8O,KAAA1I,MAAAhD,eAAA,uBAEA,IAAA,IAAA7C,EAAA,EAAAA,EAAA8Z,KAAA7Z,OAAAD,IAAA,CACA,IAAAoa,aAAAD,UAAAL,KAAA9Z,GAAAA,EAAA+Z,SACA,IAAA,IAAAta,KAAAqB,cAAAsZ,cACA,MAAA3a,KAAA8O,KAAA1I,MAAAhD,eAAA,yBAUApD,KAAA8O,KAAA/H,MAAAkT,aAAA,SAAAD,OACA,IAAA,IAAAY,OAAA5a,KAAA8O,KAAA8K,MACA,GAAA5Z,KAAA8O,KAAA8K,MAAAgB,OAAAZ,MACA,OAAA,EAGA,OAAA,GA7JA,GAmKA,WACA,aAgHA,SAAAa,aAAArV,MACA,IAAAsV,MAAAtV,KAAAuV,WAAA,GAEA,GAAA,IAAAD,MAAAE,UAAA,IAAAF,MAAAE,SACA,OAAAF,MAAAhM,KASA,SAAAmM,YAAAzV,MACA,IAAAsV,MAAAtV,KAAAuV,WAAA,GACA,OAAA,OAAAD,OAAA,OAAAA,MAAAI,cAAA,IAAAJ,MAAAE,UAAA,IAAAF,MAAAE,UA7HAhb,KAAAC,UAAA,iBAEAD,KAAA8O,KAAAqM,IAAAC,UAAA,kBACApb,KAAA8O,KAAAqM,IAAAE,iBAAA,IACArb,KAAA8O,KAAAqM,IAAAG,iBAAA,yBASAtb,KAAA8O,KAAAqM,IAAAI,cAAA,SAAA/V,KAAAxD,MACA,IAAAwZ,YAEA,QAAAlb,IAAAP,OAAA0b,cAAA,CAIA,IAHA,IAAAC,cAAAlW,KAAAmW,YAAA3Z,MAGAzB,EAAA,EAAAA,EAAAmb,cAAAlb,OAAAD,IACAib,SAAAtX,KAAAwX,cAAAnb,IAEA,OAAAib,SAOA,IAJA,IACAI,QADA,IAAAC,gBACAC,SAAA9Z,KAAAwD,KAAA,KAAAuW,YAAAC,2BAAA,MACAC,YAAAL,OAAAM,cAEA,OAAAD,aACAT,SAAAtX,KAAA+X,aACAA,YAAAL,OAAAM,cAEA,OAAAV,UASAxb,KAAA8O,KAAAqM,IAAAgB,WAAA,SAAA3W,MACA,IAAAvE,OAGA,OAQA,SAAAuE,KAAAvE,KACA,GAAA,OAAAuE,KAAA4W,iBAAA9b,IAAAkF,KAAA4W,WACA,OAEA,IAAA,IAAA7b,EAAA,EAAAA,EAAAiF,KAAA4W,WAAA5b,OAAAD,IAAA,CACA,IAAA6G,KAAA5B,KAAA4W,WAAA7b,GACAU,IAAAjB,KAAA8O,KAAAqM,IAAAE,iBAAAjU,KAAAgB,MAAAhB,KAAAzE,OAhBA0Z,CAAA7W,KAAAvE,KAyBA,SAAAuE,KAAAvE,KACA,IAAA,IAAAV,EAAA,EAAAA,EAAAiF,KAAAuV,WAAAva,OAAAD,IAAA,CACA,IAAAua,MAAAtV,KAAAuV,WAAAxa,GAEA,GAAA,IAAAua,MAAAE,SAAA,CACA,IAAAha,SAAA,EACAsb,QAAAxB,MAAAyB,SAEA,QAAAjc,IAAAW,IAAAqb,SAAA,CAEA,GAAArb,IAAAqb,SAAA1a,cAAAV,MAAA,CACA,IAAAsb,SAAAvb,IAAAqb,SACArb,IAAAqb,YACArb,IAAAqb,SAAApY,KAAAsY,UAEAxb,SAAA,EAGA,IAAA,IAAAia,YAAAH,OAEA7Z,IAAA6Z,MAAAyB,UAAA1B,aAAAC,WAEA,CACA,IAAA2B,SAAAzc,KAAA8O,KAAAqM,IAAAgB,WAAArB,QACA,IAAA9Z,QACAC,IAAAqb,SAAApY,KAAAuY,UAGAxb,IAAAqb,SAAAG,YApDAC,CAAAlX,KAAAvE,KACAA,KAyFAjB,KAAA8O,KAAAqM,IAAAwB,aAAA,SAAAnX,MAEA,YAAAlF,IAAAP,OAAA0b,cACAjW,KAAA2V,KAGA,IAAAyB,eACAC,kBAAArX,KAAAxF,KAAA8O,KAAAqM,IAAAC,YASApb,KAAA8O,KAAAqM,IAAA2B,gBAAA,SAAAC,QAGA,QAAAzc,IAAAP,OAAA0b,cAAA,CACA,IAAAuB,UAAA,IAAAvB,cAAAzb,KAAA8O,KAAAqM,IAAAG,kBAGA,OAFA0B,UAAAC,OAAA,EACAD,UAAAE,QAAAH,QACAC,UAKA,OAFA,IAAAG,WACAL,gBAAAC,OAAA/c,KAAA8O,KAAAqM,IAAAC,YAtKA,GA4KA,WACA,aAiEApb,KAAA8O,KAAAsO,QAAA,SAAA5P,SAEA,IAAApH,sBAEAiX,iBAAA,wDACAC,uBAAA,2CACAC,4BAAA,wEACAvE,yBAAA,kEACAwE,kBAAA,0GACAC,wBAAA,4HACAC,sBAAA,iFACAC,yBAAA,wCACAC,4BAAA,6DACAC,qBAAA,uFACAC,mBAAA,6EACA1E,cAAA,wCAIA,QAAA9Y,IAAAkN,QAAAiM,KACA,MAAArT,qBAAA,uBAEA,QAAA9F,IAAAkN,QAAAkN,YAAA,IAAA1a,KAAAmB,WAAAqM,QAAAkN,WACA,MAAAtU,qBAAA,4BAEA,QAAA9F,IAAAkN,QAAAjI,SAAA,IAAAvF,KAAAmB,WAAAqM,QAAAjI,QACA,MAAAa,qBAAA,yBAEApG,KAAAW,OAAAX,KAAAyD,SAAAC,MAGA,IAAA4K,KAAA5K,KAEAA,KAAA+V,KAAAjM,QAAAiM,KAGA/V,KAAAqa,WAGAra,KAAAsa,eAGAta,KAAAgX,UAAA,UACApa,IAAAkN,QAAAkN,YACAhX,KAAAgX,UAAAlN,QAAAkN,WAIAhX,KAAAua,gBAAA,KAGAva,KAAA6B,OAAA,KAGA7B,KAAAsW,MAAA,KAEAtW,KAAAwa,aAAA,KACAxa,KAAAya,eACAza,KAAA0a,mBACA1a,KAAA2a,cAAA,GAEAre,KAAA8O,KAAA4K,cAAAhW,KAAA+V,KAAA/V,MAIA,IAMA4a,YAAA,YACA,IAAAC,cACAjQ,KAAA2P,gBAAAje,KAAA8O,KAAA/H,MAAAxB,OAAA+I,KAAAyP,QAAAzP,KAAA/I,OAAA+I,MACAA,KAAAkQ,oBAUAD,UAAA,WACA,OAAA,OAAAjQ,KAAA/I,QAGAkZ,aAAA,WACA,OAAA,OAAAnQ,KAAAoM,WAGAgE,UAAA,WACA,OAAA,IAAAH,YACAjQ,KAAA2P,gBAEA3P,KAAAyP,SAUAra,KAAAib,YAAA,WACAjb,KAAA6B,OAAA,KACA7B,KAAAua,gBAAA,KACAva,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QAaAA,KAAAkb,OAAA,SAAArZ,QACA,QAAAjF,IAAAiF,OAzDA+I,KAAA2P,gBAAA,KACA3P,KAAAyP,WACAzP,KAAA0P,mBA0DA,CACA,IAAA,IAAAhe,KAAAmB,WAAAoE,QACA,MAAAa,qBAAA,yBAGA,IADA,IAAAyY,KAAAnb,KAAAqa,QACAxd,EAAA,EAAAA,EAAAse,KAAAre,OAAAD,IACA,GAAA,OAAAgF,OAAAsZ,KAAAte,GAAAA,EAAAmD,MAAA,CAEA,IAAAob,YAAAD,KAAAte,GACAmD,KAAAqa,QAAA/Y,OAAAzE,EAAA,UACAmD,KAAAsa,YAAAc,YAAA9e,KAAA8O,KAAA1I,MAAAiT,SAGAiF,cAEA5a,KAAA8a,kBACA9a,KAAAqb,SAAA/e,KAAA8O,KAAA8K,MAAAE,OACApW,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QAQAA,KAAAsb,cAAA,SAAAC,YACA,YAAA3e,IAAAoD,KAAAya,YAAAc,YACAvb,KAAAya,YAAAc,YAEA,UAMAvb,KAAAwb,WAAA,WACA,IAAAC,SACAC,SAAA9Q,KAAAwF,SACAuL,YAAA/Q,KAAAgR,mBAEAC,UAAAvf,KAAA8O,KAAA/H,MAAAgT,yBAAAzL,KAAAkR,YAEA,OADAxf,KAAAsC,MAAA6c,QAAAI,WACAJ,SAQAzb,KAAA+b,cAAA,WACA,OAAA/b,KAAAgc,WAAAhc,KAAAic,oBAUAjc,KAAAic,gBAAA,WACA,OAAAjc,KAAAwa,cAOAxa,KAAAkc,mBAAA,WACA,IAAAC,IAAAnc,KAAA+b,gBACA,OAAA/b,KAAAoc,YAAAD,MAQAnc,KAAA4b,gBAAA,WACA,OAAAZ,YAAAle,QAQAkD,KAAAgc,WAAA,SAAAK,OACA,IAAAC,UAAAtc,KAAAsa,YAAA+B,OACA,YAAAzf,IAAA0f,UAEA,MAEA,IAAAzB,aACA,IAAA7a,KAAAua,gBAAA/I,QAAA8K,WACAA,UAEA,KAGAA,WAUAtc,KAAAuc,cAAA,SAAAhb,OACA,IAAAib,WAOA,QAAA5f,KALA4f,YADA,IAAA3B,YACA7a,KAAAua,gBAAAhZ,OAGAvB,KAAAqa,QAAA9Y,QAGA,MAAAmB,qBAAA,4BAEA,OAAA8Z,YAQAxc,KAAAoc,YAAA,SAAAD,KACA,OAAA,IAAAtB,YACA7a,KAAAua,gBAAA/I,QAAA2K,KAEAnc,KAAAqa,QAAA7I,QAAA2K,MAQAnc,KAAAyc,cAAA,WACA,OAAAzc,KAAA0a,iBAAA1a,KAAA0a,gBAAA5d,OAAA,EAAAkD,KAAA0a,gBAAA,GAAA,IAQA1a,KAAA0c,aAAA,WACA,OAAA1c,KAAA2a,cAAA3a,KAAA2a,cAAA,IAOA3a,KAAA8b,SAAA,WACA,OAAA9b,KAAAsW,OAYAtW,KAAA2c,OAAA,SAAAtC,SAEA,IAAAuC,iBACA,IAAA,IAAAtgB,KAAAgB,QAAA+c,SACAuC,cAAAvC,YAEA,CAEA,IAAA,IAAA/d,KAAAqB,cAAA0c,SACA,MAAA3X,qBAAA,kBAEAka,cAAApc,KAAA6Z,SAEA,IAAA,IAAAxd,EAAA,EAAAA,EAAA+f,cAAA9f,OAAAD,IAAA,CAEA,IAAA,IAAAP,KAAAqB,cAAAif,cAAA/f,IACA,MAAA6F,qBAAA,wBAGA,IAAAma,SAAAvgB,KAAA8O,KAAA1I,MAAAkT,cAAA5V,KAAAqa,QAAAvd,OACA8f,cAAA/f,GAAAP,KAAA8O,KAAA1I,MAAAiT,QAAAkH,SACA7c,KAAAsa,YAAAuC,UAAAD,cAAA/f,GACAmD,KAAAqa,QAAA7Z,KAAAoc,cAAA/f,KAjPA,IAAAke,gBACAze,KAAA8O,KAAA/H,MAAA0T,OAAAnM,KAAAyP,QAAAzP,KAAAoM,UAAApM,MAmPAgQ,cACA5a,KAAA8a,kBACA9a,KAAAqb,SAAA/e,KAAA8O,KAAA8K,MAAAE,OACApW,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QAOAA,KAAA8a,gBAAA,WAEA,GAAA,OAAA9a,KAAAwa,cAGA,OADAxa,KAAAgc,WAAAhc,KAAAwa,cAGA,YADAxa,KAAA8c,gBAAA9c,KAAAwa,cAKAxa,KAAA+c,0BAOA/c,KAAA+c,uBAAA,WAEA,IAAA,IAAAlC,YACA,OAAA,OAAA7a,KAAAua,iBAAA,IAAAva,KAAAua,gBAAAzd,YACAkD,KAAA8c,gBAAA,WAKA9c,KAAA8c,gBAAA9c,KAAAua,gBAAA,GAAAje,KAAA8O,KAAA1I,MAAAiT,SAKA3V,KAAAqa,QAAAvd,OAAA,EAEAkD,KAAA8c,gBAAA9c,KAAAqa,QAAA,GAAA/d,KAAA8O,KAAA1I,MAAAiT,SAGA3V,KAAA8c,gBAAA,OAYA9c,KAAAoQ,OAAA,SAAAvO,QACA,QAAAjF,IAAAiF,OACA,OAAAmZ,YAEA,IAAA,IAAA1e,KAAAmB,WAAAoE,QACA,MAAAa,qBAAA,yBAEA,OAAApG,KAAA8O,KAAA/H,MAAAxB,OAAAmZ,YAAAnZ,OAAA+I,OASA5K,KAAAgd,cAAA,SAAAC,YAAAC,aACA,IAAA5gB,KAAAgB,QAAA2f,eACAA,aAAAA,cAEA,IAAA,IAAApgB,EAAA,EAAAA,EAAAogB,YAAAngB,OAAAD,IAAA,CACA,IAAAsgB,QAAAF,YAAApgB,GACA,IAAA,IAAAP,KAAA8O,KAAA1I,MAAAkS,UAAApD,QAAA0L,YACA,MAAA5gB,KAAAwH,OAAAiC,OAAArD,qBAAAiX,kBAAAwD,UAEAnd,KAAAya,YAAA0C,SAAAD,aAaAld,KAAA8c,gBAAA,SAAAT,OAEA,GAAArc,KAAAwa,eAAA6B,MAAA,CAMA,IAAAe,kBACAC,SAAArd,KAAAic,kBACAqB,OAAAtd,KAAAgc,WAAAhc,KAAAwa,cACAA,aAAA6B,MACAkB,WAAAvd,KAAAgc,WAAAK,OACAmB,QAAAxd,MAGA,GAAA,OAAAqc,OAAA,OAAArc,KAAAwa,aAGA,OAFAxa,KAAAwa,aAAA,UACAxa,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAC,oBAAAsI,kBAIA,GAAA,OAAApd,KAAAgc,WAAAK,OACA,MAAA3Z,qBAAA,yBAEA1C,KAAAwa,aAAA6B,MACArc,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAC,oBAAAsI,oBAUApd,KAAAyd,cAAA,SAAAtB,KACA,IAAAuB,aAAA1d,KAAAoc,YAAAD,KACA,IAAA,IAAAuB,aACA,MAAAhb,qBAAA,sBAEA1C,KAAA8c,gBAAAxgB,KAAA8O,KAAA1I,MAAAkT,cAAA8H,eAUA1d,KAAA2d,mBAAA,SAAApc,OACAvB,KAAAyd,cAAAzd,KAAAuc,cAAAhb,SAYAvB,KAAA4d,UAAA,SAAA/b,QACA,IAAA,IAAAvF,KAAAmB,WAAAoE,QACA,MAAAa,qBAAA,yBAEA1C,KAAA6B,OAAAA,OACA+Y,cACA5a,KAAAqb,SAAA/e,KAAA8O,KAAA8K,MAAAE,OACApW,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QASAA,KAAAqb,SAAA,SAAAwC,UACA,IAAA,IAAAvhB,KAAA8O,KAAA/H,MAAAkT,aAAAsH,UACA,MAAAvhB,KAAAwH,OAAAiC,OAAArD,qBAAAgT,eAAAmI,WAEA,IAAAC,SAAA9d,KAAAsW,MACAtW,KAAAsW,MAAAuH,SAGA,IAAAT,kBACAU,SAAAA,SACAC,aAAA/d,KAAAsW,MACAkH,QAAAxd,MAGAA,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAM,cAAAiI,mBAWApd,KAAAge,KAAA,SAAAf,YAAAgB,WAIA,QAAArhB,IAAAqgB,aAAA,OAAAA,YACA,MAAAva,qBAAA,qBAKA,QAHA9F,IAAAqhB,YACAA,UAAA3hB,KAAA8O,KAAA4S,KAAAE,MAAAC,MAEA,IAAA7hB,KAAA8O,KAAA4S,KAAAI,iBAAAH,WACA,MAAA3hB,KAAAwH,OAAAiC,OAAArD,qBAAA0X,oBAAA6D,YAGA,IAAAI,YAAAC,oBAAArB,aAEAgB,YAAA3hB,KAAA8O,KAAA4S,KAAAE,MAAAC,MACAF,UAAAM,sBAAAF,cAIA,IAAAjB,kBACAI,QAAAxd,KACAwe,eAAAxe,KAAA0a,gBACA+D,aAAAze,KAAA2a,cACA+D,eAAAL,YACAM,aAAAV,WAGAje,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAK,gBAAAkI,kBAMA,IAJA,IAAAwB,eAAAP,YAAAA,YAAAvhB,OAAA,GACA+hB,eAAA7e,KAAAsb,cAAAsD,gBACAE,aAAAxiB,KAAA8O,KAAA4S,KAAAe,gBAAAF,eAAAZ,WAEAphB,EAAAwhB,YAAAvhB,OAAA,EAAAD,GAAA,EAAAA,IAAA,CACA,IAAAmiB,iBAAAX,YAAAxhB,GACAoiB,iBAAAjf,KAAAsb,cAAA0D,kBACAE,aAAA5iB,KAAA8O,KAAA4S,KAAAe,gBAAAE,iBAAAhB,WACAa,aAAAK,2BAAAD,aAAAF,kBAAAF,cAGA9e,KAAAqa,QAAA2D,KAAAc,cACAlE,cACA5a,KAAA+c,yBACA/c,KAAAqb,SAAA/e,KAAA8O,KAAA8K,MAAAE,OACApW,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAG,YAAAoI,kBACApd,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,OAGAA,KAAA0a,gBAAA2D,YAAAe,MAAA,GACApf,KAAA2a,cAAAsD,WAIA,IAAAkB,2BAAA,SAAAE,MAAAC,OACA,OAAA,SAAAC,EAAAC,GACA,IAAAC,IAAAJ,MAAAE,EAAAC,GAIA,OAHA,IAAAC,MACAA,IAAAH,MAAAC,EAAAC,IAEAC,MAIAnB,oBAAA,SAAArB,aAGA,OAAA,IAAA3gB,KAAAgB,QAAA2f,cACAA,YAAA3gB,KAAA8O,KAAA1I,MAAAiT,QAEAsH,YAAAngB,OAAA,GAAAmgB,YAAA,KAAA3gB,KAAA8O,KAAA1I,MAAAiT,QACAsH,YAAAzc,KAAAlE,KAAA8O,KAAA1I,MAAAiT,QACAsH,aAEAA,aAGAsB,sBAAA,SAAAF,aACA,OAAAzT,KAAA8P,gBAAA5d,OAAA,GAAA8N,KAAA8P,gBAAA,KAAA2D,YAAA,IAAAzT,KAAA+P,gBAAAre,KAAA8O,KAAA4S,KAAAE,MAAAwB,IACApjB,KAAA8O,KAAA4S,KAAAE,MAAAyB,KAGArjB,KAAA8O,KAAA4S,KAAAE,MAAAwB,KAcA1f,KAAA+W,OAAA,SAAAlV,OAAA+d,SAEA,IAAArF,gBAAAje,KAAA8O,KAAA/H,MAAAxB,OAAA7B,KAAAqa,QAAAxY,OAAA7B,MACA1D,KAAA8O,KAAA/H,MAAA0T,OAAAwD,gBAAAqF,QAAA5f,MACAA,KAAA8a,kBACA9a,KAAAqb,SAAA/e,KAAA8O,KAAA8K,MAAAE,OACApW,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,aAKApD,IAAAkN,QAAAjI,QACA7B,KAAA4d,UAAA9T,QAAAjI,aAEAjF,IAAAkN,QAAAuQ,SACAra,KAAA2c,OAAA7S,QAAAuQ,UA/rBA,GAqsBA,WACA,aA2BA/d,KAAA8O,KAAAyU,UAAA,SAAA/V,SAEA,IAAApH,sBAEAkX,uBAAA,gDACAkG,qBAAA,4DAIA,QAAAljB,IAAAkN,QAAAiM,KACA,MAAArT,qBAAA,uBAEA,QAAA9F,IAAAkN,QAAAiW,cACA,MAAArd,qBAAA,qBAGApG,KAAAW,OAAAX,KAAAyD,SAAAC,MAGA,IAAA4K,KAAA5K,KAEAA,KAAA+V,KAAAjM,QAAAiM,KACA/V,KAAA+f,cAAAjW,QAAAiW,cACA/f,KAAA+f,cAAA5f,YAAAH,MAGAA,KAAAmc,IAAA,KAEA7f,KAAA8O,KAAA4K,cAAAhW,KAAA+V,KAAA/V,MAKAA,KAAAwb,WAAA,WACA,IAAAC,SACAuE,OAAApV,KAAAuR,KAEAN,UAAAvf,KAAA8O,KAAA/H,MAAAgT,yBAAAzL,KAAAkR,YAEA,OADAxf,KAAAsC,MAAA6c,QAAAI,WACAJ,SAOAzb,KAAA8b,SAAA,WACA,OAAAlR,KAAAmV,cAAAjE,YAGA9b,KAAAigB,SAAA,WACArV,KAAAuR,IAAAvR,KAAAmV,cAAAhE,gBACAnR,KAAA/J,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QAQAA,KAAAkgB,qBAAA,SAAA9U,MACAR,KAAAqV,YAMAjgB,KAAAmgB,2BAAA,SAAA/U,MACAR,KAAAqV,YAMAjgB,KAAAogB,sBAAA,SAAAhV,MACAR,KAAAqV,YAIArV,KAAAuR,IAAAvR,KAAAmV,cAAAhE,iBA3GA,GAgHA,WACA,aAwCAzf,KAAA8O,KAAAiV,YAAA,SAAAvW,SACAxN,KAAAW,OAAAX,KAAA8O,KAAAsO,QAAA1Z,MAAA8J,UAEA,IAAAc,KAAA5K,KAEA0C,sBAEA4d,uBAAA,6CACAC,YAAA,wDACAC,iBAAA,uDAIA,GAAAxgB,KAAA9B,cAAA5B,KAAA8O,KAAAiV,YACA,MAAA3d,qBAAA,uBAGA1C,KAAAsL,IAAA,UACA1O,IAAAkN,QAAAwB,MACAtL,KAAAsL,IAAAxB,QAAAwB,KAGAtL,KAAAoK,QAAA9N,KAAA8O,KAAA1I,MAAAmT,iBACAjZ,IAAAkN,QAAAM,UACApK,KAAAoK,QAAAN,QAAAM,SAGApK,KAAAygB,OAAA,OACA7jB,IAAAkN,QAAA2W,QACAzgB,KAAAygB,MAAA3W,QAAA2W,OAGAzgB,KAAA0K,gBACA9N,IAAAkN,QAAAY,UACA1K,KAAA0K,QAAAZ,QAAAY,SAGA1K,KAAA0gB,iBAAA,OACA9jB,IAAAkN,QAAA4W,kBACA1gB,KAAA0gB,gBAAA5W,QAAA4W,iBAIA1gB,KAAA2gB,SAAA,KACA3gB,KAAA4gB,WAAA,KAkCA5gB,KAAA6gB,cAAA,WACA,OAAA7gB,KAAA4gB,aACA5gB,KAAA4gB,WAAAE,QACA9gB,KAAA4gB,WAAA,OAQA5gB,KAAA+gB,OAAA,WACA,OAAA/gB,KAAAsL,KASAtL,KAAAghB,SAAA,WACA,GAAA,OAAAhhB,KAAAsL,IACA,MAAA5I,qBAAA,iBArDA,IACAue,WAsDAjhB,KAAAqb,SAAA/e,KAAA8O,KAAA8K,MAAAC,SACAnW,KAAAa,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAI,cAAAuI,QAAAxd,OACAA,KAAA6gB,gBAxDAI,YACA3V,IAAAV,KAAAU,IACAjB,QAAA,SAAAgB,SAAApD,WAAAC,QACA,IAAA0C,KAAA8V,iBACA9V,KAAAsQ,SAEAtQ,KAAAsW,YAAA7V,SAAApD,WAAAC,QAEAkC,QAAAQ,KAAAR,QACAqW,MAAA7V,KAAA6V,MACA/V,QAAAE,KAAAF,QACAJ,MAAAM,KAAAuW,SAEAC,YACAC,WAAA/kB,KAAA8O,KAAAqM,IAAA2B,kBAIA,OAAAxO,KAAA+V,WACAM,WAAAN,SAAA/V,KAAA+V,UAEA/V,KAAAgW,WAAAnd,OAAA0H,KAAA8V,aA+CAjhB,KAAAkhB,YAAA,SAAA7V,SAAApD,WAAAC,SASAlI,KAAAshB,OAAA,SAAAC,QACAvhB,KAAAsL,IAAAiW,QAUAvhB,KAAAmhB,SAAA,SAAAjZ,MAAAD,WAAAI,aACAuC,KAAAyQ,SAAA/e,KAAA8O,KAAA8K,MAAA3M,OACAqB,KAAA/J,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAO,WACAoI,QAAA5S,KACAoB,QAAA1P,KAAAwH,OAAAiC,OAAArD,qBAAA6d,aAAA3V,KAAAU,IAAApD,MAAAsZ,OAAAnZ,cACAH,MAAAA,MACAD,WAAAA,WACAI,YAAAA,gBAzLA,GAgMA,WACA,aAgBA/L,KAAA8O,KAAAqW,YAAA,SAAA3X,SACAxN,KAAAW,OAAAX,KAAA8O,KAAAiV,YAAArgB,MAAA8J,UAEA,IAAAc,KAAA5K,KAEAA,KAAA2gB,SAAA,OAEA3gB,KAAA1B,KAAA,UACA1B,IAAAkN,QAAAxL,OACA0B,KAAA1B,KAAAwL,QAAAxL,MAIA0B,KAAA0hB,QAAA,KAQA1hB,KAAA2hB,WAAA,WACA,OAAA3hB,KAAA0hB,SAOA1hB,KAAA4hB,QAAA,WACA,OAAA5hB,KAAA1B,MAOA0B,KAAA6hB,YAAA,SAAA1c,MACAyF,KAAAsQ,SACAtQ,KAAAsW,YAAA/b,OAUAnF,KAAAkhB,YAAA,SAAA/b,KAAA8C,WAAAC,OAEA,GADA0C,KAAA8W,QAAAvc,KACA,OAAAyF,KAAAtM,KACAsM,KAAA+R,OAAAxX,UAEA,CACA,IAAAkV,QAAA/d,KAAAkC,eAAA2G,KAAAyF,KAAAtM,WACA1B,IAAAyd,SACAzP,KAAA+R,OAAAtC,WASAra,KAAA8hB,QAAA,SAAAxjB,MACA0B,KAAA1B,KAAAA,OApFA,GA0FA,WACA,aAeAhC,KAAA8O,KAAA2W,WAAA,SAAAjY,SACAxN,KAAAW,OAAAX,KAAA8O,KAAAiV,YAAArgB,MAAA8J,UAEA,IAAAc,KAAA5K,KAEAA,KAAA2gB,SAAA,MAEA3gB,KAAA1B,KAAA,SACA1B,IAAAkN,QAAAxL,OACA0B,KAAA1B,KAAAwL,QAAAxL,MAIA0B,KAAAgiB,OAAA,KAQAhiB,KAAAiiB,UAAA,WACA,OAAAjiB,KAAAgiB,QAOAhiB,KAAA4hB,QAAA,WACA,OAAA5hB,KAAA1B,MAOA0B,KAAAkiB,WAAA,SAAApgB,MACA8I,KAAAsQ,SACAtQ,KAAAsW,YAAApf,OAUA9B,KAAAkhB,YAAA,SAAAiB,OAAAla,WAAAC,OACA0C,KAAAoX,OAAAG,OAGA,IAFA,IAAAC,MAAA9lB,KAAA8O,KAAAqM,IAAAI,cAAAsK,OAAAvX,KAAAtM,MACA+b,WACAxd,EAAA,EAAAA,EAAAulB,MAAAtlB,OAAAD,IACAwd,QAAA7Z,KAAAlE,KAAA8O,KAAAqM,IAAAgB,WAAA2J,MAAAvlB,KAEA+N,KAAA+R,OAAAtC,UAQAra,KAAA8hB,QAAA,SAAAxjB,MACA0B,KAAA1B,KAAAA,OAjFA,GA+FA,WACA,aAQAhC,KAAA8O,KAAAiX,YAAA,SAAAvY,SACAxN,KAAAW,OAAAX,KAAA8O,KAAAiV,YAAArgB,MAAA8J,UAEA,IAAAc,KAAA5K,KAEAA,KAAA2gB,SAAA,OAGA3gB,KAAAgiB,OAAA,KAGAhiB,KAAAsiB,iBAAA,QAAA,OAAA,cAAA,WAAA,YAAA,iBAAA,YAAA,UAAA,gBAAA,WAAA,YAAA,OAAA,QAAA,MAAA,QAAA,YAAA,YAAA,YAGAtiB,KAAAuiB,cAAA,QAAA,OAAA,cAAA,SAAA,WAAA,WAAA,YAAA,OAAA,UAAA,UAGAviB,KAAAwiB,eA+BAxiB,KAAAwb,WAAA,WACA,IAAAC,SACAgH,MAAA7X,KAAAwF,SACAuL,YAAA/Q,KAAAgR,mBAEAC,UAAAvf,KAAA8O,KAAA/H,MAAAgT,yBAAAzL,KAAAkR,YAGA,OAFAxf,KAAAsC,MAAA6c,QAAAI,WACAvf,KAAAsC,MAAA6c,QAAA7Q,KAAA4X,aACA/G,SAOAzb,KAAAiiB,UAAA,WACA,OAAAjiB,KAAAgiB,QAOAhiB,KAAAkiB,WAAA,SAAA7I,QACAzO,KAAAsQ,SACAtQ,KAAAsW,YAAA7H,SAUArZ,KAAAkhB,YAAA,SAAA7H,OAAApR,WAAAC,OACA0C,KAAAoX,OAAA3I,OACA,IAAAqJ,KAAAjf,OAAAA,OAAAkf,SAAAtJ,SACAoJ,SAEAC,KAAA/d,KAAA,QAAAC,KAAA,SAAArD,MAAAnC,SACAqjB,MAAAjiB,KAjEA,SAAAqE,MAEA,IADA,IAAA+d,OACA/lB,EAAA,EAAAA,EAAA+N,KAAA2X,aAAAzlB,OAAAD,IACA+lB,IAAAhY,KAAA2X,aAAA1lB,IAAA4G,OAAAoB,MAAAF,KAAAiG,KAAA2X,aAAA1lB,IAAAgmB,OAEA,OAAAD,IA4DAE,CAAArf,OAAAzD,UArDA,SAAA+iB,UACA,IAAA,IAAAlmB,EAAA,EAAAA,EAAA+N,KAAA0X,gBAAAxlB,OAAAD,IACA+N,KAAA4X,YAAA5X,KAAA0X,gBAAAzlB,IAAAkmB,SAAApe,KAAA,IAAAiG,KAAA0X,gBAAAzlB,IAAAgmB,OAqDAG,CAAAN,KAAA/d,KAAA,YAEAiG,KAAA+R,OAAA8F,SAKAnmB,KAAA8O,KAAAiX,YAAArlB,QAAA,QA3GA,GA8GA,WACA,aAkBAV,KAAA8O,KAAA6X,iBAAA,SAAAnZ,SAEA,IAAApH,sBAEAwgB,kBAAA,kEACAC,YAAA,wDACAC,mBAAA,iEAIA,QAAAxmB,IAAAkN,QAAAiW,cACA,MAAArd,qBAAA,kBAGA,QAAA9F,IAAAkN,QAAAwB,IACA,MAAA5I,qBAAA,YAGApG,KAAAW,OAAAX,KAAA8O,KAAAqW,YAAAzhB,MAAA8J,UAGA,IAAAc,KAAA5K,KAGAA,KAAA+f,cAAAjW,QAAAiW,cACA/f,KAAA+f,cAAA5f,YAAAH,MACAA,KAAAsL,IAAA,KACAtL,KAAAqjB,WAAAvZ,QAAAwB,IAKAtL,KAAAsjB,UAAA,SAAAnH,KACA,IAAAoH,QAAAjnB,KAAAwH,OAAAuC,SAAAuE,KAAAyY,WAAAlH,KACA,GAAAoH,UAAA3Y,KAAAyY,WACA,MAAA/mB,KAAAwH,OAAAiC,OAAArD,qBAAA0gB,oBAAAG,UAEA3Y,KAAA0W,OAAAiC,SACA3Y,KAAAoW,YAQAhhB,KAAAmgB,2BAAA,SAAA/U,MACA,OAAAA,KAAAmS,WACA3S,KAAA0Y,UAAAlY,KAAAmS,YAGA3S,KAAAsQ,WAtEA,GA8EA,WACA,aAkBA5e,KAAA8O,KAAAoY,gBAAA,SAAA1Z,SAEA,IAAApH,sBAEAwgB,kBAAA,iEACAC,YAAA,uDACAC,mBAAA,gEAIA,QAAAxmB,IAAAkN,QAAAiW,cACA,MAAArd,qBAAA,kBAGA,QAAA9F,IAAAkN,QAAAwB,IACA,MAAA5I,qBAAA,YAGApG,KAAAW,OAAAX,KAAA8O,KAAA2W,WAAA/hB,MAAA8J,UAGA,IAAAc,KAAA5K,KAGAA,KAAA+f,cAAAjW,QAAAiW,cACA/f,KAAA+f,cAAA5f,YAAAH,MACAA,KAAAsL,IAAA,KACAtL,KAAAqjB,WAAAvZ,QAAAwB,IAKAtL,KAAAsjB,UAAA,SAAAnH,KACA,IAAAoH,QAAAjnB,KAAAwH,OAAAuC,SAAAuE,KAAAyY,WAAAlH,KACA,GAAAoH,UAAA3Y,KAAAyY,WACA,MAAA/mB,KAAAwH,OAAAiC,OAAArD,qBAAA0gB,oBAAAG,UAEA3Y,KAAA0W,OAAAiC,SACA3Y,KAAAoW,YAQAhhB,KAAAmgB,2BAAA,SAAA/U,MACA,OAAAA,KAAAmS,WACA3S,KAAA0Y,UAAAlY,KAAAmS,YAGA3S,KAAAsQ,WAtEA,GA8EA,WACA,aA8BA5e,KAAA8O,KAAAqY,UAAA,SAAA3Z,SAEA,IAAApH,sBAEAkX,uBAAA,gDACAkG,qBAAA,4DAIA,QAAAljB,IAAAkN,QAAAiM,KACA,MAAArT,qBAAA,uBAEA,QAAA9F,IAAAkN,QAAAiW,cACA,MAAArd,qBAAA,qBAGApG,KAAAW,OAAAX,KAAAyD,SAAAC,MAGA,IAAA4K,KAAA5K,KAEAA,KAAA+V,KAAAjM,QAAAiM,KACA/V,KAAA+f,cAAAjW,QAAAiW,cACA/f,KAAA+f,cAAA5f,YAAAH,MAEA1D,KAAA8O,KAAA4K,cAAAhW,KAAA+V,KAAA/V,MAEA,IAAA0jB,SAAA,QACA9mB,IAAAkN,QAAA4Z,WACAA,SAAA5Z,QAAA4Z,UAGA,IAAAC,YAAA,EACAC,mBAAA,EAKA5jB,KAAAwb,WAAA,WACA,IAAAC,QAAA7Q,KAAAmV,cAAAvE,aASA,OARAC,QAAAC,SAAAD,QAAAC,SAAA0D,MAAAxU,KAAAiZ,wBAAAjZ,KAAAkZ,sBAAA,GAEArI,QAAAsI,kBAAAnZ,KAAAoZ,uBACAvI,QAAAwI,uBAAAxI,QAAAC,SAAA5e,OACA2e,QAAAyI,iBAAAtZ,KAAAkZ,sBACArI,QAAAmI,mBAAAhZ,KAAAiZ,wBACApI,QAAAiI,SAAA9Y,KAAAuZ,cACA1I,QAAA2I,UAAAxZ,KAAAyZ,gBACA5I,SAOAzb,KAAA8jB,oBAAA,WACA,IAAAQ,OAAA1Z,KAAAiZ,wBAAAjZ,KAAAuZ,cAAA,EAIA,OAHAG,OAAA1Z,KAAAgR,oBACA0I,OAAA1Z,KAAAgR,mBAEA0I,QAOAtkB,KAAA6jB,sBAAA,WACA,OAAAD,oBAOA5jB,KAAAgkB,qBAAA,WACA,OAAAL,aAOA3jB,KAAAqkB,cAAA,WACA,OAAA1Z,UAAAC,KAAAmV,cAAAnE,kBAAAhR,KAAAuZ,cAAA,GAAAvZ,KAAAuZ,gBAOAnkB,KAAAmkB,YAAA,WACA,OAAAT,UAUA1jB,KAAAukB,SAAA,SAAAC,aACA,IAAA5Z,KAAA6Z,cAAAD,aAGAA,aAAA5Z,KAAAoZ,yBAGAL,YAAAa,WACAZ,oBAAAY,WAAA,GAAA5Z,KAAAuZ,cAEAvZ,KAAA+S,mBAAA/S,KAAAiZ,yBACAjZ,KAAA/J,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,SAOAA,KAAA0kB,aAAA,WACA9Z,KAAA2Z,SAAA3Z,KAAAoZ,uBAAA,IAOAhkB,KAAA2kB,aAAA,WACA/Z,KAAA2Z,SAAA3Z,KAAAoZ,uBAAA,IAQAhkB,KAAAykB,cAAA,SAAAD,YACA,QAAAA,WAAA,GAAAA,WAAA5Z,KAAAyZ,kBAYArkB,KAAAkc,mBAAA,WACA,OAAAtR,KAAAmV,cAAA7D,sBAOAlc,KAAA4b,gBAAA,WACA,OAAAhR,KAAAmV,cAAAnE,mBAQA5b,KAAAghB,SAAA,gBACApkB,IAAAgO,KAAAmV,cAAAiB,UACApW,KAAAmV,cAAAiB,YAUAhhB,KAAA8c,gBAAA,SAAAT,OACAzR,KAAAmV,cAAAjD,gBAAAT,QASArc,KAAA2d,mBAAA,SAAApc,OACAqJ,KAAAmV,cAAApC,mBAAApc,QAQAvB,KAAAqb,SAAA,SAAAwC,UACAjT,KAAAmV,cAAA1E,SAAAwC,WAYA7d,KAAAge,KAAA,SAAAf,YAAAgB,WACArT,KAAAmV,cAAA/B,KAAAf,YAAAgB,WACArT,KAAA/J,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QAQAA,KAAAkgB,qBAAA,SAAA9U,MACAR,KAAA/J,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAE,cAAAkB,WAAAjW,QAMAA,KAAAogB,sBAAA,SAAAhV,MACAR,KAAA/J,gBAAAvE,KAAA8O,KAAA1I,MAAAmS,OAAAM,eAAAc,WAAAjW,SApQA,GA0QA,WACA,aAEA1D,KAAAC,UAAA,oBAEAD,KAAA8O,KAAAwZ,OAAAliB,OACAsG,mBACA6b,iBAAA,kCACAC,OAAA,kBACAC,YAAA,uBACAC,YAAA,8BACAC,OAAA,yBACAC,iBAAA,yBAEAC,oBAAA,8BACAC,gBACA,iCACA,mCACA,sCACA,gCAEA1lB,gBACA2lB,8BAAA,2EACAC,oBAAA,gCACAC,6BAAA,6EAEA1Q,QACA2Q,gBAAA,kBAEAC,WACAX,OAAA,8BAaA,IAAA/a,QACA2b,cAAA,GAQAppB,KAAA8O,KAAAwZ,OAAAe,MAAA,SAAA7b,SAEA,OADAxN,KAAAsC,MAAAmL,OAAAD,SACAC,QASAzN,KAAA8O,KAAAwZ,OAAAgB,qBAAA,SAAA9jB,MACA,OAAAA,KAAAsJ,KAAA9O,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAAkc,mBAQA5oB,KAAA8O,KAAAwZ,OAAAvW,KAAA,SAAAvM,MACA,IAAA+jB,aAAA/jB,KAAA4B,KAAApH,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAA6b,kBACA,QAAAjoB,IAAAipB,aACA,MAAAvpB,KAAA8O,KAAAwZ,OAAAliB,MAAAhD,eAAA,8BAGA,GAAA,OADApD,KAAA8O,KAAA0K,cAAA+P,cAEA,MAAAvpB,KAAAwH,OAAAiC,OAAAzJ,KAAA8O,KAAAwZ,OAAAliB,MAAAhD,eAAA4lB,qBAAAO,eAEA,IAAAC,WAAAhkB,KAAA4B,KAAApH,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAA+b,kBACAnoB,IAAAkpB,aACAA,WAAAxpB,KAAA8O,KAAAwZ,OAAAliB,MAAAyiB,qBAEA,IAAAY,YAAAzpB,KAAA+B,eAAAynB,YACA,QAAAlpB,IAAAmpB,YACA,MAAAzpB,KAAAwH,OAAAiC,OAAAzJ,KAAA8O,KAAAwZ,OAAAliB,MAAAhD,eAAA6lB,8BAAAO,aAEA,IAAAC,aAAAjkB,KAAAA,QAOAxF,KAAA8O,KAAAwZ,OAAAoB,YAAA,SAAArkB,eACA/E,IAAA+E,WACAA,SAAA8B,OAAA,SAEA9B,SAAAgD,KAAArI,KAAA8O,KAAAwZ,OAAAliB,MAAA+iB,UAAAX,QAAAlgB,KAAA,SAAArD,MAAAsD,MACAvI,KAAA8O,KAAAwZ,OAAAvW,KAAA5K,OAAAoB,UAIAvI,KAAAC,UAAA,0BAcAD,KAAA8O,KAAAwZ,OAAAvhB,MAAA4iB,0BAAA,SAAArB,QACA,OACA9iB,KAAA8iB,OAAA7a,OAAAjI,KACAokB,GAAAtB,OAAA3O,aAIAxS,OAAArB,UAAAuJ,MAAA,YAEA,IAAA5B,OAAA2b,cACAppB,KAAA8O,KAAAwZ,OAAAoB,gBAjIA,GAsIA,WACA,aAyBA1pB,KAAA8O,KAAAwZ,OAAAuB,KAAA,SAAArc,SAaA,GAXAxN,KAAAW,OAAAX,KAAAyD,SAAAC,MAEAA,KAAA0C,OACAhD,gBACA0mB,cAAA,wDACAC,aAAA,qDAKAvc,QAAAhI,KAAA2B,OAAAqG,QAAAhI,MACA,IAAAgI,QAAAhI,KAAAhF,OACA,MAAAkD,KAAA0C,MAAAhD,eAAA,aAGAM,KAAA+J,QACAjI,KAAA,KAEAwkB,OAAAxc,QAAAhI,KAAA4B,KAAApH,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAA6b,mBAAA,KACA0B,WAAAzc,QAAAhI,KAAA4B,KAAApH,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAAgc,cAAA,KAEAwB,OAAA1c,QAAA0c,QAAA,KACAN,GAAA,MAEA5pB,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACA,IAAAc,KAAA5K,KAYA,GATAA,KAAAiW,WAAA,KACA,OAAAjW,KAAA+J,OAAAmc,GAEAlmB,KAAAiW,WAAAjW,KAAA+J,OAAAmc,GAIAlmB,KAAAiW,WAAA3Z,KAAA8O,KAAA0K,cAAA9V,KAAA+J,OAAAuc,QAEA,OAAAtmB,KAAAiW,WACA,MAAA3Z,KAAAwH,OAAAiC,OAAAzJ,KAAA8O,KAAAwZ,OAAAliB,MAAAhD,eAAA4lB,qBAAAtlB,KAAA+J,OAAA0c,OAEAzmB,KAAAiW,WAAA9V,YAAAH,MAGAA,KAAAwmB,OAAAlqB,KAAA8O,KAAAwZ,OAAAliB,MAAA0iB,eAEA,IAAAsB,WAAA1mB,KAAA+J,OAAAjI,KAAA4B,KAAApH,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAAic,aACAroB,IAAA8pB,aACA1mB,KAAAwmB,OAAAxmB,KAAAwmB,OAAAG,OAAAD,WAAA/pB,MAAA,OAEA,OAAAqD,KAAA+J,OAAAyc,SACAxmB,KAAAwmB,OAAAxmB,KAAAwmB,OAAAG,OAAA3mB,KAAA+J,OAAAyc,SAIAxmB,KAAA+J,OAAAjI,KAAAsJ,KAAA9O,KAAA8O,KAAAwZ,OAAAliB,MAAAsG,kBAAAkc,iBAAAllB,MAEAA,KAAA4mB,YAAA,WAKA,IAJA,IAAAC,WACA/kB,KAAA9B,KAAA+J,OAAAjI,KACAmU,WAAAjW,KAAAiW,YAEApZ,EAAA,EAAAA,EAAAmD,KAAAwmB,OAAA1pB,OAAAD,IAAA,CACA,IAAAM,KAAAb,KAAA+B,eAAA2B,KAAAwmB,OAAA3pB,IACA,QAAAD,IAAAO,KAIA,MAAAb,KAAAwH,OAAAiC,OAAA/F,KAAA0C,MAAAhD,eAAA0mB,eAAApmB,KAAAwmB,OAAA3pB,KAHAM,KAAA0pB,aAYA7mB,KAAA8mB,OAAA,WAEA,IAAAC,KAAAzqB,KAAA8O,KAAAwZ,OAAAvhB,MAAA4iB,0BAAAjmB,MACAA,KAAAa,gBAAAvE,KAAA8O,KAAAwZ,OAAAliB,MAAAmS,OAAA2Q,gBAAAuB,OAQA/mB,KAAAmgB,2BAAA,SAAA/U,MACAR,KAAAgc,eAMA5mB,KAAAkgB,qBAAA,SAAA9U,MACAR,KAAAkc,UAMA9mB,KAAAogB,sBAAA,SAAAhV,MACAR,KAAAkc,WAlIA,GAwIA,WACA,aAUAxqB,KAAA8O,KAAAwZ,OAAAoC,WAAA,SAAAld,SAEAxN,KAAAW,OAAAX,KAAA8O,KAAAwZ,OAAAuB,KAAAnmB,MAAA8J,UACA,IAAAc,KAAA5K,KAGA4K,KAAAlI,MAAAukB,2BACAC,mBAAA,4BACAC,sBAAA,iGACAC,sBAAA,8GAGApnB,KAAAqnB,SAAA,GAyCArnB,KAAAsnB,aAAA,WACA,OAAAtnB,KAAAqnB,SAAArnB,KAAAiW,WAAAuF,eAOAxb,KAAA8mB,OAAA,WAEA,GAAA,KAAA9mB,KAAAqnB,SAAA,CACArnB,KAAA+J,OAAAjI,KAAAsF,KAAApH,KAAAsnB,gBACAtnB,KAAA4mB,cACA,IAAAG,KAAAzqB,KAAA8O,KAAAwZ,OAAAvhB,MAAA4iB,0BAAAjmB,MACAA,KAAAa,gBAAAvE,KAAA8O,KAAAwZ,OAAAliB,MAAAmS,OAAA2Q,gBAAAuB,QAlDA,SAAAjlB,MAEA,GAAA,OAAA8I,KAAAb,OAAAwc,WACA3b,KAAAyc,SAAAL,WAAAO,QAAAzlB,KAAAsF,YAEA,CACA,IAAAogB,aAAA/jB,OAAA,IAAAmH,KAAAb,OAAAwc,YACA,GAAA,IAAAiB,aAAA1qB,OACA,MAAAR,KAAAwH,OAAAiC,OAAA6E,KAAAlI,MAAAukB,0BAAAG,uBAAAxc,KAAAb,OAAAwc,aAEA,IAAAkB,YAAAD,aAAA9jB,KAAA,OACA,QAAA9G,IAAA6qB,YAEA7c,KAAAyc,SAAAL,WAAAO,QAAAC,aAAApgB,YAEA,CAEA,IAAA6Z,YACA3V,IAAAmc,YACA9G,SAAA,OACAtW,QAAA,SAAAgB,SAAApD,WAAAC,OACA0C,KAAAyc,SAAAL,WAAAO,QAAAlc,UACAT,KAAAkc,UAEAxc,MAAA,SAAApC,MAAAD,WAAAI,aACA,MAAA/L,KAAAwH,OAAAiC,OAAA6E,KAAAlI,MAAAukB,0BAAAE,uBAAAM,gBAGAhkB,OAAA0H,KAAA8V,cA2BAyG,CAAA1nB,KAAA+J,OAAAjI,OAnFA,GAwFA,WACA,aAEAxF,KAAAC,UAAA,2BASA,IAAAmG,yBAEAilB,OAAA,yBACAC,WAAA,2BACAC,cAAA,8BACAC,KAAA,wBALAplB,iBAQAilB,OAAA,4BACAC,WAAA,8BACAC,cAAA,iCACAC,KAAA,2BAQAxrB,KAAA8O,KAAAwZ,OAAA4B,OAAApW,OAAA,SAAAtG,SACA,IAAAsY,MAAAtY,QAAAhI,KAAA6C,KAAAjC,gBAAAilB,QACA,GAAAvF,MAAAtlB,OAAA,EAAA,CACA,QAAAF,IAAAkN,QAAAmM,WAAAiG,mBAEA,OAEA,IAAA3U,SAAA6a,MAAA1e,KAAAhB,wBAAAilB,QAEAvF,MAAAhW,YAAA7E,UAEA,IAAAhG,MAAA,GAEA,IAAAuI,QAAAmM,WAAAiG,qBAEAkG,MAAAhW,YAAA7E,WAGAhG,MAAAuI,QAAAmM,WAAAiG,qBAEAzY,OAAA2e,MAAA2F,IAAAxmB,QAAAkG,SAAAF,WAIA6a,MAAAxd,KAAA,SAAArD,MAAAsD,MACA,IAAAmjB,MAAAvkB,OAAAoB,MACAmjB,MAAAC,GAAA,QAAA,SAAAxf,OACAA,MAAAC,iBACA0Z,MAAAhW,YAAA7E,UACAygB,MAAAvgB,SAAAF,gBAUAjL,KAAA8O,KAAAwZ,OAAA4B,OAAA0B,SAAA,SAAApe,SACAA,QAAAhI,KAAA6C,KAAAjC,gBAAAklB,YAAAhjB,KAAA,SAAArD,MAAAsD,MACA,IAAAmjB,MAAAvkB,OAAAoB,MACAmjB,MAAAC,GAAA,QAAA,SAAAxf,OACAA,MAAAC,iBACA,IAAA2T,MAAA2L,MAAAtkB,KAAAhB,wBAAAklB,YACA9d,QAAAmM,WAAA6G,gBAAAT,YASA/f,KAAA8O,KAAAwZ,OAAA4B,OAAA2B,YAAA,SAAAre,SACAA,QAAAhI,KAAA6C,KAAAjC,gBAAAmlB,eAAAjjB,KAAA,SAAArD,MAAAsD,MACA,IAAAmjB,MAAAvkB,OAAAoB,MACAmjB,MAAAC,GAAA,QAAA,SAAAxf,OACAA,MAAAC,iBACA,IAAA0f,SAAAzd,SAAAqd,MAAAtkB,KAAAhB,wBAAAmlB,eAAA,IACA/d,QAAAmM,WAAA0H,mBAAAyK,eASA9rB,KAAA8O,KAAAwZ,OAAA4B,OAAAxI,KAAA,SAAAlU,SACAA,QAAAhI,KAAA6C,KAAAjC,gBAAAolB,MAAAljB,KAAA,SAAArD,MAAAsD,MACA,IAAAmjB,MAAAvkB,OAAAoB,MACAmjB,MAAAC,GAAA,QAAA,SAAAxf,OACAA,MAAAC,iBACA,IAAA2f,QAAAL,MAAAtkB,KAAAhB,wBAAAolB,MACAhe,QAAAmM,WAAA+H,KAAAqK,cA1GA,GAgHA,WACA,aAEA/rB,KAAAC,UAAA,kBAMAD,KAAA8O,KAAA4S,KAAAE,OACAwB,IAAA,YACAC,KAAA,aACAxB,IAAA,UAGA,IAAAzb,sBAEA4lB,sBAAA,2CACAC,uBAAA,8CASAjsB,KAAA8O,KAAA4S,KAAAI,iBAAA,SAAAH,WACA,IAAA,IAAA/G,OAAA5a,KAAA8O,KAAA4S,KAAAE,MACA,GAAA5hB,KAAA8O,KAAA4S,KAAAE,MAAAhH,OAAA+G,UACA,OAAA,EAGA,OAAA,GASA3hB,KAAA8O,KAAA4S,KAAAe,gBAAA,SAAA4B,SAAA1C,WACA,QAAArhB,IAAAN,KAAA8O,KAAA4S,KAAA2C,UACA,MAAArkB,KAAAwH,OAAAiC,OAAArD,qBAAA4lB,uBAAA3H,WAEA,QAAA/jB,IAAAN,KAAA8O,KAAA4S,KAAA2C,UAAA1C,WACA,MAAA3hB,KAAAwH,OAAAiC,OAAArD,qBAAA6lB,wBAAAtK,YAEA,OAAA3hB,KAAA8O,KAAA4S,KAAA2C,UAAA1C,YAQA3hB,KAAAC,UAAA,uBAEAD,KAAA8O,KAAA4S,KAAAwK,KAAAC,UAAA,SAAA7kB,MACA,OAAA,SAAA2b,EAAAC,GACA,IAAAkJ,GAAApsB,KAAAkC,eAAA+gB,EAAA3b,MACA+kB,GAAArsB,KAAAkC,eAAAghB,EAAA5b,MAGA,OAFA8kB,GAAAA,GAAA,IAAA7U,KAAA6U,IAAA,IACAC,GAAAA,GAAA,IAAA9U,KAAA8U,IAAA,KAKArsB,KAAA8O,KAAA4S,KAAAwK,KAAAI,WAAA,SAAAhlB,MACA,OAAA,SAAA2b,EAAAC,GACA,IAAAkJ,GAAApsB,KAAAkC,eAAA+gB,EAAA3b,MACA+kB,GAAArsB,KAAAkC,eAAAghB,EAAA5b,MAGA,OAFA8kB,GAAAA,GAAA,IAAA7U,KAAA6U,IAAA,GACAC,GAAAA,GAAA,IAAA9U,KAAA8U,IAAA,GACAD,KAIApsB,KAAAC,UAAA,yBAEAD,KAAA8O,KAAA4S,KAAA1L,OAAAmW,UAAA,SAAA7kB,MACA,OAAA,SAAA2b,EAAAC,GAGA,OAFAD,EAAAjjB,KAAAkC,eAAA+gB,EAAA3b,MACA4b,EAAAljB,KAAAkC,eAAAghB,EAAA5b,WACAhH,IAAA2iB,QAAA3iB,IAAA4iB,EACAD,IAAAC,EAAA,EAAAD,EAAA,GAAA,EAEAA,EAAAC,IAIAljB,KAAA8O,KAAA4S,KAAA1L,OAAAsW,WAAA,SAAAhlB,MACA,OAAA,SAAA2b,EAAAC,GAGA,OAFAD,EAAAjjB,KAAAkC,eAAA+gB,EAAA3b,MACA4b,EAAAljB,KAAAkC,eAAAghB,EAAA5b,WACAhH,IAAA2iB,QAAA3iB,IAAA4iB,EACAD,IAAAC,EAAA,EAAAD,GAAA,EAAA,EAEAC,EAAAD,IAIAjjB,KAAAC,UAAA,yBAEAD,KAAA8O,KAAA4S,KAAAla,OAAA2kB,UAAA,SAAA7kB,MACA,OAAA,SAAA2b,EAAAC,GAGA,GAFAD,EAAAjjB,KAAAkC,eAAA+gB,EAAA3b,MACA4b,EAAAljB,KAAAkC,eAAAghB,EAAA5b,WACAhH,IAAA2iB,QAAA3iB,IAAA4iB,EACA,OAAAD,IAAAC,EAAA,EAAAD,EAAA,GAAA,EAQA,IANA,IAAAsJ,GAAAtJ,EAAAzhB,WACAgrB,GAAAtJ,EAAA1hB,WACAirB,QAAAF,GAAAvpB,cACA0pB,QAAAF,GAAAxpB,cACA2pB,OAAAJ,GAAA/rB,OAAAgsB,GAAAhsB,OAAAgsB,GAAAhsB,OAAA+rB,GAAA/rB,OAEAD,EAAA,EAAAA,EAAAosB,OAAApsB,IAAA,CACA,IAAAqsB,WAAAH,QAAA9nB,OAAApE,GACAssB,WAAAH,QAAA/nB,OAAApE,GACAusB,MAAAP,GAAA5nB,OAAApE,GACAwsB,MAAAP,GAAA7nB,OAAApE,GACA,GAAAqsB,WAAAC,WACA,OAAA,EAEA,GAAAD,WAAAC,WACA,OAAA,EAEA,GAAAC,MAAAC,MACA,OAAA,EAEA,GAAAD,MAAAC,MACA,OAAA,EAGA,OAAAR,GAAA/rB,SAAAgsB,GAAAhsB,OACA,EAEA+rB,GAAA/rB,OAAAgsB,GAAAhsB,OACA,GAEA,IAIAR,KAAA8O,KAAA4S,KAAAla,OAAA8kB,WAAA,SAAAhlB,MACA,OAAA,SAAA2b,EAAAC,GAGA,GAFAD,EAAAjjB,KAAAkC,eAAA+gB,EAAA3b,MACA4b,EAAAljB,KAAAkC,eAAAghB,EAAA5b,WACAhH,IAAA2iB,QAAA3iB,IAAA4iB,EACA,OAAAD,IAAAC,EAAA,EAAAD,GAAA,EAAA,EAOA,IALA,IAAAsJ,GAAAtJ,EAAAzhB,WACAgrB,GAAAtJ,EAAA1hB,WACAirB,QAAAF,GAAAvpB,cACA0pB,QAAAF,GAAAxpB,cACA2pB,OAAAJ,GAAA/rB,OAAAgsB,GAAAhsB,OAAAgsB,GAAAhsB,OAAA+rB,GAAA/rB,OACAD,EAAA,EAAAA,EAAAosB,OAAApsB,IAAA,CACA,IAAAqsB,WAAAH,QAAA9nB,OAAApE,GACAssB,WAAAH,QAAA/nB,OAAApE,GACAusB,MAAAP,GAAA5nB,OAAApE,GACAwsB,MAAAP,GAAA7nB,OAAApE,GACA,GAAAqsB,WAAAC,WACA,OAAA,EAEA,GAAAD,WAAAC,WACA,OAAA,EAEA,GAAAC,MAAAC,MACA,OAAA,EAEA,GAAAD,MAAAC,MACA,OAAA,EAGA,OAAAR,GAAA/rB,SAAAgsB,GAAAhsB,OACA,EAEA+rB,GAAA/rB,OAAAgsB,GAAAhsB,QACA,EAEA,IAtLA,GA2LA,WACA,aAEAR,KAAAC,UAAA,qBAEAD,KAAA8O,KAAAke,QAAAC,UAAA,SAAAzf,SAEA,IAAApH,gBACA,eAMA1C,KAAA+J,QAEAyf,eAAA5sB,EAEAkF,UAAAlF,EACA6sB,MAAA,QACAC,SAAA,IACAC,SAAA,IACA1W,UAAA,MACA2W,SAAA,IAEAttB,KAAAsC,MAAAoB,KAAA+J,OAAAD,SAKA,IAAAc,KAAA5K,KAGAwpB,UAAA5e,KAAAb,OAAAyf,UACA1nB,KAAA8I,KAAAb,OAAAjI,KAEA0nB,UAAArpB,YAAAH,MAEAA,KAAA8mB,OAAA,WAEAhlB,KAAA+nB,UAAA,GAEA,IAAAC,MAAAN,UAAAnF,gBACA0F,UAAAP,UAAAxF,uBAEA8F,MAAA,IACAE,eAAApf,KAAAb,OAAA4f,SAAAI,WACAE,gBAAArf,KAAAb,OAAA6f,SAAAhf,KAAAb,OAAA0f,MAAA7e,KAAAb,OAAAkJ,WACAiX,eAAAtf,KAAAb,OAAA2f,SAAAK,aAIA,IAAAC,eAAA,SAAAnH,KAAAkH,WAEA,IAAAI,SAAA/nB,SAAAgoB,eAAAvH,MACAwH,SAAAjoB,SAAAkoB,cAAA,KACAD,SAAAE,aAAA,OAAA7nB,iBACA8nB,iBAAAH,SAAAN,UAAA,GAEAM,SAAAI,YAAAN,UAEA,IAAAJ,UACAjoB,KAAA2oB,YAAAJ,UAGAvoB,KAAA2oB,YAAAN,UAGAroB,KAAA2oB,YAAAroB,SAAAgoB,eAAA,OAGAF,eAAA,SAAArH,KAAAkH,WACAjoB,KAAA2oB,YAAAroB,SAAAgoB,eAAA,MACA,IAAAD,SAAA/nB,SAAAgoB,eAAAvH,MACAwH,SAAAjoB,SAAAkoB,cAAA,KACAD,SAAAE,aAAA,OAAA7nB,iBACA8nB,iBAAAH,SAAAN,UAAA,GAEAM,SAAAI,YAAAN,UAEAJ,YAAAP,UAAAnF,gBACAviB,KAAA2oB,YAAAJ,UAGAvoB,KAAA2oB,YAAAN,WAIAF,gBAAA,SAAAL,SAAAH,MAAAxW,WAUA,IARA,IAAAyQ,SAAA8F,UAAArF,cACAuG,aAAAlB,UAAA5N,kBACA+O,WAAAnB,UAAAnF,gBACAuG,iBAAApB,UAAAxF,uBAEA6G,MAAAC,cAAAF,iBAAAhB,SAAAe,YAGA9tB,EAAAguB,MAAAE,WAAAluB,EAAAguB,MAAAG,SAAA,EAAAnuB,IAAA,CAEA,IAAAouB,SAAAC,YAAAruB,EAAA4sB,MAAA/F,SAAAiH,WAAAD,cACAP,SAAA/nB,SAAAgoB,eAAAa,UAEA,GAAApuB,IAAA+tB,iBAAA,CACA,IAAAP,SAAAjoB,SAAAkoB,cAAA,KACAD,SAAAI,YAAAN,UACAE,SAAAE,aAAA,OAAA7nB,iBACA8nB,iBAAAH,SAAAxtB,GACAiF,KAAA2oB,YAAAJ,cAGA,CACA,IAAAc,WAAA/oB,SAAAkoB,cAAA,UACAa,WAAAV,YAAAN,UACAroB,KAAA2oB,YAAAU,YAGA,GAAAtuB,EAAAguB,MAAA,SAAA,CACA,IAAAO,cAAAhpB,SAAAgoB,eAAAnX,WACAnR,KAAA2oB,YAAAW,kBAMAZ,iBAAA,SAAAH,SAAA7F,YACA6F,SAAAgB,iBAAA,QAAA,SAAA5iB,OACAA,MAAAC,iBACA8gB,UAAAjF,SAAAC,eAIAsG,cAAA,SAAAF,iBAAAhB,SAAAe,YACA,IAAAI,WAAApgB,SAAAigB,iBAAAjgB,SAAAif,SAAA,IACAmB,WAAA,IACAA,WAAA,GAEA,IAAAO,QAAAP,WAAAnB,SAAA,EACAoB,SAAAL,WAWA,OAVAW,QAAAX,aACAK,SAAAM,SAEAN,WAAAL,aACAI,WAAAJ,WAAAf,UAEAmB,WAAA,IACAA,WAAA,IAIAA,WAAAA,WACAC,SAAAA,WAIAE,YAAA,SAAAruB,EAAA4sB,MAAA/F,SAAAiH,WAAAD,cAEA,IAAAO,SAAApuB,EAGA,GAAA,UAAA4sB,WAIA,CACA,IAAA8B,MAAA,GAgBAN,UAbAM,MADA,IAAA1uB,EACA6mB,UAAA7mB,EAAA,GAAA,EAIA,GASA,OAPAA,EAAA,WACA0uB,MAAA7H,SAAA,EAIAgH,cAKA,OAAAO,UAQAjrB,KAAAkgB,qBAAA,SAAA9U,MACAR,KAAAkc,WAjMA,GAwMA,WACA,aAEAxqB,KAAAC,UAAA,qBAmBAD,KAAA8O,KAAAke,QAAAkC,SAAA,SAAA1hB,SAEA9J,KAAA0C,OACAhD,gBACA+rB,0BAAA,4DACAC,sBAAA,0DAIA1rB,KAAA+J,QAEAyT,aAAA5gB,EACA+uB,UAAA,GACArgB,SAAA1O,GAEAN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SAGA,IAAAc,KAAA5K,KAEA,QAAApD,IAAAoD,KAAA+J,OAAAyT,QACA,MAAAxd,KAAA0C,MAAAhD,eAAA,0BAEA,QAAA9C,IAAAoD,KAAA+J,OAAAuB,IACA,MAAAtL,KAAA0C,MAAAhD,eAAA,sBAGA,IAAAksB,WAAA,EACA5rB,KAAA+J,OAAAyT,QAAArd,YAAAH,MAEAA,KAAA6rB,YAAA,WACA,IAAAC,WAAA9rB,KAAA+J,OAAAyT,QAAAmE,aAKA,MAHA,KAAA3hB,KAAA+J,OAAA4hB,YACAG,WAAAxvB,KAAAkC,eAAAstB,WAAA9rB,KAAA+J,OAAA4hB,YAEArvB,KAAAwH,OAAAuC,SAAArG,KAAA+J,OAAAuB,IAAAwgB,aAMA9rB,KAAA+rB,QAAA,aAMA/rB,KAAAgsB,OAAA,aAGAhsB,KAAAisB,MAAA,WACA,IAAA1K,OAAAvhB,KAAA6rB,cACAtK,SAAAvhB,KAAA+J,OAAAuB,KACAtL,KAAA+J,OAAAyT,QAAA8D,OAAAC,QACAvhB,KAAA+J,OAAAyT,QAAAwD,YAGAhhB,KAAA+rB,WAIA/rB,KAAA4rB,UAAA,WACA,OAAAA,WAGA5rB,KAAAksB,YAAA,WACAlsB,KAAA+J,OAAAyT,QAAA1B,aAAAxf,KAAA8O,KAAA8K,MAAAE,OACAwV,WAAA,EACA5rB,KAAAgsB,WAGAJ,WAAA,EACA5rB,KAAA+rB,YAOA/rB,KAAAogB,sBAAA,SAAAhV,MACAR,KAAAshB,eAIAlsB,KAAAksB,eAoBA5vB,KAAA8O,KAAAke,QAAA6C,eAAA,SAAAriB,SACA9J,KAAA+J,QAEAyT,aAAA5gB,EACA+uB,UAAA,GACArgB,SAAA1O,EAEAwvB,YAAAxvB,EACAyvB,cAAA,YAEA/vB,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACAxN,KAAAW,OAAAX,KAAA8O,KAAAke,QAAAkC,SAAAxrB,MAAAA,KAAA+J,SAGA,IAAAa,KAAA5K,KASA,GANA4K,KAAAlI,MAAA4pB,uBACAC,eAAA,oEAIAvsB,KAAA+J,OAAAqiB,OAAA3oB,OAAAzD,KAAA+J,OAAAqiB,QACA,IAAApsB,KAAA+J,OAAAqiB,OAAAtvB,OACA,MAAAkD,KAAA0C,MAAA4pB,sBAAA,eAGAtsB,KAAAwsB,aAAA,WACA/oB,OAAAmH,KAAAb,OAAAqiB,QAAAnE,GAAA,QAAA,SAAAxf,OACAA,MAAAC,kBACA,IAAAkC,KAAAghB,aACAhhB,KAAAqhB,WAKAjsB,KAAA+rB,QAAA,WACA/rB,KAAA+J,OAAAqiB,OAAA3kB,SAAAzH,KAAA+J,OAAAsiB,gBAGArsB,KAAAgsB,OAAA,WACAhsB,KAAA+J,OAAAqiB,OAAAhgB,YAAApM,KAAA+J,OAAAsiB,gBAIArsB,KAAAwsB,gBAmBAlwB,KAAA8O,KAAAke,QAAAmD,kBAAA,SAAA3iB,SAEA9J,KAAA+J,QAEAyT,aAAA5gB,EACA+uB,UAAA,GACArgB,SAAA1O,EAEAkF,UAAAlF,GAEAN,KAAAsC,MAAAoB,KAAA+J,OAAAD,SACAxN,KAAAW,OAAAX,KAAA8O,KAAAke,QAAAkC,SAAAxrB,MAAAA,KAAA+J,SAEA,IAAAa,KAAA5K,KAEA0sB,YAAA,OACA9vB,IAAAoD,KAAA+J,OAAAjI,OACA4qB,YAAA,EACA1sB,KAAA+J,OAAAjI,KAAA2B,OAAArB,WAGApC,KAAAwsB,aAAA,WACA,IAAAG,WAAA/hB,KAAAb,OAAAjI,KAEA2B,OAAAkpB,YAAAC,OAAA,WACA,IAAAC,kBAAA,GACA,IAAAH,WAEAjpB,OAAAkpB,YAAAG,cAAArpB,OAAAkpB,YAAAI,SAAAtpB,OAAApH,QAAA0wB,WACAF,kBAAA,GAKAppB,OAAAkpB,YAAAG,aAAAH,WAAA,GAAAK,aAAAL,WAAAI,WACAF,kBAAA,IAGA,IAAAA,mBAAA,IAAAjiB,KAAAghB,aACAhhB,KAAAqhB,WAOAjsB,KAAAwsB,gBA7OA","file":"luga.min.js","sourcesContent":["/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\twindow.luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {String} ns                   Namespace as dot-delimited string\r\n\t * @param {Object} [rootObject=window]  Optional root object. Default to window\r\n\t * @return {Object}\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.7\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {Array}    [args]    An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is an array. False otherwise\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.isArray = function(obj){\r\n\t\treturn Array.isArray(obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a function. False otherwise\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.isFunction = function(obj){\r\n\t\treturn luga.type(obj) === \"function\";\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {String} path            Fully qualified name of a function\r\n\t * @return {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {Object} target     An object that will receive the new properties\r\n\t * @param {Object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\tif(source.hasOwnProperty(x) === true){\r\n\t\t\t\ttarget[x] = source[x];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element, i, collection){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @return {String}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.eventObserverMap\r\n\t *\r\n\t * @property {Object} observer\r\n\t * @property {String} methodName\r\n\t */\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_GENERIC_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_EVENT_OBSERVER_PARAMETER: \"addObserver(): eventName and methodName must be strings\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Object>}\r\n\t\t */\r\n\t\tthis.observers = [];\r\n\r\n\t\t/**\r\n\t\t * @type {Object.<String, Array.<luga.eventObserverMap>>}\r\n\t\t */\r\n\t\tthis.eventObservers = {};\r\n\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateGenericMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Register an observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given object will be registered as \"generic\" observer\r\n\t\t * \"Generic\" observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t *\r\n\t\t * If you pass three arguments, the first is the object that will be registered as \"event\" observer\r\n\t\t * The second argument is the event name\r\n\t\t * The third argument is the method of the object that will be invoked once the given event is triggered\r\n\t\t *\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer[methodName] = function(data){};\r\n\t\t *\r\n\t\t * @param  {Object} observer  Observer object\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer, eventName, methodName){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_GENERIC_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tthis.observers.push(observer);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(luga.type(eventName) !== \"string\" || luga.type(methodName) !== \"string\"){\r\n\t\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_EVENT_OBSERVER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tvar eventMap = {\r\n\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t};\r\n\t\t\t\t// First entry for the given event\r\n\t\t\t\tif(this.eventObservers[eventName] === undefined){\r\n\t\t\t\t\tthis.eventObservers[eventName] = [eventMap];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(findObserverIndex(this.eventObservers[eventName], eventMap) === -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].push(eventMap);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {Array.<luga.eventObserverMap>} eventArray\r\n\t\t * @param {luga.eventObserverMap} eventMap\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tvar findObserverIndex = function(eventArray, eventMap){\r\n\t\t\tfor(var i = 0; i < eventArray.length; i++){\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tvar currentMap = eventArray[i];\r\n\t\t\t\tif(currentMap.observer === eventMap.observer && currentMap.methodName === eventMap.methodName){\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all relevant observers\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {String}  eventName  Name of the event\r\n\t\t * @param {Object}  payload    Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, payload){\r\n\t\t\tif(luga.type(payload) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\t// \"Generic\" observers\r\n\t\t\tvar genericMethod = generateGenericMethodName(eventName);\r\n\t\t\tthis.observers.forEach(function(element, i, collection){\r\n\t\t\t\tif(element[genericMethod] && luga.isFunction(element[genericMethod])){\r\n\t\t\t\t\telement[genericMethod](payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// \"Event\" observers\r\n\t\t\tvar eventObservers = this.eventObservers[eventName];\r\n\t\t\tif(eventObservers !== undefined){\r\n\t\t\t\teventObservers.forEach(function(element, i, collection){\r\n\t\t\t\t\tif(luga.type(element.observer[element.methodName]) === \"function\"){\r\n\t\t\t\t\t\telement.observer[element.methodName](payload);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given observer will be removed as \"generic\" observer\r\n\t\t *\r\n\t\t * If you pass three arguments, the given observer will be removed as \"event\" observer associated with the given event and method\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer, eventName, methodName){\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(this.eventObservers[eventName] !== undefined){\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t\t */\r\n\t\t\t\t\tvar eventMap = {\r\n\t\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar index = findObserverIndex(this.eventObservers[eventName], eventMap);\r\n\t\t\t\t\t// We have a matching entry\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(index !== -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].splice(index, 1);\r\n\t\t\t\t\t\t// Delete empty entries\r\n\t\t\t\t\t\tif(this.eventObservers[eventName].length === 0){\r\n\t\t\t\t\t\t\tdelete this.eventObservers[eventName];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.nodeIterator\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM NodeIterator\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator}\r\n\t */\r\n\tluga.dom.nodeIterator.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createNodeIterator(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jQuery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {Boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {Object}              A JavaScript object containing name/value pairs\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Deprecated. Use luga.form.toMap() instead\r\n\t * @deprecated\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\t\treturn luga.form.toMap(rootNode, demoronize);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jQuery} rootNode  jQuery object wrapping the form fields\r\n\t * @return {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toMap(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jQuery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {Boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {String}               A URI encoded string\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jQuery}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jQuery}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {String} name         Name of the field. Mandatory\r\n\t * @param {jQuery} [rootNode]   Root node, optional, default to document\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jQuery}  rootNode   Root node\r\n\t * @return {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path.toString());\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @param {String} value   String to be persisted\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tvar json = getRootState(root);\r\n\t\tluga.setProperty(json, path.toString(), value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tvar setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tvar getRootState = function(root){\r\n\t\tvar rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {String} str   String containing MS Word's garbage\r\n\t * @return {String}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String}  str                   String containing placeholders\r\n\t * @param  {Object|Array.<String>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(luga.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {String} str  The querystring\r\n\t * @return {Object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String} str   String containing placeholders\r\n\t * @param  {Object} obj   An objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t * @param {jQuery} node\r\n\t * @return {String}\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t * @param {String}  html   HTML/Text code to inject\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t * @param {String}  html   HTML/Text code to inject\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jQuery}  node                       Target node\r\n\t * @param {String}  html                       HTML/Text code to inject\r\n\t * @param {String}  [cssClass=\"luga_message\"]  CSS class attached to the box. Default to \"luga_message\"\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {String}   msg          Message to display in the GUI\r\n\t * @param {jQuery}   formNode     jQuery object wrapping the form\r\n\t * @param {String}   textStatus   HTTP status\r\n\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {String}   msg          Message to display in the GUI\r\n\t * @param {jQuery}   formNode     jQuery object wrapping the form\r\n\t * @param {String}   textStatus   HTTP status\r\n\t * @param {String}   errorThrown  Error message from jQuery\r\n\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {String}   msg          Message to display in the GUI\r\n\t * @param {jQuery}   formNode     jQuery object wrapping the form\r\n\t * @param {String}   textStatus   HTTP status\r\n\t * @param {String}   errorThrown  Error message from jQuery\r\n\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jQuery}       formNode  jQuery object wrapping the form\r\n\t * @param {jQuery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\",\r\n\t\t\tHEADERS: \"data-lugajax-headers\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jQuery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {String} method       HTTP method to be used. Default to GET\r\n\t * @property {Number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {String} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {String} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {String} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {String} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {String} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {String} after        Name of the function to be invoked after the form is send. Default to null\r\n\t * @property {Object} headers      A set of name/value pairs to be used as custom HTTP headers. Available only with JavaScript API\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param {luga.ajaxform.Sender.options} options\r\n\t * @constructor\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null,\r\n\t\t\theaders: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toJson(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t * @param {jquery|undefined} [rootNode=jQuery(\"body\")] Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.ajaxform.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jQuery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {String}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {String}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {Boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {Object} event\r\n\t\t * @return {Array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery|undefined} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                          Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jQuery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @return {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {String} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {String} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {String} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {String} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {String} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {String} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {String} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {String} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {String} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {String} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {String} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {String} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {Number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {Number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param {regexp} rex\r\n\t * @param {Number} year\r\n\t * @param {Number} month\r\n\t * @param {Number} day\r\n\t * @param {String} separator\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {String}   dateStr\r\n\t * @param {String}   dateSpecKey\r\n\t * @return {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])/([0-3][0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])/([0-3]?[0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])/([0-1][0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])/([0-1]?[0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t * @param {jQuery} [rootNode=jQuery(\"body\")]  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jQuery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options} options\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jQuery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/*! \nLuga Data 0.9.7 2018-03-18T16:40:49.568Z\nCopyright 2013-2018 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.isFunction(filter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.isFunction(formatter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\n/* global ActiveXObject */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.xml\");\r\n\r\n\tluga.data.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.data.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.data.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @return {Array<Node>}\r\n\t */\r\n\tluga.data.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @return {Object}\r\n\t */\r\n\tluga.data.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.data.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.data.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @return {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @return {String}\r\n\t */\r\n\tluga.data.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.data.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @return {Document}\r\n\t */\r\n\tluga.data.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.data.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.data.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<String>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<String>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(luga.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<String>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.DetailSet: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {String} message\r\n\t * @property {Object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {String} textStatus\r\n\t * @property {String} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = {};\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError,\r\n\t\t\t\t// Need to override jQuery's XML converter\r\n\t\t\t\tconverters: {\r\n\t\t\t\t\t\"text xml\": luga.data.xml.parseFromString\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {String}   textStatus   HTTP status\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {String}   textStatus   HTTP status\r\n\t\t * @param {String}   errorThrown  Error message from jQuery\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         JSON data. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {Node} node\r\n\t\t */\r\n\t\tthis.loadRawXml = function(node){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(node);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {Node}     xmlDoc       XML data. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlDoc, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.data.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.data.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"text\";\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given\r\n\t\t * @param {jQuery} item  A jQuery wrapper around an <item>\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\trec[self.itemElements[i]] = jQuery(item).find(self.itemElements[i]).text();\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {jQuery} $channel A jQuery wrapper around the <channel> tag\r\n\t\t */\r\n\t\tvar setChannelMeta = function($channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tself.channelMeta[self.channelElements[i]] = $channel.find(\">\" + self.channelElements[i]).text();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML document\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr  XML document as string\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(xmlStr);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call\r\n\t\t * @param {String}   xmlStr       XML document as string. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlStr, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlStr;\r\n\t\t\tvar $xml = jQuery(jQuery.parseXML(xmlStr));\r\n\t\t\tvar items = [];\r\n\t\t\t// Collect data from each <item>\r\n\t\t\t$xml.find(\"item\").each(function(index, element){\r\n\t\t\t\titems.push(itemToHash(jQuery(this)));\r\n\t\t\t});\r\n\t\t\tsetChannelMeta($xml.find(\"channel\"));\r\n\t\t\t// Insert all records\r\n\t\t\tself.insert(items);\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.data.Rss2Dataset.version = \"0.6.0\";\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.context\r\n\t *\r\n\t * @extend luga.data.DataSet.context\r\n\t * @property {Number} currentPageNumber        The current page index. Starting at 1\r\n\t * @property {Number} currentPageRecordCount   The total number of records in the current page\r\n\t * @property {Number} pageCount                The total number of pages required to display all of the data\r\n\t * @property {Number} pageSize                 The maximum number of items that can be in a page\r\n\t * @property {Number} currentOffsetStart       Zero-based offset of the first record inside the current page\r\n\t * @property {Number} currentOffsetEnd         Zero-based offset of the last record inside the current page\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t * @property {Number}            pageSize       The max number of rows in a given page. Default to 10\r\n\t */\r\n\r\n\t/*\r\n\t *  PagedView class\r\n\t *  Register itself as observer of the passed dataSet and handle pagination on it\r\n\t *\r\n\t * @param {luga.data.PagedView.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t */\r\n\tluga.data.PagedView = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.PagedView: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.PagedView: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.PagedView} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\tvar pageSize = 10;\r\n\t\tif(options.pageSize !== undefined){\r\n\t\t\tpageSize = options.pageSize;\r\n\t\t}\r\n\r\n\t\tvar currentPage = 1;\r\n\t\tvar currentOffsetStart = 0;\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.PagedView.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = self.parentDataSet.getContext();\r\n\t\t\tcontext.entities = context.entities.slice(self.getCurrentOffsetStart(), self.getCurrentOffsetEnd() + 1);\r\n\t\t\t// Additional fields\r\n\t\t\tcontext.currentPageNumber = self.getCurrentPageNumber();\r\n\t\t\tcontext.currentPageRecordCount = context.entities.length;\r\n\t\t\tcontext.currentOffsetEnd = self.getCurrentOffsetEnd();\r\n\t\t\tcontext.currentOffsetStart = self.getCurrentOffsetStart();\r\n\t\t\tcontext.pageSize = self.getPageSize();\r\n\t\t\tcontext.pageCount = self.getPagesCount();\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the last record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetEnd = function(){\r\n\t\t\tvar offSet = self.getCurrentOffsetStart() + self.getPageSize() - 1;\r\n\t\t\tif(offSet > self.getRecordsCount()){\r\n\t\t\t\toffSet = self.getRecordsCount();\r\n\t\t\t}\r\n\t\t\treturn offSet;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the first record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetStart = function(){\r\n\t\t\treturn currentOffsetStart;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the current page index. Starting at 1\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentPageNumber = function(){\r\n\t\t\treturn currentPage;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the total number of pages required to display all of the data\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPagesCount = function(){\r\n\t\t\treturn parseInt((self.parentDataSet.getRecordsCount() + self.getPageSize() - 1) / self.getPageSize());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the maximum number of items that can be in a page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPageSize = function(){\r\n\t\t\treturn pageSize;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the given page number\r\n\t\t * Fails silently if the given page number is out of range\r\n\t\t * It also change the index of the current row to match the first record in the page\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.goToPage = function(pageNumber){\r\n\t\t\tif(self.isPageInRange(pageNumber) === false){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(pageNumber === self.getCurrentPageNumber()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPage = pageNumber;\r\n\t\t\tcurrentOffsetStart = ((pageNumber - 1) * self.getPageSize());\r\n\r\n\t\t\tself.setCurrentRowIndex(self.getCurrentOffsetStart());\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the next page\r\n\t\t * Fails silently if the current page is the last one\r\n\t\t */\r\n\t\tthis.goToNextPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageNumber() + 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the previous page\r\n\t\t * Fails silently if the current page is the first one\r\n\t\t */\r\n\t\tthis.goToPrevPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageNumber() - 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given page is within range. False otherwise\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPageInRange = function(pageNumber){\r\n\t\t\tif(pageNumber < 1 || pageNumber > self.getPagesCount()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/* Proxy methods */\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\treturn self.parentDataSet.getCurrentRowIndex();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn self.parentDataSet.getRecordsCount();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet .loadData() method, if any\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(self.parentDataSet.loadData !== undefined){\r\n\t\t\t\tself.parentDataSet.loadData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\tself.parentDataSet.setCurrentRowId(rowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tself.parentDataSet.setCurrentRowIndex(index);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tself.parentDataSet.setState(newState);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * Be aware this only sort the data, it does not affects pagination\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\tself.parentDataSet.sort(columnNames, sortOrder);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on jQuery(document).ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {jQuery} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jQuery} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {jquery|undefined} [rootNode=jQuery(\"body\"]   Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {jQuery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {jQuery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<String>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jQuery} node\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jQuery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\t\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t\t// It's a detailSet, abort\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.on(\"click\", function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\tluga.data.widgets.PagingBar = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tSAFE_HREF: \"javascript:;\"\r\n\t\t};\r\n\r\n\t\t// TODO: validate options\r\n\t\t// TODO: enum for style\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.PagedView} */\r\n\t\t\tpagedView: undefined,\r\n\t\t\t/** @type {Element} */\r\n\t\t\tnode: undefined,\r\n\t\t\tstyle: \"links\",\r\n\t\t\tnextText: \">\",\r\n\t\t\tprevText: \"<\",\r\n\t\t\tseparator: \" | \",\r\n\t\t\tmaxLinks: 20\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.data.widgets.PagingBar}\r\n\t\t */\r\n\t\tvar self = this;\r\n\r\n\t\t// Alias/shortcuts\r\n\t\tvar pagedView = self.config.pagedView;\r\n\t\tvar node = self.config.node;\r\n\r\n\t\tpagedView.addObserver(this);\r\n\r\n\t\tthis.render = function(){\r\n\t\t\t// Reset UI\r\n\t\t\tnode.innerHTML = \"\";\r\n\r\n\t\t\tvar pages = pagedView.getPagesCount();\r\n\t\t\tvar pageIndex = pagedView.getCurrentPageNumber();\r\n\r\n\t\t\tif(pages > 1){\r\n\t\t\t\trenderPrevLink(self.config.prevText, pageIndex);\r\n\t\t\t\trenderMainLinks(self.config.maxLinks, self.config.style, self.config.separator);\r\n\t\t\t\trenderNextLink(self.config.nextText, pageIndex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar renderPrevLink = function(text, pageIndex){\r\n\r\n\t\t\tvar textNode = document.createTextNode(text);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex - 1);\r\n\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\r\n\t\t\tif(pageIndex !== 1){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t};\r\n\r\n\t\tvar renderNextLink = function(text, pageIndex){\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t\tvar textNode = document.createTextNode(text);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex + 1);\r\n\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\r\n\t\t\tif(pageIndex !== pagedView.getPagesCount()){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar renderMainLinks = function(maxLinks, style, separator){\r\n\t\t\t// TODO: Review local vars\r\n\t\t\tvar pageSize = pagedView.getPageSize();\r\n\t\t\tvar recordsCount = pagedView.getRecordsCount();\r\n\t\t\tvar pagesCount = pagedView.getPagesCount();\r\n\t\t\tvar currentPageIndex = pagedView.getCurrentPageNumber();\r\n\r\n\t\t\tvar range = getIndexRange(currentPageIndex, maxLinks, pagesCount);\r\n\r\n\t\t\t// Page numbers are between 1 and n. So the loop start from 1\r\n\t\t\tfor(var i = range.startIndex; i < (range.endIndex + 1); i++){\r\n\r\n\t\t\t\tvar linkText = getLinkText(i, style, pageSize, pagesCount, recordsCount);\r\n\t\t\t\tvar textNode = document.createTextNode(linkText);\r\n\r\n\t\t\t\tif(i !== currentPageIndex){\r\n\t\t\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\t\t\taddGoToPageEvent(linkNode, i);\r\n\t\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t\t}\r\n\t\t\t\t// No link on current page\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar strongNode = document.createElement(\"strong\");\r\n\t\t\t\t\tstrongNode.appendChild(textNode);\r\n\t\t\t\t\tnode.appendChild(strongNode);\r\n\t\t\t\t}\r\n\t\t\t\t// Add the separator until last page\r\n\t\t\t\tif(i < (range.endIndex)){\r\n\t\t\t\t\tvar separatorNode = document.createTextNode(separator);\r\n\t\t\t\t\tnode.appendChild(separatorNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar addGoToPageEvent = function(linkNode, pageNumber){\r\n\t\t\tlinkNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tpagedView.goToPage(pageNumber);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tvar getIndexRange = function(currentPageIndex, maxLinks, pagesCount){\r\n\t\t\tvar startIndex = parseInt(currentPageIndex - parseInt(maxLinks / 2));\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\t\t\tvar tempPos = startIndex + maxLinks - 1;\r\n\t\t\tvar endIndex = pagesCount;\r\n\t\t\tif(tempPos < pagesCount){\r\n\t\t\t\tendIndex = tempPos;\r\n\t\t\t}\r\n\t\t\tif(endIndex === pagesCount){\r\n\t\t\t\tstartIndex = pagesCount - maxLinks;\r\n\t\t\t}\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tstartIndex: startIndex,\r\n\t\t\t\tendIndex: endIndex\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar getLinkText = function(i, style, pageSize, pagesCount, recordsCount){\r\n\r\n\t\t\tvar linkText = i;\r\n\r\n\t\t\t// It's a pagebar\r\n\t\t\tif(style === \"pages\"){\r\n\t\t\t\t//linkText = i;\r\n\t\t\t}\r\n\t\t\t// It's a linkbar\r\n\t\t\telse{\r\n\t\t\t\tvar start = \"\";\r\n\t\t\t\tvar end = \"\";\r\n\t\t\t\tif(i !== 1){\r\n\t\t\t\t\tstart = (pageSize * (i - 1)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// First link\r\n\t\t\t\t\tstart = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < (pagesCount)){\r\n\t\t\t\t\tend = start + pageSize - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Last link\r\n\t\t\t\t\tend = recordsCount;\r\n\t\t\t\t}\r\n\t\t\t\tlinkText = start + \" - \" + end;\r\n\t\t\t}\r\n\r\n\t\t\treturn linkText;\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  button          Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\tthis.config.button = jQuery(this.config.button);\r\n\t\tif(this.config.button.length === 0){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tjQuery(self.config.button).on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tthis.config.button.addClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tthis.config.button.removeClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreScrolling.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery|undefined}  node  A jQuery object wrapping the node containing the records. It must have a scrollbar. Optional. If not specified, the whole document is assumed.\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore infinite scrolling class\r\n\t * @param {luga.data.widgets.ShowMoreScrolling.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreScrolling = function(options){\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tnode: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\t\t/** @type {luga.data.widgets.ShowMoreScrolling} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar scrollBody = false;\r\n\t\tif(this.config.node === undefined){\r\n\t\t\tscrollBody = true;\r\n\t\t\tthis.config.node = jQuery(document);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tvar targetNode = self.config.node;\r\n\r\n\t\t\tjQuery(targetNode).scroll(function(){\r\n\t\t\t\tvar scrolledToBottom = false;\r\n\t\t\t\tif(scrollBody === true){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() === (jQuery(targetNode).height() - jQuery(window).height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() >= (targetNode[0].scrollHeight - targetNode.height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif((scrolledToBottom === true) && (self.isEnabled() === true)){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}