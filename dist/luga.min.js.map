{"version":3,"sources":["luga.common.js","luga.ajaxform.js","luga.validator.js","luga.data.js"],"names":["luga","attributesToProperties","node","obj","attributes","undefined","i","length","attr","xml","ATTRIBUTE_PREFIX","name","value","childrenToProperties","childNodes","child","nodeType","isArray","tagName","nodeName","constructor","Array","curValue","push","nodeHasText","getTextValue","childObj","nodeToHash","data","nextSibling","namespace","ns","rootObject","parts","split","window","common","version","extend","baseFunc","func","args","apply","isFunction","type","isPlainObject","Object","prototype","toString","call","proto","getPrototypeOf","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","object","part","shift","merge","target","source","x","setProperty","class2type","forEach","element","collection","toLowerCase","rawType","stringType","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","notifyObservers","payload","method","removeObserver","splice","dom","nodeIterator","getInstance","rootNode","filterFunc","filter","acceptNode","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","document","createNodeIterator","SHOW_ELEMENT","treeWalker","createTreeWalker","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","jQuery","fieldValue","prop","val","string","toHash","toJson","flatData","jsonData","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","selector","find","each","index","item","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","MIME_TYPE","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","result","XPathEvaluator","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlDOMObj","async","loadXML","DOMParser","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","Sender","send","FORM_SELECTOR","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","HEADERS","MISSING_FUNCTION","HANDLERS","options","config","action","location","href","timeout","success","error","successmsg","errormsg","after","headers","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","response","url","sendJson","contentType","initForms","submit","ready","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","api","validateForm","formValidator","validateField","fieldValidator","validateFields","validateChildFields","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","resetCurrentRow","applyFormatter","hasFormatter","selectAll","clearFilter","delete","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","resetCurrentRowToFirst","setCurrentRowId","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","cache","incrementalLoad","dataType","xhrRequest","loadUrl","xhrOptions","loadRecords","xhrError","converters","text xml","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","status","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","nodes","Rss2Dataset","channelElements","itemElements","channelMeta","itemToHash","rec","text","setChannelMeta","$channel","items","$xml","parseXML","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","compile","templateNode","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","get","jItem","click","setRowId","setRowIndex","rowIndex","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","widgets","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents","on","ShowMoreScrolling","scrollBody","targetNode","scroll","scrolledToBottom","scrollTop","height","scrollHeight"],"mappings":"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","file":"luga.min.js","sourcesContent":["/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {String} ns           Namespace as string\r\n\t * @param {Object} [undefined] rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.7dev\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function}           baseFunc  Parent constructor function. Required\r\n\t * @param {function}           func      Child constructor function. Required\r\n\t * @param {array} [undefined]  args      An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is an array. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.isArray = function(obj){\r\n\t\treturn Array.isArray(obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a function. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.isFunction = function(obj){\r\n\t\treturn luga.type(obj) === \"function\";\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {String} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {Object} target  An object that will receive the new properties\r\n\t * @param {Object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\ttarget[x] = source[x];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element, i, collection){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @returns {String}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  {Object} observer  Observer object\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {String}  eventName  Name of the event\r\n\t\t * @param {Object}  payload    Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, payload){\r\n\t\t\tif(luga.type(payload) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && luga.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](payload);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.nodeIterator\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM NodeIterator\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator\r\n\t *\r\n\t * @param {Node}                     rootNode    Start node. Required\r\n\t * @param {function} [undefined]     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {NodeIterator}\r\n\t */\r\n\tluga.dom.nodeIterator.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createNodeIterator(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {Node}                     rootNode    Start node. Required\r\n\t * @param {function} [undefined]     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jQuery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {Boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {Object}              A JavaScript object containing name/value pairs\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Deprecated. Use luga.form.toMap() instead\r\n\t * @deprecated\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\t\treturn luga.form.toMap(rootNode, demoronize);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jQuery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toMap(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jQuery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {Boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {String}               A URI encoded string\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jQuery}  fieldNode\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jQuery}  fieldNode\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {String}              name       Name of the field. Mandatory\r\n\t * @param {jQuery} [undefined]  rootNode   Root node, optional, default to document\r\n\t * @returns {jQuery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jQuery}  rootNode   Root node\r\n\t * @returns {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path);\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @param {String} value   String to be persisted\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tvar json = getRootState(root);\r\n\t\tluga.setProperty(json, path, value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tvar setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tvar getRootState = function(root){\r\n\t\tvar rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {String} str   String containing MS Word's garbage\r\n\t * @returns {String}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @returns {String} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(luga.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {String} str  The querystring\r\n\t * @returns {Object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param   {String} str   String containing placeholders\r\n\t * @param   {Object} obj   An objects containing name/value pairs in string format\r\n\t * @returns {String} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t * @param {String}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t * @param {String}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jQuery}  node      Target node\r\n\t * @param {String}  html      HTML/Text code to inject\r\n\t * @param {String}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XML */\r\n\r\n\tluga.namespace(\"luga.xml\");\r\n\r\n\tluga.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @returns {Array<Node>}\r\n\t */\r\n\tluga.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @returns {Object}\r\n\t */\r\n\tluga.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @returns {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @returns {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @returns {String}\r\n\t */\r\n\tluga.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @returns {Document}\r\n\t */\r\n\tluga.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {String}   msg          Message to display in the GUI\r\n\t * @param {jQuery}   formNode     jQuery object wrapping the form\r\n\t * @param {String}   textStatus   HTTP status\r\n\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {String}   msg          Message to display in the GUI\r\n\t * @param {jQuery}   formNode     jQuery object wrapping the form\r\n\t * @param {String}   textStatus   HTTP status\r\n\t * @param {String}   errorThrown  Error message from jQuery\r\n\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {String}   msg          Message to display in the GUI\r\n\t * @param {jQuery}   formNode     jQuery object wrapping the form\r\n\t * @param {String}   textStatus   HTTP status\r\n\t * @param {String}   errorThrown  Error message from jQuery\r\n\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jQuery}       formNode  jQuery object wrapping the form\r\n\t * @param {jQuery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\",\r\n\t\t\tHEADERS: \"data-lugajax-headers\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jQuery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {String} method       HTTP method to be used. Default to GET\r\n\t * @property {Number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {String} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {String} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {String} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {String} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {String} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {String} after        Name of the function to be invoked after the form is send. Default to null\r\n\t * @property {Object} headers      A set of name/value pairs to be used as custom HTTP headers. Available only with JavaScript API\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null,\r\n\t\t\theaders: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toJson(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t * @param {jquery|undefined} [jQuery(\"body\")] rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.ajaxform.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jQuery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {String}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {String}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {Boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {Object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery|undefined} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                          Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jQuery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {String} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {String} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {String} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {String} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {String} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {String} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {String} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {String} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {String} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {String} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {String} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {String} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {Number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {Number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {Number}\r\n\t * @param month     {Number}\r\n\t * @param day       {Number}\r\n\t * @param separator {String}\r\n\t *\r\n\t * @returns {Object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {String}   dateStr\r\n\t * @param {String}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t * @param {jQuery} [jQuery(\"body\")] rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jQuery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {Boolean}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jQuery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/*! \nLuga Data 0.9.7dev 2017-10-27T19:30:08.056Z\nCopyright 2013-2017 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throws {Exception}\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      filter. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @returns {array.<luga.data.DataSet.row>}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.isFunction(filter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FORMATTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      updater. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.isFunction(formatter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [undefined] filter   A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                                        The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @returns {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @returns {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @returns {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(luga.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function}  [undefined] filter   An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                                         The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @returns {array.<luga.data.DataSet.row>}\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fires stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {string|array<string>}              columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [\"toggle\"]  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fires preDataSorted\r\n\t\t * @fires dataSorted\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter.  Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater. Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {String} message\r\n\t * @property {Object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {String} textStatus\r\n\t * @property {String} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = {};\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError,\r\n\t\t\t\t// Need to override jQuery's XML converter\r\n\t\t\t\tconverters: {\r\n\t\t\t\t\t\"text xml\": luga.xml.parseFromString\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {String}   textStatus   HTTP status\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {String}   textStatus   HTTP status\r\n\t\t * @param {String}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         JSON data. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @returns {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {Node} Node\r\n\t\t */\r\n\t\tthis.loadRawXml = function(node){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(node);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {Node}     xmlDoc       XML data. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlDoc, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extends luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"text\";\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given\r\n\t\t * @param {jQuery} item  A jQuery wrapper around an <item>\r\n\t\t * @returns {Object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\trec[self.itemElements[i]] = jQuery(item).find(self.itemElements[i]).text();\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {jQuery} $channel A jQuery wrapper around the <channel> tag\r\n\t\t */\r\n\t\tvar setChannelMeta = function($channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tself.channelMeta[self.channelElements[i]] = $channel.find(\">\" + self.channelElements[i]).text();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML document\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr  XML document as string\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(xmlStr);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call\r\n\t\t * @param {String}   xmlStr       XML document as string. Either returned from the server or passed directly\r\n\t\t * @param {String}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {Object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlStr, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlStr;\r\n\t\t\tvar $xml = jQuery(jQuery.parseXML(xmlStr));\r\n\t\t\tvar items = [];\r\n\t\t\t// Collect data from each <item>\r\n\t\t\t$xml.find(\"item\").each(function(index, element){\r\n\t\t\t\titems.push(itemToHash(jQuery(this)));\r\n\t\t\t});\r\n\t\t\tsetChannelMeta($xml.find(\"channel\"));\r\n\t\t\t// Insert all records\r\n\t\t\tself.insert(items);\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.data.Rss2Dataset.version = \"0.6.0\";\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extends luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on jQuery(document).ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @returns {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {jQuery} node\r\n\t * @returns {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jQuery} node\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {jquery|undefined} [jQuery(\"body\"] rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {jQuery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @returns {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {jQuery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {array.<string>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @fires regionRendered\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.region.Base\r\n\t * @fires regionRendered\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jQuery} node\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jQuery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\t\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t\t// It's a detailSet, abort\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t // Remove class from everyone\r\n\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @returns {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {string|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extends luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  button          Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.widgets.ShowMore\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\tthis.config.button = jQuery(this.config.button);\r\n\t\tif(this.config.button.length === 0){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tjQuery(self.config.button).on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tthis.config.button.addClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tthis.config.button.removeClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreScrolling.options\r\n\t *\r\n\t * @extends luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery|undefined}  node  A jQuery object wrapping the node containing the records. It must have a scrollbar. Optional. If not specified, the whole document is assumed.\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore infinite scrolling class\r\n\t * @param {luga.data.widgets.ShowMoreScrolling.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.widgets.ShowMore\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreScrolling = function(options){\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tnode: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\t\t/** @type {luga.data.widgets.ShowMoreScrolling} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar scrollBody = false;\r\n\t\tif(this.config.node === undefined){\r\n\t\t\tscrollBody = true;\r\n\t\t\tthis.config.node = jQuery(document);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tvar targetNode = self.config.node;\r\n\r\n\t\t\tjQuery(targetNode).scroll(function(){\r\n\t\t\t\tvar scrolledToBottom = false;\r\n\t\t\t\tif(scrollBody === true){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() === (jQuery(targetNode).height() - jQuery(window).height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() >= (targetNode[0].scrollHeight - targetNode.height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif((scrolledToBottom === true) && (self.isEnabled() === true)){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}