{"version":3,"sources":["luga.min.js","luga.core.js","luga.ajaxform.js","luga.csi.js","luga.validator.js"],"names":["luga","version","CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","namespace","ns","rootObject","parts","split","undefined","window","i","length","extend","baseFunc","func","args","apply","lookupFunction","path","reference","lookupProperty","jQuery","isFunction","object","part","shift","merge","target","obj","setProperty","value","Notifier","this","constructor","observers","prefix","suffix","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","type","push","notifyObservers","data","method","removeObserver","splice","form","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toHash","rootNode","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","attr","fieldValue","fieldType","prop","val","string","toJson","flatData","jsonData","x","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","name","selector","find","each","index","item","format","pattern","$","isArray","RegExp","replace","isPlainObject","String","fromCharCode","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","node","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","sender","Sender","send","FORM_SELECTOR","USER_AGENT","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","MISSING_FUNCTION","HANDLERS","options","config","action","document","location","href","timeout","success","error","successmsg","errormsg","after","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","headers","X-Requested-With","response","url","sendJson","contentType","JSON","stringify","initForms","submit","formHandler","ready","csi","NODE_SELECTOR","URL_ATTRIBUTE","AFTER_ATTRIBUTE","FILE_NOT_FOUND","Include","onSuccess","onError","qXHR","xhrTimeout","load","XHR_TIMEOUT","afterHandler","loadIncludes","includeObj","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","ERROR_SELECTOR","ERROR_CLASS","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","parse","dirtyValidators","init","formDom","elements","fieldValidatorFactory","getInstance","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","datObj","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","test","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","formValidator","api","validateForm","validateField","fieldValidator","validateFields","validateChildFields"],"mappings":"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","file":"luga.min.js","sourcesContent":[null,"if(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.version = \"0.4.4\";\r\n\r\n\tluga.CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found.\r\n\t * @param {string} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path)\r\n\t\tif(jQuery.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t * It wraps jQuery's extend to make names less ambiguous\r\n\t *\r\n\t * @param {object} target\r\n\t * @param {object} obj\r\n\t */\r\n\tluga.merge = function(target, obj){\r\n\t\tjQuery.extend(target, obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  observer  Observer object\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(jQuery.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, data){\r\n\t\t\tif(jQuery.type(data) !== \"object\"){\r\n\t\t\t\tthrow(luga.CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && jQuery.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {object}               A JavaScript object containing name/value pairs\r\n\t * @throws\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize them into JSON data\r\n\t * @param {jquery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toHash(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {string}               A URI encoded string\r\n\t * @throws\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @return {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @return {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}  name       Name of the field. Mandatory\r\n\t * @param {jquery}  rootNode   Root node, optional, default to document\r\n\t * @return {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name=\" + name + \"]\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @return {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\t/* Utilities */\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @return {string} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif($.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif($.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @return {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga_message\",\r\n\t\t\tERROR_MESSAGE: \"luga_error_message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n}());","/* globals alert */\r\n\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\tluga.ajaxform.version = \"0.7.2\";\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jquery}       formNode  jQuery object wrapping the form\r\n\t * @param {jquery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tUSER_AGENT: \"luga.ajaxform\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jquery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {string} method       HTTP method to be used. Default to GET\r\n\t * @property {number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {string} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {string} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {string} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {string} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {string} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {string} after        Name of the function to be invoked after the form is send. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.ajaxform.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toHash(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.ajaxform.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t */\r\n\tluga.ajaxform.initForms = function(){\r\n\t\tjQuery(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.csi\");\r\n\r\n\tluga.csi.version = \"1.1.1\";\r\n\r\n\tluga.csi.CONST = {\r\n\t\tNODE_SELECTOR: \"div[data-lugacsi]\",\r\n\t\tURL_ATTRIBUTE: \"data-lugacsi\",\r\n\t\tAFTER_ATTRIBUTE: \"data-lugacsi-after\",\r\n\t\tUSER_AGENT: \"luga.csi\",\r\n\t\tMESSAGES: {\r\n\t\t\tFILE_NOT_FOUND: \"luga.csi failed to retrieve text from: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.csi.Include.options\r\n\t *\r\n\t * @property {jquery}   rootNode     Root node for widget (DOM reference). Required\r\n\t * @property {string}   url          Url to be included. Optional. Default to the value of the \"data-lugacsi\" attribute inside rootNode\r\n\t * @property {function} success      Function that will be invoked once the url is successfully fetched. Optional, default to the internal \"onSuccess\" method\r\n\t * @property {function} after        Function that will be invoked once the include is successfully performed.\r\n\t *                                   It will be called with the handler(rootNode, url, response) signature. Optional, it can be set using the \"data-lugacsi-after\" attribute\r\n\t * @property {function} error        Function that will be invoked if the url request fails. Optional, default to the internal \"onError\" method\r\n\t * @property {int}      xhrTimeout   Timeout for XHR call (ms). Optional. Default to 5000 ms\r\n\t */\r\n\r\n\t/**\r\n\t * Client-side Include widget\r\n\t *\r\n\t * @param {luga.csi.Include.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.csi.Include = function(options){\r\n\r\n\t\tvar onSuccess = function(response, textStatus, jqXHR){\r\n\t\t\tjQuery(config.rootNode).html(response);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar onError = function(qXHR, textStatus, errorThrown){\r\n\t\t\tthrow(luga.string.format(luga.csi.CONST.MESSAGES.FILE_NOT_FOUND, [config.url]));\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\t\t\turl: jQuery(options.rootNode).attr(luga.csi.CONST.URL_ATTRIBUTE),\r\n\t\t\tafter: jQuery(options.rootNode).attr(luga.csi.CONST.AFTER_ATTRIBUTE),\r\n\t\t\tsuccess: onSuccess,\r\n\t\t\terror: onError,\r\n\t\t\txhrTimeout: 5000\r\n\t\t};\r\n\t\tluga.merge(config, options);\r\n\r\n\t\tthis.load = function(){\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\turl: config.url,\r\n\t\t\t\ttimeout: config.XHR_TIMEOUT,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.csi.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tconfig.success.apply(null, [response, textStatus, jqXHR]);\r\n\t\t\t\t\tvar afterHandler = luga.lookupFunction(config.after);\r\n\t\t\t\t\tif(afterHandler !== undefined){\r\n\t\t\t\t\t\tafterHandler.apply(null, [config.rootNode, config.url, response]);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\tconfig.error.apply(null, [jqXHR, textStatus, errorThrown]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke this to programmatically load CSI inside the current document\r\n\t */\r\n\tluga.csi.loadIncludes = function(){\r\n\t\tjQuery(luga.csi.CONST.NODE_SELECTOR).each(function(index, item){\r\n\t\t\tvar includeObj = new luga.csi.Include({rootNode: item});\r\n\t\t\tincludeObj.load();\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.csi.loadIncludes();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\tluga.validator.version = \"0.9.11\";\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\r\n\t\t// Reset all parents\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tjQuery(validators[i].node).parent().addClass(ERROR_CLASS);\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructs\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt){\r\n\t\t\t\tif(requiredAtt === true){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif(requiredAtt === false){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\t\tif(functionReference !== undefined){\r\n\t\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Loop over all the available rules\r\n\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t */\r\n\tluga.validator.initForms = function(){\r\n\t\tjQuery(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tvar dirtyValidators = formValidator.validate();\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() === true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\t\tcallBack(null, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = [];\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}