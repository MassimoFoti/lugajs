{"version":3,"sources":["luga.min.js","luga.common.js","luga.ajaxform.js","luga.validator.js","luga.data.js"],"names":["luga","attributesToProperties","node","obj","attributes","undefined","i","length","attr","xml","ATTRIBUTE_PREFIX","name","value","childrenToProperties","childNodes","child","nodeType","isArray","tagName","nodeName","constructor","Array","curValue","push","nodeHasText","getTextValue","childObj","nodeToHash","data","nextSibling","namespace","ns","rootObject","parts","split","window","common","version","extend","baseFunc","func","args","apply","isFunction","type","isPlainObject","Object","prototype","toString","call","proto","getPrototypeOf","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","object","part","shift","merge","target","source","x","setProperty","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","prefix","suffix","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","notifyObservers","method","removeObserver","splice","class2type","forEach","element","collection","toLowerCase","rawType","stringType","dom","treeWalker","getInstance","rootNode","filterFunc","filter","acceptNode","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","document","createTreeWalker","SHOW_ELEMENT","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","jQuery","fieldValue","fieldType","prop","val","string","toHash","toJson","flatData","jsonData","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","selector","find","each","index","item","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToHash","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","MIME_TYPE","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","evaluator","XPathEvaluator","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToString","serializer","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlParser","xmlDOMObj","async","loadXML","DOMParser","domDoc","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","sender","Sender","send","FORM_SELECTOR","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","HEADERS","MISSING_FUNCTION","HANDLERS","options","config","action","location","href","timeout","success","error","successmsg","errormsg","after","headers","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","response","url","sendJson","contentType","initForms","submit","formHandler","ready","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","ERROR_SELECTOR","ERROR_CLASS","ALERT_SELECTOR","FAILED_UPDATE","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","datObj","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","formValidator","api","validateForm","validateField","fieldValidator","validateFields","validateChildFields","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","deleteAll","applyFilter","hasFilter","resetCurrentRow","applyFormatter","hasFormatter","selectAll","clearFilter","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ret","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","cache","incrementalLoad","dataType","xhrRequest","loadUrl","xhrOptions","loadRecords","xhrError","converters","text xml","cancelRequest","abort","getUrl","loadData","setUrl","newUrl","status","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","nodes","Rss2Dataset","channelElements","itemElements","channelMeta","itemToHash","rec","text","setChannelMeta","$channel","items","$xml","parseXML","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","fetchTemplate","compile","templateNode","templateSrc","generateHtml","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","get","jItem","click","setRowId","setRowIndex","rowIndex","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","date","ascending","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","widgets","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents","on","ShowMoreScrolling","scrollBody","targetNode","scroll","scrolledToBottom","scrollTop","height","scrollHeight"],"mappings":"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","file":"luga.min.js","sourcesContent":[null,"/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.5\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {array}    args      An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is an array. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isArray = function(obj){\r\n\t\treturn Array.isArray(obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a function. False otherwise\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isFunction = function(obj){\r\n\t\treturn luga.type(obj) === \"function\";\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {string} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {object} target  An object that will receive the new properties\r\n\t * @param {object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\ttarget[x] = source[x];\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  {object} observer  Observer object\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, data){\r\n\t\t\tif(luga.type(data) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && luga.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element, i, collection){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @returns {string}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {Node}         rootNode    Start node. Required\r\n\t * @param {function}     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {object}              A JavaScript object containing name/value pairs\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Deprecated. Use luga.form.toMap() instead\r\n\t * @deprecated\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\t\treturn luga.form.toMap(rootNode, demoronize);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jquery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toMap(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {string}               A URI encoded string\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}  name       Name of the field. Mandatory\r\n\t * @param {jquery}  rootNode   Root node, optional, default to document\r\n\t * @returns {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @returns {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {string} root    Top-level key inside localStorage\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path);\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {string} root    Top-level key inside localStorage\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @param {string} value   String to be persisted\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tvar json = getRootState(root);\r\n\t\tluga.setProperty(json, path, value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tvar setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tvar getRootState = function(root){\r\n\t\tvar rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @returns {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(luga.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {string} str  The querystring\r\n\t * @returns {object}\r\n\t */\r\n\tluga.string.queryToHash = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(luga.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param   {string} str   String containing placeholders\r\n\t * @param   {object} obj   An objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XML */\r\n\r\n\tluga.namespace(\"luga.xml\");\r\n\r\n\tluga.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {string} path\r\n\t * @returns {Array<Node>}\r\n\t */\r\n\tluga.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @returns {object}\r\n\t */\r\n\tluga.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @returns {string}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @returns {string}\r\n\t */\r\n\tluga.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.xml.MIME_TYPE);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {string} xmlStr\r\n\t * @returns {Document}\r\n\t */\r\n\tluga.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jquery}       formNode  jQuery object wrapping the form\r\n\t * @param {jquery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\",\r\n\t\t\tHEADERS: \"data-lugajax-headers\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jquery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {string} method       HTTP method to be used. Default to GET\r\n\t * @property {number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {string} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {string} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {string} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {string} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {string} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {string} after        Name of the function to be invoked after the form is send. Default to null\r\n\t * @property {object} headers      A set of name/value pairs to be used as custom HTTP headers. Available only with JavaScript API\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null,\r\n\t\t\theaders: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toJson(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t * @param {jquery|undefined} rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.ajaxform.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t * @param {jquery|undefined} rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/*! \r\nLuga Data 0.9.5 2016-10-05T14:00:18.004Z\r\nCopyright 2013-2016 Massimo Foti (massimo@massimocorner.com)\r\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\r\n */\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {string} uuid\r\n\t * @returns {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {string}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.STATE\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {boolean}          isStateLoading\r\n\t * @property {boolean}          isStateError\r\n\t * @property {boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throws {Exception}\r\n\t * @returns {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      filter. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @returns {array.<luga.data.DataSet.row>}\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.isFunction(filter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FORMATTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {array.<luga.data.DataSet.row>} rows. Required\r\n\t * @param {function}                      updater. Required\r\n\t * @param {luga.data.DataSet}             dataset. Required\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.isFunction(formatter) === false){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {string}  state\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {string} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {string}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {string}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {array<string>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {array<string>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {number}                         recordCount\r\n\t * @property {array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {string}                uuid       Unique identifier. Required\r\n\t * @property {array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @fires currentRowChanged\r\n\t * @fires dataSorted\r\n\t * @fires preDataSorted\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.isFunction(options.formatter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.isFunction(options.filter) === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} filter   A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {string} columnName\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @returns {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @returns {number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {string} rowId  Required\r\n\t\t * @returns {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  Required\r\n\t\t * @returns {luga.data.DataSet.row}\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {array.<object>|object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(luga.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fires currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} filter   An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @returns {array.<luga.data.DataSet.row>}\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {string|array<string>} columnNames\r\n\t\t * @param {string}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {string|null} rowId  Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {number} index  New index. Required\r\n\t\t * @fires currentRowChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fires currentRowChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.isFunction(filter) === false){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fires stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {string|array<string>}  columnNames Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER}  sortOrder   Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fires preDataSorted\r\n\t\t * @fires dataSorted\r\n\t\t * @fires dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(luga.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter.  Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater. Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fires stateChanged\r\n\t\t * @fires dataChanged\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.context\r\n\t * @extends luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {string}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.Notifier\r\n\t * @fires dataChanged\r\n\t * @listens dataChanged\r\n\t * @listens currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.DetailSet: dataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @returns {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.xhrError\r\n\t *\r\n\t * @property {string} message\r\n\t * @property {object} jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t * @property {string} textStatus\r\n\t * @property {string} errorThrown\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extends luga.data.DataSet.options\r\n\t * @property {string}    url              URL to be fetched. Default to null\r\n\t * @property {number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param luga.data.HttpDataSet.options\r\n\t * @constructor\r\n\t * @extends luga.data.DataSet\r\n\t * @abstract\r\n\t * @fires dataLoading\r\n\t * @fires xhrError\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = {};\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.dataType = null;\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response, textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError,\r\n\t\t\t\t// Need to override jQuery's XML converter\r\n\t\t\t\tconverters: {\r\n\t\t\t\t\t\"text xml\": luga.xml.parseFromString\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.dataType !== null){\r\n\t\t\t\txhrOptions.dataType = self.dataType;\r\n\t\t\t}\r\n\t\t\tself.xhrRequest = jQuery.ajax(xhrOptions);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @returns {string|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fires dataLoading\r\n\t\t * @throws {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {*}        response     Data returned from the server\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response, textStatus, jqXHR){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {string} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown  Error message from jQuery\r\n\t\t * @fires xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(jqXHR, textStatus, errorThrown){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, jqXHR.status, errorThrown]),\r\n\t\t\t\tjqXHR: jqXHR,\r\n\t\t\t\ttextStatus: textStatus,\r\n\t\t\t\terrorThrown: errorThrown\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @returns {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {json}     json         JSON data. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(json, textStatus, jqXHR){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {string} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extends luga.data.HttpDataSet.options\r\n\t * @property {string} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @returns {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {Node} Node\r\n\t\t */\r\n\t\tthis.loadRawXml = function(node){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(node);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call, apply the path, if any, extract and load records out of it\r\n\t\t * @param {Node}     xmlDoc       XML data. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlDoc, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {string} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n/**\r\n * @typedef {object} luga.data.DataSet.context\r\n * @extends luga.data.stateDescription\r\n *\r\n * @property {number}                         recordCount\r\n * @property {array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.dataType = \"text\";\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given\r\n\t\t * @param {jquery} item  A jQuery wrapper around an <item>\r\n\t\t * @returns {object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\trec[self.itemElements[i]] = jQuery(item).find(self.itemElements[i]).text();\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {jquery} $channel A jQuery wrapper around the <channel> tag\r\n\t\t */\r\n\t\tvar setChannelMeta = function($channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tself.channelMeta[self.channelElements[i]] = $channel.find(\">\" + self.channelElements[i]).text();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @returns {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML document\r\n\t\t * @returns {null|string}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {string} xmlStr  XML document as string\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords(xmlStr);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response or from a direct call\r\n\t\t * @param {string}   xmlStr       XML document as string. Either returned from the server or passed directly\r\n\t\t * @param {string}   textStatus   HTTP status. Automatically passed by jQuery for XHR calls\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest. Automatically passed by jQuery for XHR calls\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(xmlStr, textStatus, jqXHR){\r\n\t\t\tself.rawXml = xmlStr;\r\n\t\t\tvar $xml = jQuery(jQuery.parseXML(xmlStr));\r\n\t\t\tvar items = [];\r\n\t\t\t// Collect data from each <item>\r\n\t\t\t$xml.find(\"item\").each(function(index, element){\r\n\t\t\t\titems.push(itemToHash(jQuery(this)));\r\n\t\t\t});\r\n\t\t\tsetChannelMeta($xml.find(\"channel\"));\r\n\t\t\t// Insert all records\r\n\t\t\tself.insert(items);\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.data.Rss2Dataset.version = \"0.6.0\";\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extends luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {string}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extends luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {string}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {boolean} autoregister  Determine if we call luga.data.region.init() on jQuery(document).ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @returns {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {jquery} node\r\n\t * @returns {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE);\r\n\t};\r\n\r\n\t/**\r\n\t * Given a jQuery object wrapping an HTML node, initialize the relevant Region handler\r\n\t * @param {jquery} node\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === undefined){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === undefined){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {jquery|undefined} rootNode  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.data.region.CONST.SELECTORS.REGION).each(function(index, item){\r\n\t\t\tluga.data.region.init(jQuery(item));\r\n\t\t});\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.description\r\n\t *\r\n\t * @property {jquery}                                node   A jQuery object wrapping the node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @returns {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.options\r\n\t *\r\n\t * @property {jquery} node                                Either a jQuery object wrapping the node or the naked DOM object that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {string} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {array.<string>} traits                      An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {string} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @fires regionRendered\r\n\t * @listens dataChanged\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.node = jQuery(options.node);\r\n\t\tif(options.node.length === 0){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {array.<string>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.attr(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== undefined){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node.data(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE, this);\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.region.Base\r\n\t * @fires regionRendered\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {jquery} node\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.html());\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = jQuery(\"#\" + self.config.templateId);\r\n\t\t\t\tif(templateNode.length !== 1){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.attr(\"src\");\r\n\t\t\t\tif(templateSrc === undefined){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.html());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\turl: templateSrc,\r\n\t\t\t\t\t\tdataType: \"text\",\r\n\t\t\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tjQuery.ajax(xhrOptions);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fires regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.html(this.generateHtml());\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {jquery}                                 node          A jQuery object wrapping the Region's node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.find(CONST.SELECTORS.SELECT);\r\n\t\tif(nodes.length > 0){\r\n\t\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t\t// It's a detailSet, abort\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar cssClass = nodes.attr(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\t// Clean-up\r\n\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t// Default to zero\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t // Remove class from everyone\r\n\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tjQuery(nodes.get(index)).addClass(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event\r\n\t\t\tnodes.each(function(index, item){\r\n\t\t\t\tvar jItem = jQuery(item);\r\n\t\t\t\tjItem.click(function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tnodes.removeClass(cssClass);\r\n\t\t\t\t\tjItem.addClass(cssClass);\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_ID).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowId = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SET_ROW_INDEX).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar rowIndex = parseInt(jItem.attr(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\toptions.node.find(CONST.SELECTORS.SORT).each(function(index, item){\r\n\t\t\tvar jItem = jQuery(item);\r\n\t\t\tjItem.click(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = jItem.attr(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {string} luga.data.sort.ORDER\r\n\t * @enum {string}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {string}  sortOrder\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {string}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @returns {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {string} paramPath            Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {string} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extends luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  button          Button that will trigger the showMore. Required\r\n\t * @property {string}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.widgets.ShowMore\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\t// Ensure it's a jQuery object\r\n\t\tthis.config.button = jQuery(this.config.button);\r\n\t\tif(this.config.button.length === 0){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tjQuery(self.config.button).on(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tthis.config.button.addClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tthis.config.button.removeClass(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.data.ShowMoreScrolling.options\r\n\t *\r\n\t * @extends luga.data.widgets.ShowMore.options\r\n\t * @property {jQuery}  node  A jQuery object wrapping the node containing the records. It must have a scrollbar. Optional. If not specified, the whole document is assumed.\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore infinite scrolling class\r\n\t * @param {luga.data.widgets.ShowMoreScrolling.options} options\r\n\t * @constructor\r\n\t * @extends luga.data.widgets.ShowMore\r\n\t * @listens stateChanged\r\n\t * @throws {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreScrolling = function(options){\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {jQuery} */\r\n\t\t\tnode: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\t\t/** @type {luga.data.widgets.ShowMoreScrolling} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar scrollBody = false;\r\n\t\tif(this.config.node === undefined){\r\n\t\t\tscrollBody = true;\r\n\t\t\tthis.config.node = jQuery(document);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\t\t\tvar targetNode = self.config.node;\r\n\r\n\t\t\tjQuery(targetNode).scroll(function(){\r\n\t\t\t\tvar scrolledToBottom = false;\r\n\t\t\t\tif(scrollBody === true){\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() === (jQuery(targetNode).height() - jQuery(window).height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(jQuery(targetNode).scrollTop() >= (targetNode[0].scrollHeight - targetNode.height())){\r\n\t\t\t\t\t\tscrolledToBottom = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif((scrolledToBottom === true) && (self.isEnabled() === true)){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}