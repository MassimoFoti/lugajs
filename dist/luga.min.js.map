{"version":3,"sources":["luga.min.js","luga.core.js","luga.ajaxform.js","luga.csi.js","luga.validator.js"],"names":["luga","version","CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","namespace","ns","rootObject","parts","split","undefined","window","i","length","extend","baseFunc","func","args","apply","merge","target","obj","jQuery","lookup","reference","isFunction","object","part","shift","Notifier","this","constructor","observers","prefix","suffix","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","type","push","notifyObservers","data","method","removeObserver","splice","form","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","HASH_DELIMITER","toQueryString","rootNode","demoronize","fields","utils","getChildFields","isSuccessfulField","fieldName","attr","fieldValue","val","fieldType","prop","j","appendQueryString","encodeURIComponent","string","toHash","map","join","fieldNode","isInputField","getFieldGroup","name","selector","find","each","index","item","format","pattern","$","isArray","RegExp","replace","isPlainObject","x","String","fromCharCode","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","node","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","FORM_SELECTOR","USER_AGENT","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","MISSING_FUNCTION","HANDLERS","Sender","options","config","action","document","location","href","timeout","success","error","successmsg","errormsg","after","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","send","formData","ajax","headers","X-Requested-With","response","url","sendJson","contentType","JSON","stringify","initForms","submit","event","preventDefault","formHandler","ready","csi","NODE_SELECTOR","URL_ATTRIBUTE","AFTER_ATTRIBUTE","FILE_NOT_FOUND","Include","onSuccess","onError","qXHR","xhrTimeout","load","XHR_TIMEOUT","afterHandler","loadIncludes","includeObj","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","ERROR_SELECTOR","ERROR_CLASS","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","parse","dirtyValidators","init","formDom","elements","fieldValidatorFactory","getInstance","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","datObj","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","test","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","formValidator","api","validateForm","validateField","fieldValidator","validateFields","validateChildFields"],"mappings":"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","file":"luga.min.js","sourcesContent":[null,"if(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.version = \"0.4.1\";\r\n\r\n\tluga.CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Merge the contents of two objects together into the first object\r\n\t * It wraps jQuery's extend to make names less ambiguous\r\n\t *\r\n\t * @param {object} target\r\n\t * @param {object} obj\r\n\t */\r\n\tluga.merge = function(target, obj){\r\n\t\tjQuery.extend(target, obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns null, if the reference has not been found.\r\n\t * @param {string} reference   Fully qualified name of a function\r\n\t * @returns {*}                The javascript reference to the function\r\n\t */\r\n\tluga.lookup = function(reference){\r\n\t\tif(!reference){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif(jQuery.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\tvar object = window;\r\n\t\tvar parts = reference.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(part in object){\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(jQuery.isFunction(object)){\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  observer  Observer object\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(jQuery.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, data){\r\n\t\t\tif(jQuery.type(data) !== \"object\"){\r\n\t\t\t\tthrow(luga.CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && jQuery.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t},\r\n\t\tHASH_DELIMITER: \",\"\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {string}               A URI encoded string\r\n\t * @throws\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, comma-delimited value\r\n\t * You can change the delimiter by setting the value of luga.form.CONST.HASH_DELIMITER\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {object}               A JavaScript object containing name/value pairs\r\n\t * @throws\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val().join(luga.form.CONST.HASH_DELIMITER);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] += luga.form.CONST.HASH_DELIMITER + fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @return {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @return {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}  name       Name of the field. Mandatory\r\n\t * @param {jquery}  rootNode   Root node, optional, default to document\r\n\t * @return {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name=\" + name + \"]\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @return {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\t/* Utilities */\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str     String containing placeholders\r\n\t * @param  {*}       args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @return {string}          The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif($.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif($.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @return {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga_message\",\r\n\t\t\tERROR_MESSAGE: \"luga_error_message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n}());","/* globals alert */\r\n\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\tluga.ajaxform.version = \"0.7.0\";\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tUSER_AGENT: \"luga.ajaxform\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jquery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {string} method       HTTP method to be used. Default to GET\r\n\t * @property {number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {string} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {string} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {string} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {string} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {string} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {string} after        Name of the function to be invoked after the form is send. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookup(self.config.after);\r\n\t\t\t\tif(callBack === null){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookup(self.config.before);\r\n\t\t\t\tif(callBack === null){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookup(self.config.error);\r\n\t\t\tif(callBack === null){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookup(self.config.success);\r\n\t\t\tif(callBack === null){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.ajaxform.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\tAS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toHash(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t\"X-Requested-With\": luga.ajaxform.CONST.USER_AGENT\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t */\r\n\tluga.ajaxform.initForms = function(){\r\n\t\tjQuery(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","if(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.csi\");\r\n\r\n\tluga.csi.version = \"1.1.0\";\r\n\r\n\tluga.csi.CONST = {\r\n\t\tNODE_SELECTOR: \"div[data-lugacsi]\",\r\n\t\tURL_ATTRIBUTE: \"data-lugacsi\",\r\n\t\tAFTER_ATTRIBUTE: \"data-lugacsi-after\",\r\n\t\tMESSAGES: {\r\n\t\t\tFILE_NOT_FOUND: \"luga.csi failed to retrieve text from: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.csi.Include.options\r\n\t *\r\n\t * @property {jquery}   rootNode     Root node for widget (DOM reference). Required\r\n\t * @property {string}   url          Url to be included. Optional. Default to the value of the \"data-lugacsi\" attribute inside rootNode\r\n\t * @property {function} success      Function that will be invoked once the url is successfully fetched. Optional, default to the internal \"onSuccess\" method\r\n\t * @property {function} after        Function that will be invoked once the include is successfully performed.\r\n\t *                                   It will be called with the handler(rootNode, url, response) signature. Optional, it can be set using the \"data-lugacsi-after\" attribute\r\n\t * @property {function} error        Function that will be invoked if the url request fails. Optional, default to the internal \"onError\" method\r\n\t * @property {int}      xhrTimeout   Timeout for XHR call (ms). Optional. Default to 5000 ms\r\n\t */\r\n\r\n\t/**\r\n\t * Client-side Include widget\r\n\t *\r\n\t * @param {luga.csi.Include.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.csi.Include = function(options){\r\n\r\n\t\tvar onSuccess = function(response, textStatus, jqXHR){\r\n\t\t\tjQuery(config.rootNode).html(response);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar onError = function(qXHR, textStatus, errorThrown){\r\n\t\t\tthrow(luga.string.format(luga.csi.CONST.MESSAGES.FILE_NOT_FOUND, [config.url]));\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\t\t\turl: jQuery(options.rootNode).attr(luga.csi.CONST.URL_ATTRIBUTE),\r\n\t\t\tafter: jQuery(options.rootNode).attr(luga.csi.CONST.AFTER_ATTRIBUTE),\r\n\t\t\tsuccess: onSuccess,\r\n\t\t\terror: onError,\r\n\t\t\txhrTimeout: 5000\r\n\t\t};\r\n\t\tluga.merge(config, options);\r\n\r\n\t\tthis.load = function(){\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\turl: config.url,\r\n\t\t\t\ttimeout: config.XHR_TIMEOUT,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tconfig.success.apply(null, [response, textStatus, jqXHR]);\r\n\t\t\t\t\tvar afterHandler = luga.lookup(config.after);\r\n\t\t\t\t\tif(afterHandler !== null){\r\n\t\t\t\t\t\tafterHandler.apply(null, [config.rootNode, config.url, response]);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\tconfig.error.apply(null, [jqXHR, textStatus, errorThrown]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke this to programmatically load CSI inside the current document\r\n\t */\r\n\tluga.csi.loadIncludes = function(){\r\n\t\tjQuery(luga.csi.CONST.NODE_SELECTOR).each(function(index, item){\r\n\t\t\tvar includeObj = new luga.csi.Include({rootNode: item});\r\n\t\t\tincludeObj.load();\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.csi.loadIncludes();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\tluga.validator.version = \"0.9.9\";\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\r\n\t\t// Reset all parents\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tjQuery(validators[i].node).parent().addClass(ERROR_CLASS);\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructs\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before();\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after();\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookup(self.config.before);\r\n\t\t\t\tif(callBack !== null){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookup(self.config.error);\r\n\t\t\tif(callBack !== null){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookup(self.config.after);\r\n\t\t\t\tif(callBack !== null){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt){\r\n\t\t\t\tif(requiredAtt === true){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif(requiredAtt === false){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\t\tvar functionReference = luga.lookup(requiredAtt);\r\n\t\t\t\tif(functionReference !== null){\r\n\t\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Loop over all the available rules\r\n\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t */\r\n\tluga.validator.initForms = function(){\r\n\t\tjQuery(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tvar dirtyValidators = formValidator.validate();\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookup(options.error);\r\n\t\t\tif(callBack === null){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() === true){\r\n\t\t\tvar callBack = luga.lookup(options.error);\r\n\t\t\tif(callBack === null){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\t\tcallBack(null, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = [];\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookup(options.error);\r\n\t\t\tif(callBack === null){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}