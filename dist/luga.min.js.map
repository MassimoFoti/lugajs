{"version":3,"sources":["luga.common.js","luga.validator.js","luga.data.js"],"names":["window","luga","namespace","ns","rootObject","parts","split","undefined","i","length","common","version","extend","baseFunc","func","args","apply","isPlainObject","obj","Object","prototype","toString","call","proto","getPrototypeOf","constructor","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","type","object","part","shift","merge","target","source","x","setProperty","value","class2type","forEach","element","toLowerCase","rawType","stringType","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_GENERIC_OBSERVER_PARAMETER","INVALID_EVENT_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","eventObservers","addObserver","observer","eventName","methodName","arguments","push","eventMap","findObserverIndex","eventArray","currentMap","notifyObservers","payload","genericMethod","str","charAt","toUpperCase","substring","generateGenericMethodName","removeObserver","splice","index","dom","delegateEvent","node","eventType","selector","callback","addEventListener","event","currentElement","nodeMatches","matches","msMatchesSelector","ready","fn","document","getIteratorInstance","rootNode","filterFunc","filter","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","acceptNode","createTreeWalker","SHOW_ELEMENT","createNodeIterator","nodeIterator","getInstance","treeWalker","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","getAttribute","fieldValue","getMultiSelectValue","checked","string","Array","isArray","options","querySelectorAll","toJson","flatData","jsonData","toQueryString","multiValues","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","disabled","jQuery","prop","getFieldGroup","name","nodes","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","attr","addClass","replaceWith","before","XHR_CONST","POST_CONTENT_TYPE","xhr","Request","config","method","success","res","console","debug","error","timeout","async","cache","headers","requestedWith","contentType","self","XMLHttpRequest","assembleResponse","status","statusText","responseText","responseType","responseXML","pop","item","ret","header","headersToArray","getAllResponseHeaders","checkReadyState","readyState","httpStatus","abort","isRequestPending","send","url","params","suffix","Date","now","indexOf","finalizeUrl","open","onreadystatechange","setRequestHeader","finalizeRequest","validator","handlers","errorAlert","formNode","validators","errorMsg","focusGiven","message","getFocus","alert","errorBox","htmlStr","FORM_SELECTOR","RULE_PREFIX","DEFAULT_DATE_PATTERN","CUSTOM_ATTRIBUTES","VALIDATE","ERROR","BEFORE","AFTER","BLOCK_SUBMIT","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","MISSING_FUNCTION","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","HANDLERS","FORM_ERROR","FormValidator","blocksubmit","after","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","preventDefault","disableSubmit","buttons","each","buttonNode","val","callBack","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeClass","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","parseInt","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","containDot","secondFieldNode","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","initForms","body","api","validateForm","formValidator","validateField","fieldValidator","validateFields","validateChildFields","data","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","getTextValue","child","childNodes","nodeType","nodeHasText","nextSibling","xml","MIME_TYPE","ATTRIBUTE_PREFIX","DOM_ACTIVEX_NAME","evaluateXPath","retArray","XPathEvaluator","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","ActiveXObject","selectedNodes","selectNodes","nodeToHash","attributes","attributesToProperties","tagName","nodeName","curValue","childObj","childrenToProperties","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlParser","xmlDOMObj","loadXML","DOMParser","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","delete","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","incrementalLoad","xhrRequest","cancelRequest","getUrl","loadData","xhrOptions","response","loadRecords","xhrError","loadUrl","setUrl","newUrl","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","loadFromJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","Rss2Dataset","channelElements","itemElements","channelMeta","extractRecords","rec","itemToHash","items","channel","setChannelMeta","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","PagedView","pageSize","currentPage","currentOffsetStart","getCurrentOffsetStart","getCurrentOffsetEnd","currentPageNumber","getCurrentPageIndex","currentPageRecordCount","currentOffsetEnd","getPageSize","pageCount","getPagesCount","offSet","goToPage","pageNumber","isPageInRange","goToNextPage","goToPrevPage","isPagedView","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","querySelector","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","innerHTML","compile","templateNode","getElementById","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","removeCssClass","className","classList","add","addSelectEvent","setRowId","addRowIdEvent","setRowIndex","rowIndex","addRowIndexEvent","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","dataType","date","ascending","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","PAGING_STYLE","LINKS","PAGES","widgets","PagingBar","INVALID_PAGED_VIEW_PARAMETER","INVALID_NODE_PARAMETER","INVALID_STYLE_PARAMETER","pagedView","Element","style","isValidStyle","nextText","prevText","maxLinks","renderPrevLink","text","pageIndex","textNode","createTextNode","linkNode","createElement","setAttribute","appendChild","addGoToPageEvent","renderNextLink","renderMainLinks","recordsCount","pagesCount","currentPageIndex","endIndex","getEndIndex","labelText","getLabelText","renderCurrentLink","renderCurrentText","renderSeparator","linkText","strongNode","separatorNode","startIndex","tempPos","startText","endText","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents"],"mappings":";;;;;;AACA,GAAA,oBAAA,OACA,KAAA,wBCCA,GDEA,oBAAA,OACAA,OAAAC,SAGA,WACA,aAUAA,KAAAC,UAAA,SAAAC,GAAAC,YACA,MAAAC,MAAAF,GAAAG,MAAA,UACAC,IAAAH,aACAA,WAAAJ,QAEA,IAAA,IAAAQ,EAAA,EAAAA,EAAAH,MAAAI,OAAAD,SACAD,IAAAH,WAAAC,MAAAG,MACAJ,WAAAC,MAAAG,QAEAJ,WAAAA,WAAAC,MAAAG,IAEA,OAAAJ,YAGAH,KAAAC,UAAA,eACAD,KAAAS,OAAAC,QAAA,QASAV,KAAAW,OAAA,SAAAC,SAAAC,KAAAC,MACAF,SAAAG,MAAAF,KAAAC,OASAd,KAAAgB,cAAA,SAAAC,KAGA,GAAA,oBAAAC,OAAAC,UAAAC,SAAAC,KAAAJ,KACA,OAAA,EAGA,MAAAK,MAAAJ,OAAAK,eAAAN,KAGA,GAAA,OAAAK,MACA,OAAA,EAIA,MAAAE,YAAAN,OAAAC,UAAAM,eAAAJ,KAAAC,MAAA,gBAAAA,MAAAE,YACA,cAAA,aAAAA,cAAAE,SAAAN,SAAAC,KAAAG,eAAAE,SAAAN,SAAAC,KAAAH,SAUAlB,KAAA2B,eAAA,SAAAC,MACA,IAAAA,KACA,OAEA,MAAAC,UAAA7B,KAAA8B,eAAA/B,OAAA6B,MACA,MAAA,aAAA5B,KAAA+B,KAAAF,WACAA,eADA,GAcA7B,KAAA8B,eAAA,SAAAE,OAAAJ,MAEA,IAAAI,SAAAJ,KACA,OAGA,QAAAtB,IAAA0B,OAAAJ,MACA,OAAAI,OAAAJ,MAEA,IAAAxB,MAAAwB,KAAAvB,MAAA,KACA,KAAAD,MAAAI,OAAA,GAAA,CACA,MAAAyB,KAAA7B,MAAA8B,QACA,QAAA5B,IAAA0B,OAAAC,MAAA,CACA,GAAA,IAAA7B,MAAAI,OAEA,OAAAwB,OAAAC,MAIAD,OAAAA,OAAAC,SAaAjC,KAAAmC,MAAA,SAAAC,OAAAC,QACA,IAAA,IAAAC,KAAAD,QACA,IAAAA,OAAAZ,eAAAa,KACAF,OAAAE,GAAAD,OAAAC,KAYAtC,KAAAuC,YAAA,SAAAP,OAAAJ,KAAAY,OACA,MAAApC,MAAAwB,KAAAvB,MAAA,KAIA,IAHA,IAAAD,MAAAI,SACAwB,OAAAJ,MAAAY,OAEApC,MAAAI,OAAA,GAAA,CACA,IAAAyB,KAAA7B,MAAA8B,QACA,QAAA5B,IAAA0B,OAAAC,MAAA,CACA,GAAA,IAAA7B,MAAAI,OAAA,CAEAwB,OAAAC,MAAAO,MACA,MAGAR,OAAAA,OAAAC,WAEA7B,MAAAI,OAAA,GAEAwB,OAAAC,SACAD,OAAAA,OAAAC,OAGAD,OAAAC,MAAAO,QAKA,MAAAC,eACA,QAAA,UAAA,OAAA,QAAA,WAAA,SAAA,SAAA,SAAA,SAAA,UAAAC,QAAA,SAAAC,SACAF,WAAA,WAAAE,QAAA,KAAAA,QAAAC,gBASA5C,KAAA+B,KAAA,SAAAd,KACA,GAAA,OAAAA,IACA,MAAA,OAEA,MAAA4B,eAAA5B,IACA,GAAA,WAAA4B,SAAA,aAAAA,QAAA,CAEA,MAAAC,WAAA5B,OAAAC,UAAAC,SAAAC,KAAAJ,KACA,OAAAwB,WAAAK,YAEA,OAAAD,SAUA7C,KAAA+C,gBACAC,gBACAC,kBAAA,wFACAC,mCAAA,sDACAC,iCAAA,0DACAC,uBAAA,uEAUApD,KAAAqD,SAAA,WACA,GAAAC,KAAA9B,cAAAxB,KAAAqD,SACA,MAAArD,KAAA+C,eAAAC,eAAA,kBAMAM,KAAAC,aAKAD,KAAAE,kBAoCAF,KAAAG,YAAA,SAAAC,SAAAC,UAAAC,YACA,GAAA,WAAA5D,KAAA+B,KAAA2B,UACA,MAAA1D,KAAA+C,eAAAC,eAAA,mCAKA,GAHA,IAAAa,UAAArD,QACA8C,KAAAC,UAAAO,KAAAJ,UAEA,IAAAG,UAAArD,OAAA,CACA,GAAA,WAAAR,KAAA+B,KAAA4B,YAAA,WAAA3D,KAAA+B,KAAA6B,YACA,MAAA5D,KAAA+C,eAAAC,eAAA,iCAKA,MAAAe,UACAL,SAAAA,SACAE,WAAAA,iBAGAtD,IAAAgD,KAAAE,eAAAG,WACAL,KAAAE,eAAAG,YAAAI,WAGA,IAAAC,kBAAAV,KAAAE,eAAAG,WAAAI,WACAT,KAAAE,eAAAG,WAAAG,KAAAC,YAWA,MAAAC,kBAAA,SAAAC,WAAAF,UACA,IAAA,IAAAxD,EAAA,EAAAA,EAAA0D,WAAAzD,OAAAD,IAAA,CAIA,MAAA2D,WAAAD,WAAA1D,GACA,GAAA2D,WAAAR,WAAAK,SAAAL,UAAAQ,WAAAN,aAAAG,SAAAH,WACA,OAAArD,EAGA,OAAA,GAYA+C,KAAAa,gBAAA,SAAAR,UAAAS,SACA,GAAA,WAAApE,KAAA+B,KAAAqC,SACA,MAAApE,KAAA+C,eAAAC,eAAA,uBAGA,MAAAqB,cA5FA,SAAAV,WACA,IAAAW,IALA,KASA,OAHAA,KAAAX,UAAAY,OAAA,GAAAC,cACAF,KAAAX,UAAAc,UAAA,GACAH,KAPA,UA+FAI,CAAAf,WACAL,KAAAC,UAAAb,QAAA,SAAAC,cACArC,IAAAqC,QAAA0B,gBAAA,aAAArE,KAAA+B,KAAAY,QAAA0B,iBACA1B,QAAA0B,eAAAD,WAIA,MAAAZ,eAAAF,KAAAE,eAAAG,gBACArD,IAAAkD,gBACAA,eAAAd,QAAA,SAAAC,SACA,aAAA3C,KAAA+B,KAAAY,QAAAe,SAAAf,QAAAiB,cACAjB,QAAAe,SAAAf,QAAAiB,YAAAQ,YAmBAd,KAAAqB,eAAA,SAAAjB,SAAAC,UAAAC,YACA,GAAA,IAAAC,UAAArD,OACA,IAAA,IAAAD,EAAA,EAAAA,EAAA+C,KAAAC,UAAA/C,OAAAD,IACA,GAAA+C,KAAAC,UAAAhD,KAAAmD,SAAA,CACAJ,KAAAC,UAAAqB,OAAArE,EAAA,GACA,MAIA,GAAA,IAAAsD,UAAArD,aACAF,IAAAgD,KAAAE,eAAAG,WAAA,CAIA,MAAAI,UACAL,SAAAA,SACAE,WAAAA,YAEAiB,MAAAb,kBAAAV,KAAAE,eAAAG,WAAAI,WAGA,IAAAc,QACAvB,KAAAE,eAAAG,WAAAiB,OAAAC,MAAA,GAEA,IAAAvB,KAAAE,eAAAG,WAAAnD,eACA8C,KAAAE,eAAAG,eAUA3D,KAAAC,UAAA,YAUAD,KAAA8E,IAAAC,cAAA,SAAAC,KAAAC,UAAAC,SAAAC,UACAH,KAAAI,iBAAAH,UAAA,SAAAI,OAEA,MAAAC,eAAAD,MAAAjD,QACA,IAAApC,KAAA8E,IAAAS,YAAAD,eAAAJ,WACAC,SAAAE,MAAAC,mBAWAtF,KAAA8E,IAAAS,YAAA,SAAAP,KAAAE,UACA,IAAAtB,WAAA,UAMA,YAHAtD,IAAA0E,KAAAQ,cAAAlF,IAAA0E,KAAAS,oBACA7B,WAAA,qBAEAoB,KAAApB,YAAAsB,WAOAlF,KAAA8E,IAAAY,MAAA,SAAAC,IACAC,SAAAR,iBAAA,mBAAAO,KAYA,MAAAE,oBAAA,SAAA9D,KAAA+D,SAAAC,YAEA,MAAAC,kBACA,SAAAhB,MAEA,YAAA1E,IAAAyF,aACA,IAAAA,WAAAf,MACAiB,WAAAC,YAGAD,WAAAE,eAMAC,WAAAJ,kBAEA,OADAI,WAAAC,WAAAL,kBACA,eAAAjE,KACA6D,SAAAU,iBAAAR,SAAAG,WAAAM,aAAAH,YAAA,GAGAR,SAAAY,mBAAAV,SAAAG,WAAAM,aAAAH,YAAA,IAKApG,KAAAC,UAAA,yBAWAD,KAAA8E,IAAA2B,aAAAC,YAAA,SAAAZ,SAAAC,YACA,OAAAF,oBAAA,eAAAC,SAAAC,aAGA/F,KAAAC,UAAA,uBAWAD,KAAA8E,IAAA6B,WAAAD,YAAA,SAAAZ,SAAAC,YACA,OAAAF,oBAAA,aAAAC,SAAAC,aAKA/F,KAAAC,UAAA,aAEAD,KAAA4G,KAAAC,OACAC,eAAA,wBACAC,kBACAC,UAAA,EACAC,OAAA,GAEAC,UACAC,aAAA,wBAeAnH,KAAA4G,KAAAQ,MAAA,SAAAtB,SAAAuB,YACA,GAAA,OAAAvB,SACA,MAAA9F,KAAA4G,KAAAC,MAAAK,SAAA,aAEA,MAAAI,OACAC,OAAAvH,KAAA4G,KAAAY,MAAAC,eAAA3B,UAEA,IAAA,IAAAvF,EAAA,EAAAA,EAAAgH,OAAA/G,OAAAD,IAAA,CACA,MAAAoC,QAAA4E,OAAAhH,GACA,IAAA,IAAAP,KAAA4G,KAAAY,MAAAE,kBAAA/E,SAAA,CACA,MAAAgF,UAAAhF,QAAAiF,aAAA,QACA,IAAAC,WAAA,KAEA,OADAlF,QAAAZ,MAGA,IAAA,kBACA8F,WAAAC,oBAAAnF,SACA,MAEA,IAAA,WACA,IAAA,SACA,IAAAA,QAAAoF,UACAF,WAAAlF,QAAAH,OAEA,MAEA,QACAqF,WAAAlF,QAAAH,MAGA,OAAAqF,cACA,IAAAR,aACAQ,WAAA7H,KAAAgI,OAAAX,WAAAQ,kBAEAvH,IAAAgH,IAAAK,WACAL,IAAAK,WAAAE,YAEA,IAAAI,MAAAC,QAAAZ,IAAAK,YACAL,IAAAK,WAAA7D,KAAA+D,YAGAP,IAAAK,YAAAL,IAAAK,WAAAE,cAMA,OAAAP,KAOA,MAAAQ,oBAAA,SAAA9C,MACA,MAAA6C,cACAM,QAAAnD,KAAAoD,iBAAA,kBACA,IAAA,IAAA7H,EAAA,EAAAA,EAAA4H,QAAA3H,OAAAD,IACAsH,WAAA/D,KAAAqE,QAAA5H,GAAAiC,OAEA,OAAAqF,YAWA7H,KAAA4G,KAAAyB,OAAA,SAAAvC,UACA,MAAAwC,SAAAtI,KAAA4G,KAAAQ,MAAAtB,UACAyC,YACA,IAAA,IAAAjG,KAAAgG,SACAtI,KAAAuC,YAAAgG,SAAAjG,EAAAgG,SAAAhG,IAEA,OAAAiG,UAaAvI,KAAA4G,KAAA4B,cAAA,SAAA1C,SAAAuB,YACA,GAAA,OAAAvB,SACA,MAAA9F,KAAA4G,KAAAC,MAAAK,SAAA,aAEA,IAAA5C,IAAA,GACA,MAAAiD,OAAAvH,KAAA4G,KAAAY,MAAAC,eAAA3B,UAEA,IAAA,IAAAvF,EAAA,EAAAA,EAAAgH,OAAA/G,OAAAD,IAAA,CACA,MAAAoC,QAAA4E,OAAAhH,GACA,IAAA,IAAAP,KAAA4G,KAAAY,MAAAE,kBAAA/E,SAAA,CACA,MAAAgF,UAAAhF,QAAAiF,aAAA,QAEA,OADAjF,QAAAZ,MAGA,IAAA,kBACA,MAAA0G,YAAAX,oBAAAnF,SACA,IAAA,IAAA+F,EAAA,EAAAA,EAAAD,YAAAjI,OAAAkI,IACApE,IAAAqE,kBAAArE,IAAAqD,UAAAc,YAAAlI,GAAA8G,YAEA,MAEA,IAAA,WACA,IAAA,SACA,IAAA1E,QAAAoF,UACAzD,IAAAqE,kBAAArE,IAAAqD,UAAAhF,QAAAH,MAAA6E,aAEA,MAEA,QACA/C,IAAAqE,kBAAArE,IAAAqD,UAAAhF,QAAAH,MAAA6E,cAIA,OAAA/C,KAGA,MAAAqE,kBAAA,SAAArE,IAAAqD,UAAAE,WAAAR,YAYA,MAXA,KAAA/C,MACAA,KAAA,KAEAA,KAAAsE,mBAAAjB,WACArD,KAAA,IAEAA,MADA,IAAA+C,WACAuB,mBAAA5I,KAAAgI,OAAAX,WAAAQ,aAGAe,mBAAAf,aAKA7H,KAAAC,UAAA,mBASAD,KAAA4G,KAAAY,MAAAE,kBAAA,SAAAmB,WACA,OAAA,IAAA7I,KAAA4G,KAAAY,MAAAsB,aAAAD,cAGA,IAAAA,UAAAE,UAGA,OAAAF,UAAAjB,aAAA,UAYA5H,KAAA4G,KAAAY,MAAAsB,aAAA,SAAAD,WACA,YAAAvI,IAAA0I,OAAAH,WAAAI,KAAA,UAIA,IAAAjJ,KAAA4G,KAAAC,MAAAE,iBAAAiC,OAAAH,WAAAI,KAAA,UAcAjJ,KAAA4G,KAAAY,MAAA0B,cAAA,SAAAC,KAAArD,UAEA,OAAAkD,OADA,eAAAG,KAAA,KACArD,WASA9F,KAAA4G,KAAAY,MAAAC,eAAA,SAAA3B,UACA,MAAAyB,UACA6B,MAAAtD,SAAAsC,iBAAApI,KAAA4G,KAAAC,MAAAC,gBACA,IAAA,IAAAvG,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IAAA,CACA,MAAAoC,QAAAyG,MAAA7I,IACA,IAAAP,KAAA4G,KAAAY,MAAAsB,aAAAnG,UACA4E,OAAAzD,KAAAnB,SAGA,OAAA4E,QAGAvH,KAAAC,UAAA,qBASAD,KAAAqJ,aAAAC,SAAA,SAAAC,KAAA3H,MACA,OAAA5B,KAAA8B,eAAA0H,aAAAD,MAAA3H,KAAAR,aAUApB,KAAAqJ,aAAAI,QAAA,SAAAF,KAAA3H,KAAAY,OACA,MAAAkH,KAAAF,aAAAD,MACAvJ,KAAAuC,YAAAmH,KAAA9H,KAAAR,WAAAoB,OACAmH,aAAAJ,KAAAG,OAGA,MAAAC,aAAA,SAAAJ,KAAAG,MACAL,aAAAO,QAAAL,KAAAM,KAAAC,UAAAJ,QAGAF,aAAA,SAAAD,MACA,MAAAQ,SAAAV,aAAAW,QAAAT,MACA,OAAA,OAAAQ,YAGAF,KAAAI,MAAAF,WAGA/J,KAAAC,UAAA,eAQAD,KAAAgI,OAAAX,WAAA,SAAA/C,KAeA,OADAA,KADAA,KADAA,KADAA,KADAA,KADAA,KAFAA,KADAA,KADAA,KADAA,KAFAA,KADAA,IAAAA,IAAA4F,QAAA,IAAAC,OAAAC,OAAAC,aAAA,KAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,KAAA,KAAA,MAEAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MAEAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,OACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,OACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,MACAH,QAAA,IAAAC,OAAAC,OAAAC,aAAA,MAAA,KAAA,QAqBArK,KAAAgI,OAAAsC,OAAA,SAAAhG,IAAAxD,MACA,IAAAyJ,QAAA,KACA,IAAA,IAAAtC,MAAAC,QAAApH,MACA,IAAA,IAAAP,EAAA,EAAAA,EAAAO,KAAAN,OAAAD,IACAgK,QAAA,IAAAJ,OAAA,MAAA5J,EAAA,MAAA,KACA+D,IAAAA,IAAA4F,QAAAK,QAAAzJ,KAAAP,IAGA,IAAA,IAAAP,KAAAgB,cAAAF,MACA,IAAA,IAAAwB,KAAAxB,KACAyJ,QAAA,IAAAJ,OAAA,MAAA7H,EAAA,MAAA,KACAgC,IAAAA,IAAA4F,QAAAK,QAAAzJ,KAAAwB,IAGA,OAAAgC,KAQAtE,KAAAgI,OAAAwC,WAAA,SAAAlG,KACA,MAAAgD,OAIA,GAHA,MAAAhD,IAAAC,OAAA,KACAD,IAAAA,IAAAG,UAAA,IAEA,IAAAH,IAAA9D,OACA,OAAA8G,IAEA,MAAAlH,MAAAkE,IAAAjE,MAAA,KAEA,IAAA,IAAAE,EAAA,EAAAA,EAAAH,MAAAI,OAAAD,IAAA,CACA,MAAAkK,OAAArK,MAAAG,GAAAF,MAAA,KACAsH,UAAA+C,mBAAAD,OAAA,IACA,IAAA5C,WAAA,GACA,IAAA4C,OAAAjK,SACAqH,WAAA6C,mBAAAD,OAAA,UAEAnK,IAAAgH,IAAAK,WACAL,IAAAK,WAAAE,YAEA,IAAAI,MAAAC,QAAAZ,IAAAK,YACAL,IAAAK,WAAA7D,KAAA+D,YAGAP,IAAAK,YAAAL,IAAAK,WAAAE,YAGA,OAAAP,KAGA,MAAAqD,gBAAA,IAAAR,OAAA,cAAA,KAoBAnK,KAAAgI,OAAA4C,SAAA,SAAAtG,IAAArD,KACA,IAAA,IAAAjB,KAAAgB,cAAAC,KAAA,CACA,IAAA4J,QACA,KAAA,QAAAA,QAAAF,gBAAAG,KAAAxG,OAAA,CACA,MAAAyG,SAAA/K,KAAA8B,eAAAb,IAAA4J,QAAA,IACA,QAAAvK,IAAAyK,SAAA,CACA,MAAAR,QAAA,IAAAJ,OAAAU,QAAA,GAAA,KACAvG,IAAAA,IAAA4F,QAAAK,QAAAQ,UAEAJ,gBAAAK,KAAA1G,OAIA,OAAAA,KAGAtE,KAAAC,UAAA,cAEAD,KAAAwH,MAAAX,OACAoE,aACAC,QAAA,eACAC,cAAA,sBAEAC,WAAA,kBASA,MAAAC,cAAA,SAAArG,MACA,IAAAsG,MAAAtL,KAAAwH,MAAAX,MAAAuE,WASA,YARA9K,IAAA0E,OACA,OAAAA,KAAA4C,aAAA,MACA0D,OAAAtG,KAAA4C,aAAA,MAEA,OAAA5C,KAAA4C,aAAA,UACA0D,OAAAtG,KAAA4C,aAAA,UAGA0D,OAOAtL,KAAAwH,MAAA+D,iBAAA,SAAAvG,MACA,MAAAsG,MAAAD,cAAArC,OAAAhE,MAAA,IACAwG,OAAAxC,OAAA,IAAAsC,OAGAE,OAAAhL,OAAA,GACAgL,OAAAC,UAUAzL,KAAAwH,MAAAkE,eAAA,SAAA1G,KAAA2G,MACA,OAAA3L,KAAAwH,MAAAoE,WAAA5G,KAAA2G,KAAA3L,KAAAwH,MAAAX,MAAAoE,YAAAC,UASAlL,KAAAwH,MAAAqE,oBAAA,SAAA7G,KAAA2G,MACA,OAAA3L,KAAAwH,MAAAoE,WAAA5G,KAAA2G,KAAA3L,KAAAwH,MAAAX,MAAAoE,YAAAE,gBAWAnL,KAAAwH,MAAAoE,WAAA,SAAA5G,KAAA2G,KAAAG,eACAxL,IAAAwL,WACAA,SAAA9L,KAAAwH,MAAAX,MAAAoE,YAAAC,SAEA,MAAAI,MAAAD,cAAArC,OAAAhE,MAAA,IACA+G,IAAA/C,OAAA,eACA+C,IAAAC,KAAA,KAAAV,OACAS,IAAAE,SAAAH,UACAC,IAAAJ,KAAAA,MACA,MAAAH,OAAAxC,OAAA,IAAAsC,OAQA,OANAE,OAAAhL,OAAA,EACAgL,OAAAU,YAAAH,KAGA/C,OAAAhE,MAAAmH,OAAAJ,KAEAA,KAKA/L,KAAAC,UAAA,YAoCAD,KAAAoM,WACAC,kBAAA,qCAGArM,KAAAsM,IAAAC,QAAA,SAAApE,SACA,MAAAqE,QACAC,OAAA,MACAC,QAAA,SAAAC,KACAC,QAAAC,MAAAF,MAEAG,MAAA,SAAAH,KACAC,QAAAC,MAAAF,MAEAI,QAAA,IACAC,OAAA,EACAC,OAAA,EACAC,WACAC,cAAA,iBACAC,YAAA,mBAEA9M,IAAA6H,SACAnI,KAAAmC,MAAAqK,OAAArE,SAEA,SAAAqE,OAAAC,OAAAjI,gBACAgI,OAAAY,YAAApN,KAAAoM,UAAAC,mBAGA,MAAAgB,KAAA/J,KACA+J,KAAAf,IAAA,IAAAgB,eAOA,MAmBAC,iBAAA,WACA,OACAC,OAAAH,KAAAf,IAAAkB,OACAC,WAAAJ,KAAAf,IAAAmB,WACAC,aAAAL,KAAAf,IAAAoB,aACAC,aAAAN,KAAAf,IAAAqB,aACAC,YAAAP,KAAAf,IAAAsB,YACAV,QA1BA,SAAA5I,KACA,MAAA4I,QAAA5I,IAAAjE,MAAA,QAGA,OADA6M,QAAAW,MACAX,QAAA5F,IAAA,SAAAwG,MACA,MAAArD,OAAAqD,KAAAzN,MAAA,KACA0N,KACAC,OAAAvD,OAAA,IAKA,YAHAnK,IAAAmK,OAAA,KACAsD,IAAAvL,MAAAiI,OAAA,GAAAhG,UAAA,IAEAsJ,MAcAE,CAAAZ,KAAAf,IAAA4B,2BAIAC,gBAAA,WACA,GAAA,IAAAd,KAAAf,IAAA8B,WAAA,CACA,MAAAC,WAAAhB,KAAAf,IAAAkB,OACAa,YAAA,KAAAA,YAAA,KAAA,MAAAA,WACA7B,OAAAE,QAAAa,oBAGAf,OAAAM,MAAAS,sBAyCAjK,KAAAgL,MAAA,WACAjB,KAAAf,IAAAgC,SAOAhL,KAAAiL,iBAAA,WACA,OAAA,IAAAlB,KAAAf,IAAA8B,YAQA9K,KAAAkL,KAAA,SAAAC,IAAAC,aAEApO,IAAAoO,SACAA,OAAA,MAEAD,IA5CA,SAAAA,IAAAC,QACA,IAAAC,OAAA,GAeA,OAdA,IAAAnC,OAAAS,QACA0B,QAAA,eAAAC,KAAAC,MAAA,KAEA,OAAAH,QAAA,QAAAlC,OAAAC,OAAAjI,gBACAmK,QAAAD,QAEA,KAAAC,UACA,IAAAF,IAAAK,QAAA,KACAL,KAAA,IAGAA,KAAA,KAGAA,IAAAE,OA4BAI,CAAAN,IAAAC,QACArB,KAAAf,IAAA0C,KAAAxC,OAAAC,OAAAgC,IAAAjC,OAAAQ,OA3DA,SAAAyB,KACApB,KAAAf,IAAA2C,mBAAAd,gBACAd,KAAAf,IAAAS,QAAAP,OAAAO,QACAM,KAAAf,IAAA4C,iBAAA,eAAA1C,OAAAY,aAEA,SAAAqB,IAAAhK,UAAA,EAAA,IAEA4I,KAAAf,IAAA4C,iBAAA,mBAAA1C,OAAAW,eAEAX,OAAAU,QAAAxK,QAAA,SAAAC,SACA0K,KAAAf,IAAA4C,iBAAAvM,QAAAwG,KAAAxG,QAAAH,SAkDA2M,CAAAV,KACApB,KAAAf,IAAAkC,KAAAE,UAjpCA,GCNA,oBAAA,KACA,KAAA,8BCGA,GDAA,WACA,aAEA1O,KAAAC,UAAA,kBAIAD,KAAAC,UAAA,2BAQAD,KAAAoP,UAAAC,SAAAC,WAAA,SAAAC,SAAAC,YACA,IAAAC,SAAA,GACAC,YAAA,EACA,IAAA,IAAAnP,EAAA,EAAAA,EAAAiP,WAAAhP,OAAAD,IAEAkP,UAAAD,WAAAjP,GAAAoP,QAAA,MAGA,IAAAD,YAAAF,WAAAjP,GAAA,WACAiP,WAAAjP,GAAAqP,WACAF,YAAA,GAIA,KAAAD,UACAI,MAAAJ,WAUAzP,KAAAoP,UAAAC,SAAAS,SAAA,SAAAP,SAAAC,YAEA,GAAA,IAAAA,WAAAhP,OAEA,YADAR,KAAAwH,MAAA+D,iBAAAgE,UAGA,IAAAG,YAAA,EACAK,QAAA,OAEA,IAAA,IAAAxP,EAAA,EAAAA,EAAAiP,WAAAhP,OAAAD,IACAwP,SAAA,WAAAP,WAAAjP,GAAA4I,KAAA,WAAAqG,WAAAjP,GAAAoP,QAAA,SAEA,IAAAD,YAAAF,WAAAjP,GAAA,WACAiP,WAAAjP,GAAAqP,WACAF,YAAA,GAGAK,SAAA,QACA/P,KAAAwH,MAAAqE,oBAAA0D,SAAAQ,UAGA/P,KAAAoP,UAAAvI,OACAmJ,cAAA,oCACAC,YAAA,sBACAC,qBAAA,aACAC,mBACAC,SAAA,8BACAC,MAAA,2BACAC,OAAA,4BACAC,MAAA,2BACAC,aAAA,iCACAtF,QAAA,6BACAuF,YAAA,gCACAC,SAAA,8BACAC,QAAA,6BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,aAAA,iCACAC,SAAA,6BACAC,SAAA,6BACAC,SAAA,6BACAC,YAAA,gCACAC,YAAA,gCACAC,cAAA,kCACAC,cAAA,kCACAC,iBAAA,oCAEAtK,UACAC,aAAA,yCACAsK,cAAA,0CACAC,iBAAA,0DACAC,wBAAA,yDACAC,yBAAA,yDACAC,wBAAA,gCACAC,kBAAA,iDACAC,wBAAA,sDACAC,uBAAA,qEAEAC,UACAC,WAAA,uCAwBAlS,KAAAoP,UAAA+C,cAAA,SAAAhK,SAEA7E,KAAAkJ,QAEA4F,YAAApJ,OAAAb,QAAAoH,UAAAvD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAK,eAAA,OACA1D,MAAA9D,OAAAb,QAAAoH,UAAAvD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAE,QAAArQ,KAAAoP,UAAAvI,MAAAoL,SAAAC,WAEA/F,OAAAnD,OAAAb,QAAAoH,UAAAvD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAG,SAAA,KACA+B,MAAArJ,OAAAb,QAAAoH,UAAAvD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAI,QAAA,MAEAvQ,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SAEA7E,KAAAkJ,OAAA4F,YAAAvI,KAAAI,MAAA3G,KAAAkJ,OAAA4F,aAGA,MAAA/E,KAAA/J,KAQA,GANA+J,KAAAmC,cAEAnC,KAAAiF,mBAEAjF,KAAAb,OAAA+C,SAAAvG,OAAAqE,KAAAb,OAAA+C,UAEA,IAAAvG,OAAAqE,KAAAb,OAAA+C,UAAA/O,OACA,MAAAR,KAAAoP,UAAAvI,MAAAK,SAAA,aAGA5D,KAAAiP,KAAA,WACAlF,KAAAmC,cACAnC,KAAAiF,mBACA,MAAAE,QAAAnF,KAAAb,OAAA+C,SAAA,GACA,IAAA,IAAAhP,EAAA,EAAAA,EAAAiS,QAAAC,SAAAjS,OAAAD,KAEA,IAAAP,KAAA4G,KAAAY,MAAAsB,aAAA0J,QAAAC,SAAAlS,KACA8M,KAAAmC,WAAA1L,KAAA9D,KAAAoP,UAAAsD,sBAAAhM,aACAmC,UAAA2J,QAAAC,SAAAlS,GACAgP,SAAAlC,KAAAb,OAAA+C,aAaAjM,KAAAqP,SAAA,SAAAtN,OACAgI,KAAAkF,OACAlF,KAAAlB,OAAA9G,OAEA,MAAAuN,sBACA,IAAA,IAAArS,EAAA,EAAAA,EAAA8M,KAAAmC,WAAAhP,OAAAD,IACA,QAAAD,IAAA+M,KAAAmC,WAAAjP,SAAAD,IAAA+M,KAAAmC,WAAAjP,GAAAoS,SAAA,CACA,QAAArS,IAAAsS,mBAAAvF,KAAAmC,WAAAjP,GAAA4I,MAEA,UAEA,IAAAkE,KAAAmC,WAAAjP,GAAAoS,YACAtF,KAAAiF,gBAAAxO,KAAAuJ,KAAAmC,WAAAjP,IAEAqS,mBAAAvF,KAAAmC,WAAAjP,GAAA4I,OAAA,EAgBA,OAbA,IAAAkE,KAAAwF,WACAxF,KAAAP,aACAxM,IAAA+E,OACAA,MAAAyN,oBAIA,IAAAxP,KAAAkJ,OAAA4F,aAEA/E,KAAA0F,gBAEA1F,KAAAgF,MAAAhN,QAEAgI,KAAAiF,iBAGAhP,KAAAyP,cAAA,WACA,MAAAC,QAAAhK,OAAA,qBAAAqE,KAAAb,OAAA+C,UACAvG,OAAAgK,SAAAC,KAAA,SAAApO,MAAAiJ,MACA,MAAAoF,WAAAlK,OAAA8E,WACAxN,IAAA4S,WAAAlH,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAqB,mBACA0B,WAAAC,IAAAD,WAAAlH,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAqB,sBASAlO,KAAAuP,QAAA,WACA,OAAA,IAAAxF,KAAAiF,gBAAA9R,QAGA8C,KAAA6I,OAAA,SAAA9G,OACA,GAAA,OAAAgI,KAAAb,OAAAL,OAAA,CACA,MAAAiH,SAAApT,KAAA2B,eAAA0L,KAAAb,OAAAL,QACA,QAAA7L,IAAA8S,SAIA,MAAApT,KAAAgI,OAAAsC,OAAAtK,KAAAoP,UAAAvI,MAAAK,SAAAwK,kBAAArE,KAAAb,OAAAL,SAHAiH,SAAArS,MAAA,MAAAsM,KAAAb,OAAA+C,SAAAlK,UAQA/B,KAAAwJ,MAAA,WACA,MAAAsG,SAAApT,KAAA2B,eAAA0L,KAAAb,OAAAM,OACA,QAAAxM,IAAA8S,SAIA,MAAApT,KAAAgI,OAAAsC,OAAAtK,KAAAoP,UAAAvI,MAAAK,SAAAwK,kBAAArE,KAAAb,OAAAM,QAHAsG,SAAArS,MAAA,MAAAsM,KAAAb,OAAA+C,SAAAlC,KAAAiF,mBAOAhP,KAAA+O,MAAA,SAAAhN,OACA,GAAA,OAAAgI,KAAAb,OAAA6F,MAAA,CACA,MAAAe,SAAApT,KAAA2B,eAAA0L,KAAAb,OAAA6F,OACA,QAAA/R,IAAA8S,SAIA,MAAApT,KAAAgI,OAAAsC,OAAAtK,KAAAoP,UAAAvI,MAAAK,SAAAwK,kBAAArE,KAAAb,OAAA6F,QAHAe,SAAArS,MAAA,MAAAsM,KAAAb,OAAA+C,SAAAlK,WAUArF,KAAAC,UAAA,wCAoBAD,KAAAoP,UAAAsD,sBAAAhM,YAAA,SAAAyB,SAEA7E,KAAAkJ,UACAxM,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SAGA,IAAA,IAAAnI,KAAA4G,KAAAY,MAAAsB,aAFAxF,KAEAkJ,OAAA3D,WACA,OAAA,KAIA,OAFAG,OALA1F,KAKAkJ,OAAA3D,WAAAI,KAAA,SAIA,IAAA,kBAGA,IAAA,aACA,OAAA,IAAAjJ,KAAAoP,UAAAiE,gBAAA/P,KAAAkJ,QAEA,IAAA,QACA,QAAAlM,IAAA0I,OAAA1F,KAAAkJ,OAAA3D,WAAAmD,KAAA,QACA,OAAA,IAAAhM,KAAAoP,UAAAkE,gBACAC,WAAAvT,KAAA4G,KAAAY,MAAA0B,cAAAF,OAAA1F,KAAAkJ,OAAA3D,WAAAmD,KAAA,QAAA1I,KAAAkJ,OAAA+C,YAGA,MAEA,IAAA,WACA,QAAAjP,IAAA0I,OAAA1F,KAAAkJ,OAAA3D,WAAAmD,KAAA,QACA,OAAA,IAAAhM,KAAAoP,UAAAoE,mBACAD,WAAAvT,KAAA4G,KAAAY,MAAA0B,cAAAF,OAAA1F,KAAAkJ,OAAA3D,WAAAmD,KAAA,QAAA1I,KAAAkJ,OAAA+C,YAGA,MAEA,QACA,OAAA,IAAAvP,KAAAoP,UAAAqE,cAAAnQ,KAAAkJ,UAuBAxM,KAAAoP,UAAAsE,mBAAA,SAAAvL,SAEA,GAAA7E,KAAA9B,cAAAxB,KAAAoP,UAAAsE,mBACA,MAAA1T,KAAAoP,UAAAvI,MAAAK,SAAA,wBAIA5D,KAAAkJ,QACAmD,QAAA3G,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAjF,UAAA,GACAyI,WAAA3K,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAM,cAAA,IAEAzQ,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SAEA7E,KAAA0B,KAAAgE,OAAAb,QAAAU,WACAvF,KAAAqM,QAAArM,KAAAkJ,OAAAmD,QACArM,KAAA6F,KAAA,QAEA7I,IAAAgD,KAAA0B,KAAAgH,KAAA,QACA1I,KAAA6F,KAAA7F,KAAA0B,KAAAgH,KAAA,aAEA1L,IAAAgD,KAAA0B,KAAAgH,KAAA,QACA1I,KAAA6F,KAAA7F,KAAA0B,KAAAgH,KAAA,OASA1I,KAAAuP,QAAA,aAGAvP,KAAAsQ,YAAA,WACAtQ,KAAA0B,KAAAiH,SAAA3I,KAAAkJ,OAAAmH,YAEArQ,KAAA0B,KAAAgH,KAAA,QAAA1I,KAAAqM,UAGArM,KAAAuQ,UAAA,WACAvQ,KAAA0B,KAAA8O,YAAAxQ,KAAAkJ,OAAAmH,YACArQ,KAAA0B,KAAA+O,WAAA,UAOAzQ,KAAAqP,SAAA,WAEA,OAAA,IAAArP,KAAA0B,KAAAiE,KAAA,aACA3F,KAAAuQ,aACA,IAEA,IAAAvQ,KAAAuP,WACAvP,KAAAsQ,eACA,IAGAtQ,KAAAuQ,aACA,KAkCA7T,KAAAoP,UAAAqE,cAAA,SAAAtL,SAmBA,GAhBA7E,KAAAkJ,QACAwH,SAAAhL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAO,UACAnG,QAAAvB,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAQ,SACAsD,UAAAjL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAS,YACAsD,UAAAlL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAU,YACAsD,UAAAnL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAW,YACAsD,UAAApL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAY,YACAsD,YAAArL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAa,eAAAhR,KAAAoP,UAAAvI,MAAAqJ,qBACAoE,QAAAtL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAc,UACAsD,QAAAvL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAe,UACAsD,QAAAxL,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAgB,WAGAnR,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACAnI,KAAAW,OAAAX,KAAAoP,UAAAsE,mBAAApQ,MAAAA,KAAAkJ,cAEAlM,IAAAgD,KAAAkJ,OAAAwH,SACA,IAEA1Q,KAAAkJ,OAAAwH,SAAAnK,KAAAI,MAAA3G,KAAAkJ,OAAAwH,UAEA,MAAAS,IAMA,MAAApH,KAAA/J,KAGA,GADA+J,KAAArI,KAAAgE,OAAAb,QAAAU,WACA,IAAAwE,KAAArI,KAAAxE,OACA,MAAAR,KAAAoP,UAAAvI,MAAAK,SAAA,cAEAmG,KAAAtL,KAAA,OAGAuB,KAAAsM,SAAA,WAEA,IACAvC,KAAArI,KAAA0P,QACArH,KAAArI,KAAA2P,SAEA,MAAAF,MAOAnR,KAAAsR,QAAA,WACA,MAAA,KAAAvH,KAAArI,KAAAmO,OAMA7P,KAAAuR,WAAA,WACA,MAAAC,YAAAxR,KAAAkJ,OAAAwH,SACA,IAAA,IAAAc,YACA,OAAA,EAEA,IAAA,IAAAA,YACA,OAAA,EAGA,MAAAC,kBAAA/U,KAAA2B,eAAAmT,aACA,QAAAxU,IAAAyU,kBACA,OAAAA,kBAAAhU,MAAA,MAAAsM,KAAArI,OAGA,MAAAhF,KAAAgI,OAAAsC,OAAAtK,KAAAoP,UAAAvI,MAAAK,SAAAwK,kBAAAoD,eAUAxR,KAAAuP,QAAA,WACA,GAAAxF,KAAAuH,UACA,OAAA,IAAAvH,KAAAwH,aASA,IAAA,IAAAG,QAAAhV,KAAAoP,UAAA6F,MAEA,QAAA3U,IAAA+M,KAAArI,KAAAgH,KAAAhM,KAAAoP,UAAAvI,MAAAoJ,YAAA+E,QAEA,IAAAhV,KAAAoP,UAAA6F,MAAAD,MAAAjU,MAAA,MAAAsM,KAAArI,KAAAqI,OACA,OAAA,EAKA,OAAA,IAsBArN,KAAAoP,UAAAiE,gBAAA,SAAAlL,SAGA7E,KAAAkJ,QACA0I,aAAAlM,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAmB,eACA6D,aAAAnM,OAAAb,QAAAU,WAAAmD,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAoB,gBAGAvR,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACAnI,KAAAW,OAAAX,KAAAoP,UAAAsE,mBAAApQ,MAAAA,KAAAkJ,SAGA,MAAAa,KAAA/J,KAGA,GAFA+J,KAAAtL,KAAA,SACAsL,KAAArI,KAAAgE,OAAAb,QAAAU,WACA,IAAAwE,KAAArI,KAAAxE,OACA,MAAAR,KAAAoP,UAAAvI,MAAAK,SAAA,cAIA,QAAA5G,IAAA+M,KAAAb,OAAA0I,eAAAlM,OAAAoM,UAAA/H,KAAAb,OAAA0I,cACA,MAAAlV,KAAAoP,UAAAvI,MAAAK,SAAA,wBAKA,IAAAmO,aAAAhI,KAAArI,KAAAiE,KAAA,kBACA,IAAAoM,eACAA,aAAA,GAEAA,aAAAC,SAAAD,aAAA,IAQA/R,KAAAuP,QAAA,WAEA,OAAAwC,eAAAC,SAAAjI,KAAAb,OAAA0I,aAAA,KAIA7H,KAAArI,KAAAmO,QAAA9F,KAAAb,OAAA2I,eA4BAnV,KAAAoP,UAAAmG,mBAAA,SAAApN,SAEA,GAAA7E,KAAA9B,cAAAxB,KAAAoP,UAAAmG,mBACA,MAAAvV,KAAAoP,UAAAvI,MAAAK,SAAA,yBAGA5D,KAAAkJ,UACAxM,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACA7E,KAAAiQ,WAAAjQ,KAAAkJ,OAAA+G,WACAjQ,KAAA6F,KAAAH,OAAA1F,KAAAkJ,OAAA+G,YAAAvH,KAAA,QACA1I,KAAAqM,QAAA,GACArM,KAAAqQ,WAAA,GAGA,IAAA,IAAApT,EAAA,EAAAA,EAAA+C,KAAAiQ,WAAA/S,OAAAD,IAAA,CACA,MAAAiV,MAAAxM,OAAA1F,KAAAiQ,WAAAhT,SACAD,IAAAkV,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAjF,WACA5H,KAAAqM,QAAA6F,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAjF,eAEA5K,IAAAkV,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAM,eACAnN,KAAAqQ,WAAA6B,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAM,cAUAnN,KAAAuP,QAAA,aAGAvP,KAAAsQ,YAAA,WAEA,GAAA,KAAAtQ,KAAAqQ,WACA,IAAA,IAAApT,EAAA,EAAAA,EAAA+C,KAAAiQ,WAAA/S,OAAAD,IAAA,CACA,MAAAiV,MAAAxM,OAAA1F,KAAAiQ,WAAAhT,IACAiV,MAAAvJ,SAAA3I,KAAAqQ,YACA6B,MAAAxJ,KAAA,QAAA1I,KAAAqM,WAKArM,KAAAuQ,UAAA,WACA,GAAA,KAAAvQ,KAAAqQ,WACA,IAAA,IAAApT,EAAA,EAAAA,EAAA+C,KAAAiQ,WAAA/S,OAAAD,IAAA,CACA,MAAAiV,MAAAxM,OAAA1F,KAAAiQ,WAAAhT,IACAiV,MAAA1B,YAAAxQ,KAAAqQ,YACA6B,MAAAzB,WAAA,WASAzQ,KAAAqP,SAAA,WACA,OAAA,IAAArP,KAAAuP,WACAvP,KAAAuQ,aACA,IAGAvQ,KAAAsQ,eACA,KAsBA5T,KAAAoP,UAAAkE,eAAA,SAAAnL,SAEA7E,KAAAkJ,UACAxM,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACAnI,KAAAW,OAAAX,KAAAoP,UAAAmG,mBAAAjS,MAAAA,KAAAkJ,SACAlJ,KAAAvB,KAAA,QAMAuB,KAAAuR,WAAA,WACA,IAAAY,cAAA,EACA,MAAAC,WAAApS,KAAAiQ,WAEA,IAAA,IAAAhT,EAAA,EAAAA,EAAAmV,WAAAlV,OAAAD,IAAA,CACA,MAAAiV,MAAAxM,OAAA0M,WAAAnV,KACA,IAAAiV,MAAAvM,KAAA,aACAuM,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAO,YACA+E,aAAAD,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAO,WAIA,OAAA+E,cASAnS,KAAAuP,QAAA,WACA,GAAA,SAAAvP,KAAAuR,aAAA,CACA,MAAAa,WAAApS,KAAAiQ,WACA,IAAA,IAAAhT,EAAA,EAAAA,EAAAmV,WAAAlV,OAAAD,IAAA,CAGA,IAAA,IAFAyI,OAAA0M,WAAAnV,IAEA0I,KAAA,WACA,OAAA,EAGA,OAAA,EAEA,OAAA,IAsBAjJ,KAAAoP,UAAAoE,kBAAA,SAAArL,SAEA7E,KAAAkJ,UACAxM,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACAnI,KAAAW,OAAAX,KAAAoP,UAAAmG,mBAAAjS,MAAAA,KAAAkJ,SACAlJ,KAAAvB,KAAA,WACAuB,KAAAqS,WAAA,EACArS,KAAAsS,WAAAtS,KAAAkJ,OAAA+G,WAAA/S,OAGA,IAAA,IAAAD,EAAA,EAAAA,EAAA+C,KAAAiQ,WAAA/S,OAAAD,IAAA,CACA,MAAAiV,MAAAxM,OAAA1F,KAAAiQ,WAAAhT,KACA,IAAAiV,MAAAvM,KAAA,mBACA3I,IAAAkV,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAiB,eACA9N,KAAAqS,WAAAH,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAiB,mBAEA9Q,IAAAkV,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAkB,eACA/N,KAAAsS,WAAAJ,MAAAxJ,KAAAhM,KAAAoP,UAAAvI,MAAAsJ,kBAAAkB,eAUA/N,KAAAuP,QAAA,WACA,IAAAgD,aAAA,EACA,MAAAH,WAAApS,KAAAiQ,WACA,IAAA,IAAAhT,EAAA,EAAAA,EAAAmV,WAAAlV,OAAAD,IAAA,CAEA,MAAAiV,MAAAxM,OAAA1F,KAAAiQ,WAAAhT,KACA,IAAAiV,MAAAvM,KAAA,cACA,IAAAuM,MAAAvM,KAAA,YACA4M,eAIA,OAAAA,cAAAvS,KAAAqS,YAAAE,cAAAvS,KAAAsS,aAOA5V,KAAAC,UAAA,wBAOAD,KAAAoP,UAAA6F,MAAAa,MAAA,SAAAjN,UAAAuG,WACA,MAAAvH,WAAAgB,UAAAsK,MACA4C,YAAA,IAAAlO,WAAAiH,QAAA,KACAkH,YAAA,IAAAnO,WAAAiH,QAAA,KACA,OAAA,IAAAiH,aAAA,IAAAC,YAYAhW,KAAAoP,UAAA6F,MAAAT,QAAA,SAAA3L,UAAAuG,WACA,MAAA6G,gBAAAjN,OAAA,IAAAoG,UAAA5C,OAAAgI,SACA,GAAA,IAAAyB,gBAAAzV,OACA,MAAAR,KAAAgI,OAAAsC,OAAAtK,KAAAoP,UAAAvI,MAAAK,SAAA8K,wBAAA5C,UAAA5C,OAAAgI,UAEA,OAAA3L,UAAAsK,QAAA8C,gBAAA9C,OAQAnT,KAAAoP,UAAA6F,MAAAZ,YAAA,SAAAxL,UAAAuG,WAEA,OAAA,OADApP,KAAAoP,UAAA8G,aAAArN,UAAAsK,MAAA/D,UAAA5C,OAAA6H,cAYArU,KAAAoP,UAAA6F,MAAAV,QAAA,SAAA1L,UAAAuG,WACA,MAAA7E,QAAA6E,UAAA5C,OAAA6H,YACA8B,UAAAnW,KAAAoP,UAAA8G,aAAArN,UAAAsK,MAAA5I,SACA6L,QAAApW,KAAAoP,UAAA8G,aAAA9G,UAAA5C,OAAA+H,QAAAhK,SACA,OAAA,OAAA4L,WAAA,OAAAC,SACAD,WAAAC,SAUApW,KAAAoP,UAAA6F,MAAAX,QAAA,SAAAzL,UAAAuG,WACA,MAAA7E,QAAA6E,UAAA5C,OAAA6H,YACA8B,UAAAnW,KAAAoP,UAAA8G,aAAArN,UAAAsK,MAAA5I,SACA8L,QAAArW,KAAAoP,UAAA8G,aAAA9G,UAAA5C,OAAA8H,QAAA/J,SACA,OAAA,OAAA4L,WAAA,OAAAE,SACAF,WAAAE,SAUArW,KAAAoP,UAAA6F,MAAAf,UAAA,SAAArL,UAAAuG,WACA,QAAAvG,UAAAsK,MAAA3S,OAAA4O,UAAA5C,OAAA0H,YAWAlU,KAAAoP,UAAA6F,MAAAhB,UAAA,SAAApL,UAAAuG,WACA,QAAAvG,UAAAsK,MAAA3S,OAAA4O,UAAA5C,OAAAyH,YAWAjU,KAAAoP,UAAA6F,MAAAb,UAAA,SAAAvL,UAAAuG,WACA,OAAA,IAAApG,OAAAoM,UAAAvM,UAAAsK,QAGAmD,WAAAzN,UAAAsK,QAAAmD,WAAAlH,UAAA5C,OAAA4H,YAWApU,KAAAoP,UAAA6F,MAAAd,UAAA,SAAAtL,UAAAuG,WACA,OAAA,IAAApG,OAAAoM,UAAAvM,UAAAsK,QAGAmD,WAAAzN,UAAAsK,QAAAmD,WAAAlH,UAAA5C,OAAA2H,YAYAnU,KAAAoP,UAAA6F,MAAA1K,QAAA,SAAA1B,UAAAuG,WACA,MAAAmH,UAAAvW,KAAAoP,UAAAoH,SAAApH,UAAA5C,OAAAjC,SACA,QAAAjK,IAAAiW,UACA,OAAAA,UAAAvL,KAAAnC,UAAAsK,OAIA,MAAAnT,KAAAgI,OAAAsC,OAAAtK,KAAAoP,UAAAvI,MAAAK,SAAA4K,mBAAA1C,UAAA5C,OAAAjC,WAMAvK,KAAAC,UAAA,2BAEAD,KAAAoP,UAAAoH,SAAAC,YAAA,IAAAtM,OAAA,eACAnK,KAAAoP,UAAAoH,SAAAE,aAAA,IAAAvM,OAAA,UACAnK,KAAAoP,UAAAoH,SAAAG,QAAA,IAAAxM,OAAA,mBACAnK,KAAAoP,UAAAoH,SAAAI,gBAAA,IAAAzM,OAAA,aACAnK,KAAAoP,UAAAoH,SAAAK,OAAA,IAAA1M,OAAA,uDACAnK,KAAAoP,UAAAoH,SAAAM,aAAA,IAAA3M,OAAA,6BACAnK,KAAAoP,UAAAoH,SAAAO,aAAA,IAAA5M,OAAA,kCACAnK,KAAAoP,UAAAoH,SAAAQ,aAAA,IAAA7M,OAAA,6BACAnK,KAAAoP,UAAAoH,SAAAS,SAAA,IAAA9M,OAAA,qBACAnK,KAAAoP,UAAAoH,SAAAU,KAAA,IAAA/M,OAAA,mCAIAnK,KAAAC,UAAA,4BAaAD,KAAAoP,UAAA+H,kBAAA,SAAAC,IAAAC,KAAAC,MAAAC,IAAAC,WACA,MAAAC,WAMA,OALAA,QAAAL,IAAA,IAAAjN,OAAAiN,KACAK,QAAAC,EAAAL,KACAI,QAAAE,EAAAL,MACAG,QAAAG,EAAAL,IACAE,QAAAI,EAAAL,UACAC,SAUAzX,KAAAoP,UAAA8G,aAAA,SAAA4B,QAAAC,aACA,MAAAC,YAAAhY,KAAAoP,UAAA6I,UAAAF,aACA,QAAAzX,IAAA0X,YAAA,CAGA,IAAAA,YAAAZ,IAAApM,KAAA8M,SACA,OAAA,KAKA,MAAAI,SAAAJ,QAAAzX,MAAA2X,YAAAH,GAEAM,SAAA,IAAAvJ,KAAAsJ,SAAAF,YAAAN,GAAAQ,SAAAF,YAAAL,GAAA,EAAAO,SAAAF,YAAAJ,IAEAQ,YAAAD,SAAAE,gBAAA/C,SAAA4C,SAAAF,YAAAN,GAAA,IACAY,aAAAH,SAAAI,aAAAjD,SAAA4C,SAAAF,YAAAL,GAAA,EAAA,IACAa,WAAAL,SAAAM,YAAAnD,SAAA4C,SAAAF,YAAAJ,GAAA,IACA,OAAA,IAAAQ,cAAA,IAAAE,eAAA,IAAAE,WACAL,SAEA,KAEA,OAAA,MAGAnY,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,0CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,cAAAjY,KAAAoP,UAAA+H,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnX,KAAAoP,UAAA6I,UAAA,YAAAjY,KAAAoP,UAAA+H,kBAAA,2CAAA,EAAA,EAAA,EAAA,KAMAnX,KAAAoP,UAAAsJ,UAAA,SAAA5S,eACAxF,IAAAwF,WACAA,SAAAF,SAAA+S,MAEA,MAAAvP,MAAAtD,SAAAsC,iBAAApI,KAAAoP,UAAAvI,MAAAmJ,eACA,IAAA,IAAAzP,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IAAA,CACA,MAAAoC,QAAAyG,MAAA7I,GACA,SAAAoC,QAAAiF,aAAA5H,KAAAoP,UAAAvI,MAAAsJ,kBAAAC,WACAzN,QAAAyC,iBAAA,SAAA,SAAAC,OACA,IAAArF,KAAAoP,UAAA+C,eACA5C,SAAA5M,UAEAgQ,SAAAtN,SACA,KAOArF,KAAAC,UAAA,sBAeAD,KAAAoP,UAAAwJ,IAAAC,aAAA,SAAA1Q,SACA,MAAA2Q,cAAA,IAAA9Y,KAAAoP,UAAA+C,cAAAhK,SAEA,OADA2Q,cAAAnG,WACAmG,cAAAjG,WAiBA7S,KAAAoP,UAAAwJ,IAAAG,cAAA,SAAA5Q,SACA,IAAA,IAAAnI,KAAA4G,KAAAY,MAAAsB,aAAAX,QAAAU,WACA,MAAA7I,KAAAoP,UAAAvI,MAAAK,SAAA,6BAGA5G,IAAA6H,QAAA2E,QACA3E,QAAA2E,MAAA9M,KAAAoP,UAAAvI,MAAAoL,SAAAC,YAEA,MAAAI,mBACA0G,eAAAhZ,KAAAoP,UAAAsD,sBAAAhM,YAAAyB,SAEA,GADA6Q,eAAArG,SAAA,OACA,IAAAqG,eAAAnG,UAAA,CACA,MAAAO,SAAApT,KAAA2B,eAAAwG,QAAA2E,OACAwF,gBAAAxO,KAAAkV,gBACA5F,SAAAjL,QAAAU,UAAAyJ,iBAEA,OAAA0G,eAAAnG,WAgBA7S,KAAAoP,UAAAwJ,IAAAK,eAAA,SAAA9Q,SAEAA,QAAA2E,QACA3E,QAAA2E,MAAA9M,KAAAoP,UAAAvI,MAAAoL,SAAAC,YAEA,MAAA1C,cACAoD,sBACAN,mBAEA,IAAA,IAAA/R,EAAA,EAAAA,EAAA4H,QAAAZ,OAAA/G,OAAAD,KAEA,IAAAP,KAAA4G,KAAAY,MAAAsB,aAAAX,QAAAZ,OAAAhH,KACAiP,WAAA1L,KAAA9D,KAAAoP,UAAAsD,sBAAAhM,aACAmC,UAAAV,QAAAZ,OAAAhH,MAIA,IAAA,IAAAmI,EAAA,EAAAA,EAAA8G,WAAAhP,OAAAkI,IAEA,GAAA8G,WAAA9G,IAAA8G,WAAA9G,GAAAiK,SAAA,CACA,QAAArS,IAAAsS,mBAAApD,WAAA9G,GAAAS,MAEA,UAEA,IAAAqG,WAAA9G,GAAAiK,YACAL,gBAAAxO,KAAA0L,WAAA9G,IAEAkK,mBAAApD,WAAA9G,GAAAS,OAAA,EAGA,GAAAmJ,gBAAA9R,OAAA,EAAA,CACAR,KAAA2B,eAAAwG,QAAA2E,OACA/L,MAAA,MAAAoH,QAAAoH,SAAA+C,kBAEA,OAAA,IAAAA,gBAAA9R,QAgBAR,KAAAoP,UAAAwJ,IAAAM,oBAAA,SAAA/Q,SACA,MAAAZ,OAAAvH,KAAA4G,KAAAY,MAAAC,eAAAU,QAAArC,UACA,OAAA9F,KAAAoP,UAAAwJ,IAAAK,gBACA1R,OAAAA,OACAuF,MAAA3E,QAAA2E,SAIA9M,KAAA8E,IAAAY,MAAA,WACA1F,KAAAoP,UAAAsJ,cA9rCA,GCAA,oBAAA,KACA,KAAA,+BASA,WACA,aAEA1Y,KAAAC,UAAA,aAGAD,KAAAmZ,KAAAC,sBAEApZ,KAAAmZ,KAAAtS,OACAwS,WAAA,OAAA,SAAA,UACAC,QACAC,oBAAA,oBACAC,aAAA,cACAC,YAAA,aACAC,aAAA,cACAC,gBAAA,gBACAC,cAAA,eACAC,UAAA,YAEA7W,gBACA8W,gBAAA,iEACAC,yBAAA,oDACAC,sBAAA,oJACAC,0BAAA,sDACAC,uBAAA,+IACAC,cAAA,oEAEAC,OAAA,YACAC,cAAA,UACAC,YAAA,KASAta,KAAAmZ,KAAAoB,cAAA,SAAAC,MACA,YAAAla,IAAAN,KAAAmZ,KAAAC,mBAAAoB,MACAxa,KAAAmZ,KAAAC,mBAAAoB,MAEA,MASAxa,KAAAmZ,KAAAsB,cAAA,SAAAD,KAAAE,YACA,GAAA,OAAA1a,KAAAmZ,KAAAoB,cAAAC,MACA,MAAAxa,KAAAgI,OAAAsC,OAAAtK,KAAAmZ,KAAAtS,MAAA7D,eAAA8W,iBAAAU,OAEAxa,KAAAmZ,KAAAC,mBAAAoB,MAAAE,YAOA1a,KAAAmZ,KAAAwB,OACAtK,MAAA,QACAuK,QAAA,UACAC,MAAA,SAGA7a,KAAAC,UAAA,mBAiBAD,KAAAmZ,KAAA3R,MAAAsT,yBAAA,SAAAC,OACA,GAAA,OAAAA,QAAA,IAAA/a,KAAAmZ,KAAA3R,MAAAwT,aAAAD,OACA,MAAA/a,KAAAgI,OAAAsC,OAAAtK,KAAAmZ,KAAAtS,MAAA7D,eAAAmX,eAAAY,QAEA,OACAA,MAAAA,MACAE,aAAAF,QAAA/a,KAAAmZ,KAAAwB,MAAAtK,MACA6K,eAAAH,QAAA/a,KAAAmZ,KAAAwB,MAAAC,QACAO,aAAAJ,QAAA/a,KAAAmZ,KAAAwB,MAAAE,QAaA7a,KAAAmZ,KAAA3R,MAAAxB,OAAA,SAAAoV,KAAApV,OAAAqV,SACA,GAAA,aAAArb,KAAA+B,KAAAiE,QACA,MAAAhG,KAAAmZ,KAAAtS,MAAA7D,eAAA,yBAEA,MAAAsY,WACA,IAAA,IAAA/a,EAAA,EAAAA,EAAA6a,KAAA5a,OAAAD,IAAA,CACA,MAAAgb,YAAAvV,OAAAoV,KAAA7a,GAAAA,EAAA8a,SAEA,GAAA,OAAAE,YAAA,CAIA,IAAA,IAAAvb,KAAAgB,cAAAua,aACA,MAAAvb,KAAAmZ,KAAAtS,MAAA7D,eAAA,sBAGAsY,QAAAxX,KAAAyX,cAEA,OAAAD,SAUAtb,KAAAmZ,KAAA3R,MAAAgU,OAAA,SAAAJ,KAAAK,UAAAJ,SACA,GAAA,aAAArb,KAAA+B,KAAA0Z,WACA,MAAAzb,KAAAmZ,KAAAtS,MAAA7D,eAAA,uBAEA,IAAA,IAAAzC,EAAA,EAAAA,EAAA6a,KAAA5a,OAAAD,IAAA,CACA,MAAAmb,aAAAD,UAAAL,KAAA7a,GAAAA,EAAA8a,SACA,IAAA,IAAArb,KAAAgB,cAAA0a,cACA,MAAA1b,KAAAmZ,KAAAtS,MAAA7D,eAAA,yBAUAhD,KAAAmZ,KAAA3R,MAAAwT,aAAA,SAAAD,OACA,IAAA,IAAAY,OAAA3b,KAAAmZ,KAAAwB,MACA,GAAA3a,KAAAmZ,KAAAwB,MAAAgB,OAAAZ,MACA,OAAA,EAGA,OAAA,GA7JA,GAmKA,WACA,aA+GA,SAAAa,aAAA5W,MACA,MAAA6W,MAAA7W,KAAA8W,WAAA,GAEA,GAAA,IAAAD,MAAAE,UAAA,IAAAF,MAAAE,SACA,OAAAF,MAAA1C,KASA,SAAA6C,YAAAhX,MACA,MAAA6W,MAAA7W,KAAA8W,WAAA,GACA,OAAA,OAAAD,OAAA,OAAAA,MAAAI,cAAA,IAAAJ,MAAAE,UAAA,IAAAF,MAAAE,UA5HA/b,KAAAC,UAAA,iBAEAD,KAAAmZ,KAAA+C,IAAAC,UAAA,kBACAnc,KAAAmZ,KAAA+C,IAAAE,iBAAA,IACApc,KAAAmZ,KAAA+C,IAAAG,iBAAA,yBASArc,KAAAmZ,KAAA+C,IAAAI,cAAA,SAAAtX,KAAApD,MACA,MAAA2a,YAEA,QAAAjc,IAAAP,OAAAyc,eAAA,CACA,MACAC,QADA,IAAAD,gBACAE,SAAA9a,KAAAoD,KAAA,KAAA2X,YAAAC,2BAAA,MACA,IAAAC,YAAAJ,OAAAK,cAEA,KAAA,OAAAD,aACAN,SAAAzY,KAAA+Y,aACAA,YAAAJ,OAAAK,mBAGA,QAAAxc,IAAAP,OAAAgd,cAAA,CACA,MAAAC,cAAAhY,KAAAiY,YAAArb,MAGA,IAAA,IAAArB,EAAA,EAAAA,EAAAyc,cAAAxc,OAAAD,IACAgc,SAAAzY,KAAAkZ,cAAAzc,IAGA,OAAAgc,UAQAvc,KAAAmZ,KAAA+C,IAAAgB,WAAA,SAAAlY,MACA,MAAA/D,OAGA,OAQA,SAAA+D,KAAA/D,KACA,GAAA,OAAA+D,KAAAmY,iBAAA7c,IAAA0E,KAAAmY,WACA,OAEA,IAAA,IAAA5c,EAAA,EAAAA,EAAAyE,KAAAmY,WAAA3c,OAAAD,IAAA,CACA,MAAAyL,KAAAhH,KAAAmY,WAAA5c,GACAU,IAAAjB,KAAAmZ,KAAA+C,IAAAE,iBAAApQ,KAAA7C,MAAA6C,KAAAxJ,OAhBA4a,CAAApY,KAAA/D,KAyBA,SAAA+D,KAAA/D,KACA,IAAA,IAAAV,EAAA,EAAAA,EAAAyE,KAAA8W,WAAAtb,OAAAD,IAAA,CACA,MAAAsb,MAAA7W,KAAA8W,WAAAvb,GAEA,GAAA,IAAAsb,MAAAE,SAAA,CACA,IAAA7T,SAAA,EACA,MAAAmV,QAAAxB,MAAAyB,SAEA,QAAAhd,IAAAW,IAAAoc,SAAA,CAEA,GAAApc,IAAAoc,SAAA7b,cAAAyG,MAAA,CACA,MAAAsV,SAAAtc,IAAAoc,SACApc,IAAAoc,YACApc,IAAAoc,SAAAvZ,KAAAyZ,UAEArV,SAAA,EAGA,IAAA,IAAA8T,YAAAH,OAEA5a,IAAA4a,MAAAyB,UAAA1B,aAAAC,WAEA,CACA,MAAA2B,SAAAxd,KAAAmZ,KAAA+C,IAAAgB,WAAArB,QACA,IAAA3T,QACAjH,IAAAoc,SAAAvZ,KAAA0Z,UAGAvc,IAAAoc,SAAAG,YApDAC,CAAAzY,KAAA/D,KACAA,KAyFAjB,KAAAmZ,KAAA+C,IAAAwB,aAAA,SAAA1Y,MAEA,QAAA1E,IAAAP,OAAAgd,cAEA,OAAA/X,KAAAkX,IAIA,OADA,IAAAyB,eACAC,kBAAA5Y,KAAAhF,KAAAmZ,KAAA+C,IAAAC,YASAnc,KAAAmZ,KAAA+C,IAAA2B,gBAAA,SAAAC,QACA,IAAAC,UAEA,QAAAzd,IAAAP,OAAAgd,cAAA,CAEA,MAAAiB,UAAA,IAAAjB,cAAA/c,KAAAmZ,KAAA+C,IAAAG,kBAIA,OAHA2B,UAAAhR,OAAA,EACAgR,UAAAzb,YAAA,oBAAA,SACAyb,UAAAC,QAAAH,QACAE,UAKA,OAFAD,UAAA,IAAAG,WACAL,gBAAAC,OAAA9d,KAAAmZ,KAAA+C,IAAAC,YAxKA,GA8KA,WACA,aAiEAnc,KAAAmZ,KAAAgF,QAAA,SAAAhW,SAEA,MAAAtB,sBAEAuX,iBAAA,wDACAC,uBAAA,2CACAC,4BAAA,wEACAvE,yBAAA,kEACAwE,kBAAA,0GACAC,wBAAA,4HACAC,sBAAA,iFACAC,yBAAA,wCACAC,4BAAA,6DACAC,qBAAA,uFACAC,mBAAA,6EACA1E,cAAA,wCAIA,QAAA7Z,IAAA6H,QAAAqS,KACA,MAAA3T,qBAAA,uBAEA,QAAAvG,IAAA6H,QAAAsT,WAAA,aAAAzb,KAAA+B,KAAAoG,QAAAsT,WACA,MAAA5U,qBAAA,4BAEA,QAAAvG,IAAA6H,QAAAnC,QAAA,aAAAhG,KAAA+B,KAAAoG,QAAAnC,QACA,MAAAa,qBAAA,yBAEA7G,KAAAW,OAAAX,KAAAqD,SAAAC,MAGA,MAAA+J,KAAA/J,KAEAA,KAAAkX,KAAArS,QAAAqS,KAGAlX,KAAAwb,WAGAxb,KAAAyb,eAGAzb,KAAAmY,UAAA,UACAnb,IAAA6H,QAAAsT,YACAnY,KAAAmY,UAAAtT,QAAAsT,WAIAnY,KAAA0b,gBAAA,KAGA1b,KAAA0C,OAAA,KAGA1C,KAAAyX,MAAA,KAEAzX,KAAA2b,aAAA,KACA3b,KAAA4b,eACA5b,KAAA6b,mBACA7b,KAAA8b,cAAA,GAEApf,KAAAmZ,KAAAsB,cAAAnX,KAAAkX,KAAAlX,MAIA,MAMA+b,YAAA,YACA,IAAAC,cACAjS,KAAA2R,gBAAAhf,KAAAmZ,KAAA3R,MAAAxB,OAAAqH,KAAAyR,QAAAzR,KAAArH,OAAAqH,MACAA,KAAAkS,oBAUAD,UAAA,WACA,OAAA,OAAAjS,KAAArH,QAGAwZ,aAAA,WACA,OAAA,OAAAnS,KAAAoO,WAGAgE,UAAA,WACA,OAAA,IAAAH,YACAjS,KAAA2R,gBAEA3R,KAAAyR,SAUAxb,KAAAoc,YAAA,WACApc,KAAA0C,OAAA,KACA1C,KAAA0b,gBAAA,KACA1b,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QAaAA,KAAAqc,OAAA,SAAA3Z,QACA,QAAA1F,IAAA0F,OAzDAqH,KAAA2R,gBAAA,KACA3R,KAAAyR,WACAzR,KAAA0R,mBA0DA,CACA,GAAA,aAAA/e,KAAA+B,KAAAiE,QACA,MAAAa,qBAAA,yBAEA,MAAA+Y,KAAAtc,KAAAwb,QACA,IAAA,IAAAve,EAAA,EAAAA,EAAAqf,KAAApf,OAAAD,IACA,GAAA,OAAAyF,OAAA4Z,KAAArf,GAAAA,EAAA+C,MAAA,CAEA,MAAAuc,YAAAD,KAAArf,GACA+C,KAAAwb,QAAAla,OAAArE,EAAA,UACA+C,KAAAyb,YAAAc,YAAA7f,KAAAmZ,KAAAtS,MAAAuT,SAGAiF,cAEA/b,KAAAic,kBACAjc,KAAAwc,SAAA9f,KAAAmZ,KAAAwB,MAAAE,OACAvX,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QAQAA,KAAAyc,cAAA,SAAAC,YACA,YAAA1f,IAAAgD,KAAA4b,YAAAc,YACA1c,KAAA4b,YAAAc,YAEA,UAMA1c,KAAA2c,WAAA,WACA,MAAAC,SACAC,SAAA9S,KAAAsH,SACAyL,YAAA/S,KAAAgT,mBAEAC,UAAAtgB,KAAAmZ,KAAA3R,MAAAsT,yBAAAzN,KAAAkT,YAEA,OADAvgB,KAAAmC,MAAA+d,QAAAI,WACAJ,SAQA5c,KAAAkd,cAAA,WACA,OAAAld,KAAAmd,WAAAnd,KAAAod,oBAUApd,KAAAod,gBAAA,WACA,OAAApd,KAAA2b,cAOA3b,KAAAqd,mBAAA,WACA,MAAAC,IAAAtd,KAAAkd,gBACA,OAAAld,KAAAud,YAAAD,MAQAtd,KAAA+c,gBAAA,WACA,OAAAZ,YAAAjf,QAQA8C,KAAAmd,WAAA,SAAAK,OACA,MAAAC,UAAAzd,KAAAyb,YAAA+B,OACA,YAAAxgB,IAAAygB,UAEA,MAEA,IAAAzB,aACA,IAAAhc,KAAA0b,gBAAAlQ,QAAAiS,WACAA,UAEA,KAGAA,WAUAzd,KAAA0d,cAAA,SAAAnc,OACA,IAAAoc,WAOA,QAAA3gB,KALA2gB,YADA,IAAA3B,YACAhc,KAAA0b,gBAAAna,OAGAvB,KAAAwb,QAAAja,QAGA,MAAAgC,qBAAA,4BAEA,OAAAoa,YAQA3d,KAAAud,YAAA,SAAAD,KACA,OAAA,IAAAtB,YACAhc,KAAA0b,gBAAAlQ,QAAA8R,KAEAtd,KAAAwb,QAAAhQ,QAAA8R,MAQAtd,KAAA4d,cAAA,WACA,OAAA5d,KAAA6b,iBAAA7b,KAAA6b,gBAAA3e,OAAA,EAAA8C,KAAA6b,gBAAA,GAAA,IAQA7b,KAAA6d,aAAA,WACA,OAAA7d,KAAA8b,cAAA9b,KAAA8b,cAAA,IAOA9b,KAAAid,SAAA,WACA,OAAAjd,KAAAyX,OAYAzX,KAAA8d,OAAA,SAAAtC,SAEA,IAAAuC,iBACA,IAAA,IAAApZ,MAAAC,QAAA4W,SACAuC,cAAAvC,YAEA,CAEA,IAAA,IAAA9e,KAAAgB,cAAA8d,SACA,MAAAjY,qBAAA,kBAEAwa,cAAAvd,KAAAgb,SAEA,IAAA,IAAAve,EAAA,EAAAA,EAAA8gB,cAAA7gB,OAAAD,IAAA,CAEA,IAAA,IAAAP,KAAAgB,cAAAqgB,cAAA9gB,IACA,MAAAsG,qBAAA,wBAGA,MAAAya,SAAAthB,KAAAmZ,KAAAtS,MAAAwT,cAAA/W,KAAAwb,QAAAte,OACA6gB,cAAA9gB,GAAAP,KAAAmZ,KAAAtS,MAAAuT,QAAAkH,SACAhe,KAAAyb,YAAAuC,UAAAD,cAAA9gB,GACA+C,KAAAwb,QAAAhb,KAAAud,cAAA9gB,KAjPA,IAAAif,gBACAxf,KAAAmZ,KAAA3R,MAAAgU,OAAAnO,KAAAyR,QAAAzR,KAAAoO,UAAApO,MAmPAgS,cACA/b,KAAAic,kBACAjc,KAAAwc,SAAA9f,KAAAmZ,KAAAwB,MAAAE,OACAvX,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QAOAA,KAAAic,gBAAA,WAEA,GAAA,OAAAjc,KAAA2b,aAAA,CAGA,GAAA,OADA3b,KAAAmd,WAAAnd,KAAA2b,cAGA,YADA3b,KAAAie,gBAAAje,KAAA2b,cAKA3b,KAAAke,0BAOAle,KAAAke,uBAAA,WAEA,IAAA,IAAAlC,YACA,OAAA,OAAAhc,KAAA0b,iBAAA,IAAA1b,KAAA0b,gBAAAxe,YACA8C,KAAAie,gBAAA,WAKAje,KAAAie,gBAAAje,KAAA0b,gBAAA,GAAAhf,KAAAmZ,KAAAtS,MAAAuT,SAKA9W,KAAAwb,QAAAte,OAAA,EAEA8C,KAAAie,gBAAAje,KAAAwb,QAAA,GAAA9e,KAAAmZ,KAAAtS,MAAAuT,SAGA9W,KAAAie,gBAAA,OAYAje,KAAAqR,OAAA,SAAA3O,QACA,QAAA1F,IAAA0F,OACA,OAAAyZ,YAEA,GAAA,aAAAzf,KAAA+B,KAAAiE,QACA,MAAAa,qBAAA,yBAEA,OAAA7G,KAAAmZ,KAAA3R,MAAAxB,OAAAyZ,YAAAzZ,OAAAqH,OASA/J,KAAAme,cAAA,SAAAC,YAAAC,aACA,IAAA1Z,MAAAC,QAAAwZ,eACAA,aAAAA,cAEA,IAAA,IAAAnhB,EAAA,EAAAA,EAAAmhB,YAAAlhB,OAAAD,IAAA,CACA,MAAAqhB,QAAAF,YAAAnhB,GACA,IAAA,IAAAP,KAAAmZ,KAAAtS,MAAAwS,UAAAvK,QAAA6S,YACA,MAAA3hB,KAAAgI,OAAAsC,OAAAzD,qBAAAuX,kBAAAwD,UAEAte,KAAA4b,YAAA0C,SAAAD,aAaAre,KAAAie,gBAAA,SAAAT,OAEA,GAAAxd,KAAA2b,eAAA6B,MACA,OAKA,MAAAe,kBACAC,SAAAxe,KAAAod,kBACAqB,OAAAze,KAAAmd,WAAAnd,KAAA2b,cACAA,aAAA6B,MACAkB,WAAA1e,KAAAmd,WAAAK,OACAmB,QAAA3e,MAGA,GAAA,OAAAwd,OAAA,OAAAxd,KAAA2b,aAGA,OAFA3b,KAAA2b,aAAA,UACA3b,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAC,oBAAAsI,kBAIA,GAAA,OAAAve,KAAAmd,WAAAK,OACA,MAAAja,qBAAA,yBAEAvD,KAAA2b,aAAA6B,MACAxd,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAC,oBAAAsI,mBAUAve,KAAA4e,cAAA,SAAAtB,KACA,MAAAuB,aAAA7e,KAAAud,YAAAD,KACA,IAAA,IAAAuB,aACA,MAAAtb,qBAAA,sBAEAvD,KAAAie,gBAAAvhB,KAAAmZ,KAAAtS,MAAAwT,cAAA8H,eAUA7e,KAAA8e,mBAAA,SAAAvd,OACAvB,KAAA4e,cAAA5e,KAAA0d,cAAAnc,SAYAvB,KAAA+e,UAAA,SAAArc,QACA,GAAA,aAAAhG,KAAA+B,KAAAiE,QACA,MAAAa,qBAAA,yBAEAvD,KAAA0C,OAAAA,OACAqZ,cACA/b,KAAAwc,SAAA9f,KAAAmZ,KAAAwB,MAAAE,OACAvX,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QASAA,KAAAwc,SAAA,SAAAwC,UACA,IAAA,IAAAtiB,KAAAmZ,KAAA3R,MAAAwT,aAAAsH,UACA,MAAAtiB,KAAAgI,OAAAsC,OAAAzD,qBAAAsT,eAAAmI,WAEA,MAAAC,SAAAjf,KAAAyX,MACAzX,KAAAyX,MAAAuH,SAGA,MAAAT,kBACAU,SAAAA,SACAC,aAAAlf,KAAAyX,MACAkH,QAAA3e,MAGAA,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAM,cAAAiI,mBAWAve,KAAAmf,KAAA,SAAAf,YAAAgB,WAIA,QAAApiB,IAAAohB,aAAA,OAAAA,YACA,MAAA7a,qBAAA,qBAKA,QAHAvG,IAAAoiB,YACAA,UAAA1iB,KAAAmZ,KAAAsJ,KAAAE,MAAAC,MAEA,IAAA5iB,KAAAmZ,KAAAsJ,KAAAI,iBAAAH,WACA,MAAA1iB,KAAAgI,OAAAsC,OAAAzD,qBAAAgY,oBAAA6D,YAGA,MAAAI,YAAAC,oBAAArB,aAEAgB,YAAA1iB,KAAAmZ,KAAAsJ,KAAAE,MAAAC,MACAF,UAAAM,sBAAAF,cAIA,MAAAjB,kBACAI,QAAA3e,KACA2f,eAAA3f,KAAA6b,gBACA+D,aAAA5f,KAAA8b,cACA+D,eAAAL,YACAM,aAAAV,WAGApf,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAK,gBAAAkI,kBAEA,MAAAwB,eAAAP,YAAAA,YAAAtiB,OAAA,GACA8iB,eAAAhgB,KAAAyc,cAAAsD,gBACA,IAAAE,aAAAvjB,KAAAmZ,KAAAsJ,KAAAe,gBAAAF,eAAAZ,WAEA,IAAA,IAAAniB,EAAAuiB,YAAAtiB,OAAA,EAAAD,GAAA,EAAAA,IAAA,CACA,MAAAkjB,iBAAAX,YAAAviB,GACAmjB,iBAAApgB,KAAAyc,cAAA0D,kBACAE,aAAA3jB,KAAAmZ,KAAAsJ,KAAAe,gBAAAE,iBAAAhB,WACAa,aAAAK,2BAAAD,aAAAF,kBAAAF,cAGAjgB,KAAAwb,QAAA2D,KAAAc,cACAlE,cACA/b,KAAAke,yBACAle,KAAAwc,SAAA9f,KAAAmZ,KAAAwB,MAAAE,OACAvX,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAG,YAAAoI,kBACAve,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,OAGAA,KAAA6b,gBAAA2D,YAAAe,MAAA,GACAvgB,KAAA8b,cAAAsD,WAIA,MAAAkB,2BAAA,SAAAE,MAAAC,OACA,OAAA,SAAAC,EAAAC,GACA,IAAAlW,IAAA+V,MAAAE,EAAAC,GAIA,OAHA,IAAAlW,MACAA,IAAAgW,MAAAC,EAAAC,IAEAlW,MAIAgV,oBAAA,SAAArB,aAGA,OAAA,IAAAzZ,MAAAC,QAAAwZ,cACAA,YAAA1hB,KAAAmZ,KAAAtS,MAAAuT,QAEAsH,YAAAlhB,OAAA,GAAAkhB,YAAA,KAAA1hB,KAAAmZ,KAAAtS,MAAAuT,QACAsH,YAAA5d,KAAA9D,KAAAmZ,KAAAtS,MAAAuT,QACAsH,aAEAA,aAGAsB,sBAAA,SAAAF,aACA,OAAAzV,KAAA8R,gBAAA3e,OAAA,GAAA6M,KAAA8R,gBAAA,KAAA2D,YAAA,IAAAzV,KAAA+R,gBAAApf,KAAAmZ,KAAAsJ,KAAAE,MAAAuB,IACAlkB,KAAAmZ,KAAAsJ,KAAAE,MAAAwB,KAGAnkB,KAAAmZ,KAAAsJ,KAAAE,MAAAuB,KAcA5gB,KAAAkY,OAAA,SAAAxV,OAAAoe,SAEA,MAAApF,gBAAAhf,KAAAmZ,KAAA3R,MAAAxB,OAAA1C,KAAAwb,QAAA9Y,OAAA1C,MACAtD,KAAAmZ,KAAA3R,MAAAgU,OAAAwD,gBAAAoF,QAAA9gB,MACAA,KAAAic,kBACAjc,KAAAwc,SAAA9f,KAAAmZ,KAAAwB,MAAAE,OACAvX,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,aAKAhD,IAAA6H,QAAAnC,QACA1C,KAAA+e,UAAAla,QAAAnC,aAEA1F,IAAA6H,QAAA2W,SACAxb,KAAA8d,OAAAjZ,QAAA2W,UA/rBA,GAqsBA,WACA,aA2BA9e,KAAAmZ,KAAAkL,UAAA,SAAAlc,SAEA,MAAAtB,sBAEAwX,uBAAA,gDACAiG,qBAAA,4DAIA,QAAAhkB,IAAA6H,QAAAqS,KACA,MAAA3T,qBAAA,uBAEA,QAAAvG,IAAA6H,QAAAoc,cACA,MAAA1d,qBAAA,qBAGA7G,KAAAW,OAAAX,KAAAqD,SAAAC,MAGA,MAAA+J,KAAA/J,KAEAA,KAAAkX,KAAArS,QAAAqS,KACAlX,KAAAihB,cAAApc,QAAAoc,cACAjhB,KAAAihB,cAAA9gB,YAAAH,MAGAA,KAAAsd,IAAA,KAEA5gB,KAAAmZ,KAAAsB,cAAAnX,KAAAkX,KAAAlX,MAKAA,KAAA2c,WAAA,WACA,MAAAC,SACAsE,OAAAnX,KAAAuT,KAEAN,UAAAtgB,KAAAmZ,KAAA3R,MAAAsT,yBAAAzN,KAAAkT,YAEA,OADAvgB,KAAAmC,MAAA+d,QAAAI,WACAJ,SAOA5c,KAAAid,SAAA,WACA,OAAAlT,KAAAkX,cAAAhE,YAGAjd,KAAAmhB,SAAA,WACApX,KAAAuT,IAAAvT,KAAAkX,cAAA/D,gBACAnT,KAAAlJ,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QAQAA,KAAAohB,qBAAA,SAAAvL,MACA9L,KAAAoX,YAMAnhB,KAAAqhB,2BAAA,SAAAxL,MACA9L,KAAAoX,YAMAnhB,KAAAshB,sBAAA,SAAAzL,MACA9L,KAAAoX,YAIApX,KAAAuT,IAAAvT,KAAAkX,cAAA/D,iBA3GA,GAgHA,WACA,aA+BAxgB,KAAAmZ,KAAA0L,YAAA,SAAA1c,SACAnI,KAAAW,OAAAX,KAAAmZ,KAAAgF,QAAA7a,MAAA6E,UAEA,MAAAkF,KAAA/J,KAEAuD,sBAEAie,uBAAA,6CACAC,YAAA,wDACAC,iBAAA,uDAIA,GAAA1hB,KAAA9B,cAAAxB,KAAAmZ,KAAA0L,YACA,MAAAhe,qBAAA,uBAGAvD,KAAAmL,IAAA,UACAnO,IAAA6H,QAAAsG,MACAnL,KAAAmL,IAAAtG,QAAAsG,KAGAnL,KAAAyJ,QAAA/M,KAAAmZ,KAAAtS,MAAAyT,iBACAha,IAAA6H,QAAA4E,UACAzJ,KAAAyJ,QAAA5E,QAAA4E,SAGAzJ,KAAA2J,OAAA,OACA3M,IAAA6H,QAAA8E,QACA3J,KAAA2J,MAAA9E,QAAA8E,OAGA3J,KAAA4J,gBACA5M,IAAA6H,QAAA+E,UACA5J,KAAA4J,QAAA/E,QAAA+E,SAGA5J,KAAA2hB,iBAAA,OACA3kB,IAAA6H,QAAA8c,kBACA3hB,KAAA2hB,gBAAA9c,QAAA8c,iBAIA3hB,KAAA8J,YAAA,aACA9J,KAAA4hB,WAAA,KA4BA5hB,KAAA6hB,cAAA,WACA,OAAA7hB,KAAA4hB,aACA5hB,KAAA4hB,WAAA5W,QACAhL,KAAA4hB,WAAA,OAQA5hB,KAAA8hB,OAAA,WACA,OAAA9hB,KAAAmL,KASAnL,KAAA+hB,SAAA,WACA,GAAA,OAAA/hB,KAAAmL,IACA,MAAA5H,qBAAA,iBAEAvD,KAAAwc,SAAA9f,KAAAmZ,KAAAwB,MAAAC,SACAtX,KAAAa,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAI,cAAAuI,QAAA3e,OACAA,KAAA6hB,gBAnDA,WACA,MAAAG,YACA7W,IAAApB,KAAAoB,IACA/B,QAAA,SAAA6Y,WACA,IAAAlY,KAAA4X,iBACA5X,KAAAsS,SAEAtS,KAAAmY,YAAAD,WAEAnY,YAAAC,KAAAD,YACAL,QAAAM,KAAAN,QACAE,MAAAI,KAAAJ,MACAC,QAAAG,KAAAH,QACAJ,MAAAO,KAAAoY,UAEApY,KAAA6X,WAAA,IAAAllB,KAAAsM,IAAAC,QAAA+Y,YACAjY,KAAA6X,WAAA1W,KAAAnB,KAAAoB,KAoCAiX,IASApiB,KAAAkiB,YAAA,SAAAD,YASAjiB,KAAAqiB,OAAA,SAAAC,QACAtiB,KAAAmL,IAAAmX,QAQAtiB,KAAAmiB,SAAA,SAAAF,UACAlY,KAAAyS,SAAA9f,KAAAmZ,KAAAwB,MAAAtK,OACAhD,KAAAlJ,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAO,WACAoI,QAAA5U,KACAsC,QAAA3P,KAAAgI,OAAAsC,OAAAzD,qBAAAke,aAAA1X,KAAAoB,IAAA8W,SAAA/X,SACA+X,SAAAA,aApKA,GA2KA,WACA,aAgBAvlB,KAAAmZ,KAAA0M,YAAA,SAAA1d,SACAnI,KAAAW,OAAAX,KAAAmZ,KAAA0L,YAAAvhB,MAAA6E,UAEA,MAAAkF,KAAA/J,KAEAA,KAAA8J,YAAA,mBAEA9J,KAAA1B,KAAA,UACAtB,IAAA6H,QAAAvG,OACA0B,KAAA1B,KAAAuG,QAAAvG,MAIA0B,KAAAwiB,QAAA,KAQAxiB,KAAAyiB,WAAA,WACA,OAAAziB,KAAAwiB,SAOAxiB,KAAA0iB,QAAA,WACA,OAAA1iB,KAAA1B,MAOA0B,KAAA2iB,YAAA,SAAAvc,MACA2D,KAAAsS,SACAuG,aAAAxc,OAQApG,KAAAkiB,YAAA,SAAAD,UACAW,aAAArc,KAAAI,MAAAsb,SAAA7X,gBAGA,MAAAwY,aAAA,SAAAxc,MAEA,GADA2D,KAAAyY,QAAApc,KACA,OAAA2D,KAAAzL,KACAyL,KAAA+T,OAAA1X,UAEA,CACA,MAAAoV,QAAA9e,KAAA8B,eAAA4H,KAAA2D,KAAAzL,WACAtB,IAAAwe,SACAzR,KAAA+T,OAAAtC,WASAxb,KAAA6iB,QAAA,SAAAvkB,MACA0B,KAAA1B,KAAAA,OAtFA,GA4FA,WACA,aAeA5B,KAAAmZ,KAAAiN,WAAA,SAAAje,SACAnI,KAAAW,OAAAX,KAAAmZ,KAAA0L,YAAAvhB,MAAA6E,UAEA,MAAAkF,KAAA/J,KAEAA,KAAA8J,YAAA,kBAEA9J,KAAA1B,KAAA,SACAtB,IAAA6H,QAAAvG,OACA0B,KAAA1B,KAAAuG,QAAAvG,MAIA0B,KAAA+iB,OAAA,KAQA/iB,KAAAgjB,UAAA,WACA,OAAAhjB,KAAA+iB,QAOA/iB,KAAA0iB,QAAA,WACA,OAAA1iB,KAAA1B,MAOA0B,KAAAijB,WAAA,SAAAzI,QACAzQ,KAAAsS,SACAtS,KAAAmY,aACA9X,aAAAoQ,UASAxa,KAAAkiB,YAAA,SAAAD,UACA,MAAAiB,OAAAxmB,KAAAmZ,KAAA+C,IAAA2B,gBAAA0H,SAAA7X,cACAL,KAAAgZ,OAAAG,OACA,MAAApd,MAAApJ,KAAAmZ,KAAA+C,IAAAI,cAAAkK,OAAAnZ,KAAAzL,MACAkd,WACA,IAAA,IAAAve,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IACAue,QAAAhb,KAAA9D,KAAAmZ,KAAA+C,IAAAgB,WAAA9T,MAAA7I,KAEA8M,KAAA+T,OAAAtC,UAOAxb,KAAA6iB,QAAA,SAAAvkB,MACA0B,KAAA1B,KAAAA,OAjFA,GA+FA,WACA,aAQA5B,KAAAmZ,KAAAsN,YAAA,SAAAte,SACAnI,KAAAW,OAAAX,KAAAmZ,KAAAiN,WAAA9iB,MAAA6E,UAEA,MAAAkF,KAAA/J,KAGAA,KAAA+iB,OAAA,KAGA/iB,KAAAojB,iBAAA,QAAA,OAAA,cAAA,WAAA,YAAA,iBAAA,YAAA,UAAA,gBAAA,WAAA,YAAA,OAAA,QAAA,MAAA,QAAA,YAAA,YAAA,YAGApjB,KAAAqjB,cAAA,QAAA,OAAA,cAAA,SAAA,WAAA,WAAA,YAAA,OAAA,UAAA,UAGArjB,KAAAsjB,eAOA,MAgCAC,eAAA,SAAAzd,OACA,MAAA0V,WAIA,OAHA1V,MAAA1G,QAAA,SAAAC,SACAmc,QAAAhb,KAnCA,SAAAgK,MACA,MAAAgZ,OACA,IAAA,IAAAvmB,EAAA,EAAAA,EAAA8M,KAAAsZ,aAAAnmB,OAAAD,IAAA,CACA,MAAAoC,QAAA0K,KAAAsZ,aAAApmB,GACA6I,MAAApJ,KAAAmZ,KAAA+C,IAAAI,cAAAxO,KAAAnL,SACAyG,MAAA5I,OAAA,IACAsmB,IAAAnkB,SAAAiZ,aAAAxS,MAAA,KAIA,OAAA0d,IAyBAC,CAAApkB,YAEAmc,SAUA,SAAAlD,aAAA5W,MACA,MAAA6W,MAAA7W,KAAA8W,WAAA,GAEA,GAAA,IAAAD,MAAAE,UAAA,IAAAF,MAAAE,SACA,OAAAF,MAAA1C,KAUA7V,KAAA2c,WAAA,WACA,MAAAC,SACA8G,MAAA3Z,KAAAsH,SACAyL,YAAA/S,KAAAgT,mBAEAC,UAAAtgB,KAAAmZ,KAAA3R,MAAAsT,yBAAAzN,KAAAkT,YAGA,OAFAvgB,KAAAmC,MAAA+d,QAAAI,WACAtgB,KAAAmC,MAAA+d,QAAA7S,KAAAuZ,aACA1G,SAQA5c,KAAAkiB,YAAA,SAAAD,UACA,MAAAiB,OAAAxmB,KAAAmZ,KAAA+C,IAAA2B,gBAAA0H,SAAA7X,cACAL,KAAAgZ,OAAAG,OA9DA,SAAAS,SACA,IAAA,IAAA1mB,EAAA,EAAAA,EAAA8M,KAAAqZ,gBAAAlmB,OAAAD,IAAA,CACA,MAAAoC,QAAA0K,KAAAqZ,gBAAAnmB,GACA6I,MAAApJ,KAAAmZ,KAAA+C,IAAAI,cAAA2K,QAAAtkB,SACAyG,MAAA5I,OAAA,IACA6M,KAAAuZ,YAAAjkB,SAAAiZ,aAAAxS,MAAA,MA4DA8d,CADAlnB,KAAAmZ,KAAA+C,IAAAI,cAAAkK,OAAA,aACA,IAEA,MAAAQ,MAAAhnB,KAAAmZ,KAAA+C,IAAAI,cAAAkK,OAAA,UACA1H,QAAA+H,eAAAG,OACA3Z,KAAA+T,OAAAtC,WArHA,GA2HA,WACA,aAkBA9e,KAAAmZ,KAAAgO,iBAAA,SAAAhf,SAEA,MAAAtB,sBAEAugB,kBAAA,kEACAC,YAAA,wDACAC,mBAAA,iEAIA,QAAAhnB,IAAA6H,QAAAoc,cACA,MAAA1d,qBAAA,kBAGA,QAAAvG,IAAA6H,QAAAsG,IACA,MAAA5H,qBAAA,YAGA7G,KAAAW,OAAAX,KAAAmZ,KAAA0M,YAAAviB,MAAA6E,UAGA,MAAAkF,KAAA/J,KAGAA,KAAAihB,cAAApc,QAAAoc,cACAjhB,KAAAihB,cAAA9gB,YAAAH,MACAA,KAAAmL,IAAA,KACAnL,KAAAikB,WAAApf,QAAAsG,IAKAnL,KAAAkkB,UAAA,SAAA5G,KACA,MAAA6G,QAAAznB,KAAAgI,OAAA4C,SAAAyC,KAAAka,WAAA3G,KACA,GAAA6G,UAAApa,KAAAka,WACA,MAAAvnB,KAAAgI,OAAAsC,OAAAzD,qBAAAygB,oBAAAG,UAEApa,KAAAsY,OAAA8B,SACApa,KAAAgY,YAQA/hB,KAAAqhB,2BAAA,SAAAxL,MACA,OAAAA,KAAA6I,WACA3U,KAAAma,UAAArO,KAAA6I,YAGA3U,KAAAsS,WAtEA,GA8EA,WACA,aAkBA3f,KAAAmZ,KAAAuO,gBAAA,SAAAvf,SAEA,MAAAtB,sBAEAugB,kBAAA,iEACAC,YAAA,uDACAC,mBAAA,gEAIA,QAAAhnB,IAAA6H,QAAAoc,cACA,MAAA1d,qBAAA,kBAGA,QAAAvG,IAAA6H,QAAAsG,IACA,MAAA5H,qBAAA,YAGA7G,KAAAW,OAAAX,KAAAmZ,KAAAiN,WAAA9iB,MAAA6E,UAGA,MAAAkF,KAAA/J,KAGAA,KAAAihB,cAAApc,QAAAoc,cACAjhB,KAAAihB,cAAA9gB,YAAAH,MACAA,KAAAmL,IAAA,KACAnL,KAAAikB,WAAApf,QAAAsG,IAKAnL,KAAAkkB,UAAA,SAAA5G,KACA,MAAA6G,QAAAznB,KAAAgI,OAAA4C,SAAAyC,KAAAka,WAAA3G,KACA,GAAA6G,UAAApa,KAAAka,WACA,MAAAvnB,KAAAgI,OAAAsC,OAAAzD,qBAAAygB,oBAAAG,UAEApa,KAAAsY,OAAA8B,SACApa,KAAAgY,YAQA/hB,KAAAqhB,2BAAA,SAAAxL,MACA,OAAAA,KAAA6I,WACA3U,KAAAma,UAAArO,KAAA6I,YAGA3U,KAAAsS,WAtEA,GA8EA,WACA,aA8BA3f,KAAAmZ,KAAAwO,UAAA,SAAAxf,SAEA,MAAAtB,sBAEAwX,uBAAA,gDACAiG,qBAAA,4DAIA,QAAAhkB,IAAA6H,QAAAqS,KACA,MAAA3T,qBAAA,uBAEA,QAAAvG,IAAA6H,QAAAoc,cACA,MAAA1d,qBAAA,qBAGA7G,KAAAW,OAAAX,KAAAqD,SAAAC,MAGA,MAAA+J,KAAA/J,KAEAA,KAAAkX,KAAArS,QAAAqS,KACAlX,KAAAihB,cAAApc,QAAAoc,cACAjhB,KAAAihB,cAAA9gB,YAAAH,MAEAtD,KAAAmZ,KAAAsB,cAAAnX,KAAAkX,KAAAlX,MAEA,IAAAskB,SAAA,QACAtnB,IAAA6H,QAAAyf,WACAA,SAAAzf,QAAAyf,UAGA,IAAAC,YAAA,EACAC,mBAAA,EAKAxkB,KAAA2c,WAAA,WACA,MAAAC,QAAA7S,KAAAkX,cAAAtE,aASA,OARAC,QAAAC,SAAAD,QAAAC,SAAA0D,MAAAxW,KAAA0a,wBAAA1a,KAAA2a,sBAAA,GAEA9H,QAAA+H,kBAAA5a,KAAA6a,sBACAhI,QAAAiI,uBAAAjI,QAAAC,SAAA3f,OACA0f,QAAAkI,iBAAA/a,KAAA2a,sBACA9H,QAAA4H,mBAAAza,KAAA0a,wBACA7H,QAAA0H,SAAAva,KAAAgb,cACAnI,QAAAoI,UAAAjb,KAAAkb,gBACArI,SAOA5c,KAAA0kB,oBAAA,WACA,IAAAQ,OAAAnb,KAAA0a,wBAAA1a,KAAAgb,cAAA,EAIA,OAHAG,OAAAnb,KAAAgT,oBACAmI,OAAAnb,KAAAgT,mBAEAmI,QAOAllB,KAAAykB,sBAAA,WACA,OAAAD,oBAOAxkB,KAAA4kB,oBAAA,WACA,OAAAL,aAOAvkB,KAAAilB,cAAA,WACA,OAAAjT,UAAAjI,KAAAkX,cAAAlE,kBAAAhT,KAAAgb,cAAA,GAAAhb,KAAAgb,gBAOA/kB,KAAA+kB,YAAA,WACA,OAAAT,UAUAtkB,KAAAmlB,SAAA,SAAAC,aACA,IAAArb,KAAAsb,cAAAD,aAGAA,aAAArb,KAAA6a,wBAGAL,YAAAa,WACAZ,oBAAAY,WAAA,GAAArb,KAAAgb,cAEAhb,KAAA+U,mBAAA/U,KAAA0a,yBACA1a,KAAAlJ,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,SAOAA,KAAAslB,aAAA,WACAvb,KAAAob,SAAApb,KAAA6a,sBAAA,IAOA5kB,KAAAulB,aAAA,WACAxb,KAAAob,SAAApb,KAAA6a,sBAAA,IAQA5kB,KAAAqlB,cAAA,SAAAD,YACA,QAAAA,WAAA,GAAAA,WAAArb,KAAAkb,kBAUAjlB,KAAAwlB,YAAA,WACA,OAAA,GASAxlB,KAAAqd,mBAAA,WACA,OAAAtT,KAAAkX,cAAA5D,sBAOArd,KAAA+c,gBAAA,WACA,OAAAhT,KAAAkX,cAAAlE,mBAQA/c,KAAA+hB,SAAA,gBACA/kB,IAAA+M,KAAAkX,cAAAc,UACAhY,KAAAkX,cAAAc,YAUA/hB,KAAAie,gBAAA,SAAAT,OACAzT,KAAAkX,cAAAhD,gBAAAT,QASAxd,KAAA8e,mBAAA,SAAAvd,OACAwI,KAAAkX,cAAAnC,mBAAAvd,QAQAvB,KAAAwc,SAAA,SAAAwC,UACAjV,KAAAkX,cAAAzE,SAAAwC,WAYAhf,KAAAmf,KAAA,SAAAf,YAAAgB,WACArV,KAAAkX,cAAA9B,KAAAf,YAAAgB,WACArV,KAAAlJ,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QAQAA,KAAAohB,qBAAA,SAAAvL,MACA9L,KAAAlJ,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAE,cAAAkB,WAAApX,QAMAA,KAAAshB,sBAAA,SAAAzL,MACA9L,KAAAlJ,gBAAAnE,KAAAmZ,KAAAtS,MAAAyS,OAAAM,eAAAc,WAAApX,SA5QA,GAkRA,WACA,aAEAtD,KAAAC,UAAA,oBAEAD,KAAAmZ,KAAA4P,OAAAliB,OACAsJ,mBACA6Y,iBAAA,kCACAC,OAAA,kBACAC,YAAA,uBACAC,YAAA,8BACAC,OAAA,yBACAC,iBAAA,yBAEAC,oBAAA,8BACAC,gBACA,iCACA,mCACA,sCACA,gCAEAvmB,gBACAwmB,8BAAA,2EACAC,oBAAA,gCACAC,6BAAA,6EAEApQ,QACAqQ,gBAAA,kBAEAC,WACAX,OAAA,8BAaA,MAAAzc,QACAqd,cAAA,GAQA7pB,KAAAmZ,KAAA4P,OAAAe,MAAA,SAAA3hB,SAEA,OADAnI,KAAAmC,MAAAqK,OAAArE,SACAqE,QASAxM,KAAAmZ,KAAA4P,OAAAgB,qBAAA,SAAA/kB,MACA,OAAAA,KAAAhF,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAAkZ,mBAQArpB,KAAAmZ,KAAA4P,OAAAxW,KAAA,SAAAvN,MACA,MAAAglB,aAAAhlB,KAAA4C,aAAA5H,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAA6Y,kBACA,GAAA,OAAAgB,aACA,MAAAhqB,KAAAmZ,KAAA4P,OAAAliB,MAAA7D,eAAA,8BAGA,GAAA,OADAhD,KAAAmZ,KAAAoB,cAAAyP,cAEA,MAAAhqB,KAAAgI,OAAAsC,OAAAtK,KAAAmZ,KAAA4P,OAAAliB,MAAA7D,eAAAymB,qBAAAO,eAEA,IAAAC,WAAAjlB,KAAA4C,aAAA5H,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAA+Y,aACA,OAAAe,aACAA,WAAAjqB,KAAAmZ,KAAA4P,OAAAliB,MAAAyiB,qBAEA,MAAAY,YAAAlqB,KAAA2B,eAAAsoB,YACA,QAAA3pB,IAAA4pB,YACA,MAAAlqB,KAAAgI,OAAAsC,OAAAtK,KAAAmZ,KAAA4P,OAAAliB,MAAA7D,eAAA0mB,8BAAAO,aAEA,IAAAC,aAAAllB,KAAAA,QAOAhF,KAAAmZ,KAAA4P,OAAAoB,YAAA,SAAArkB,UAKA,QAJAxF,IAAAwF,WACAA,SAAAF,SAAAwkB,cAAA,SAGA,OAAAtkB,SAAA,CACA,MAAAsD,MAAAtD,SAAAsC,iBAAApI,KAAAmZ,KAAA4P,OAAAliB,MAAA+iB,UAAAX,QACA,IAAA,IAAA1oB,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IACAP,KAAAmZ,KAAA4P,OAAAxW,KAAAnJ,MAAA7I,MAKAP,KAAAC,UAAA,0BAcAD,KAAAmZ,KAAA4P,OAAAvhB,MAAA6iB,0BAAA,SAAAtB,QACA,OACA/jB,KAAA+jB,OAAAvc,OAAAxH,KACAslB,GAAAvB,OAAArO,aAIA1a,KAAA8E,IAAAY,MAAA,YAEA,IAAA8G,OAAAqd,cACA7pB,KAAAmZ,KAAA4P,OAAAoB,gBArIA,GA0IA,WACA,aAyBAnqB,KAAAmZ,KAAA4P,OAAAwB,KAAA,SAAApiB,SAWA,GATAnI,KAAAW,OAAAX,KAAAqD,SAAAC,MAEAA,KAAAuD,OACA7D,gBACAwnB,cAAA,wDACAC,aAAA,0DAIAnqB,IAAA6H,QAAAnD,KACA,MAAA1B,KAAAuD,MAAA7D,eAAA,aAGAM,KAAAkJ,QACAxH,KAAA,KAEA0lB,OAAAviB,QAAAnD,KAAA4C,aAAA5H,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAA6Y,mBAAA,KACA2B,WAAAxiB,QAAAnD,KAAA4C,aAAA5H,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAAgZ,cAAA,KAEAyB,OAAAziB,QAAAyiB,QAAA,KACAN,GAAA,MAEAtqB,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACA,MAAAkF,KAAA/J,KAYA,GATAA,KAAAoX,WAAA,KACA,OAAApX,KAAAkJ,OAAA8d,GAEAhnB,KAAAoX,WAAApX,KAAAkJ,OAAA8d,GAIAhnB,KAAAoX,WAAA1a,KAAAmZ,KAAAoB,cAAAjX,KAAAkJ,OAAAke,QAEA,OAAApnB,KAAAoX,WACA,MAAA1a,KAAAgI,OAAAsC,OAAAtK,KAAAmZ,KAAA4P,OAAAliB,MAAA7D,eAAAymB,qBAAAnmB,KAAAkJ,OAAAqe,OAEAvnB,KAAAoX,WAAAjX,YAAAH,MAGAA,KAAAsnB,OAAA5qB,KAAAmZ,KAAA4P,OAAAliB,MAAA0iB,eAEA,MAAAuB,WAAAxnB,KAAAkJ,OAAAxH,KAAA4C,aAAA5H,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAAiZ,QACA,OAAA0B,aACAxnB,KAAAsnB,OAAAtnB,KAAAsnB,OAAAG,OAAAD,WAAAzqB,MAAA,OAEA,OAAAiD,KAAAkJ,OAAAoe,SACAtnB,KAAAsnB,OAAAtnB,KAAAsnB,OAAAG,OAAAznB,KAAAkJ,OAAAoe,SAIAtnB,KAAAkJ,OAAAxH,KAAAhF,KAAAmZ,KAAA4P,OAAAliB,MAAAsJ,kBAAAkZ,kBAAA/lB,KAEAA,KAAA0nB,YAAA,WACA,MAAAC,WACAjmB,KAAA1B,KAAAkJ,OAAAxH,KACA0V,WAAApX,KAAAoX,YAEA,IAAA,IAAAna,EAAA,EAAAA,EAAA+C,KAAAsnB,OAAApqB,OAAAD,IAAA,CACA,MAAAM,KAAAb,KAAA2B,eAAA2B,KAAAsnB,OAAArqB,IACA,QAAAD,IAAAO,KAIA,MAAAb,KAAAgI,OAAAsC,OAAAhH,KAAAuD,MAAA7D,eAAAwnB,eAAAlnB,KAAAsnB,OAAArqB,KAHAM,KAAAoqB,aAYA3nB,KAAA4nB,OAAA,WAEA,MAAAC,KAAAnrB,KAAAmZ,KAAA4P,OAAAvhB,MAAA6iB,0BAAA/mB,MACAA,KAAAa,gBAAAnE,KAAAmZ,KAAA4P,OAAAliB,MAAAyS,OAAAqQ,gBAAAwB,OAQA7nB,KAAAqhB,2BAAA,SAAAxL,MACA9L,KAAA2d,eAMA1nB,KAAAohB,qBAAA,SAAAvL,MACA9L,KAAA6d,UAMA5nB,KAAAshB,sBAAA,SAAAzL,MACA9L,KAAA6d,WAhIA,GAsIA,WACA,aAUAlrB,KAAAmZ,KAAA4P,OAAAqC,WAAA,SAAAjjB,SAEAnI,KAAAW,OAAAX,KAAAmZ,KAAA4P,OAAAwB,KAAAjnB,MAAA6E,UACA,MAAAkF,KAAA/J,KAGA+J,KAAAxG,MAAAwkB,2BACAC,mBAAA,4BACAC,sBAAA,iGACAC,sBAAA,8GAGAloB,KAAAmoB,SAAA,GAwCAnoB,KAAAooB,aAAA,WACA,OAAApoB,KAAAmoB,SAAAnoB,KAAAoX,WAAAuF,eAOA3c,KAAA4nB,OAAA,WAEA,GAAA,KAAA5nB,KAAAmoB,SAAA,CACAnoB,KAAAkJ,OAAAxH,KAAA2mB,UAAAroB,KAAAooB,eACApoB,KAAA0nB,cACA,MAAAG,KAAAnrB,KAAAmZ,KAAA4P,OAAAvhB,MAAA6iB,0BAAA/mB,MACAA,KAAAa,gBAAAnE,KAAAmZ,KAAA4P,OAAAliB,MAAAyS,OAAAqQ,gBAAAwB,QAjDA,SAAAnmB,MAEA,GAAA,OAAAqI,KAAAb,OAAAme,WACAtd,KAAAoe,SAAAL,WAAAQ,QAAA5mB,KAAA2mB,eAEA,CACA,MAAAE,aAAAjmB,SAAAkmB,eAAAze,KAAAb,OAAAme,YACA,GAAA,OAAAkB,aACA,MAAA7rB,KAAAgI,OAAAsC,OAAA+C,KAAAxG,MAAAwkB,0BAAAG,uBAAAne,KAAAb,OAAAme,aAEA,MAAAoB,YAAAF,aAAAjkB,aAAA,OACA,GAAA,OAAAmkB,YAEA1e,KAAAoe,SAAAL,WAAAQ,QAAAC,aAAAF,eAEA,CAEA,MAAArG,YACA5Y,QAAA,SAAA6Y,UACAlY,KAAAoe,SAAAL,WAAAQ,QAAArG,SAAA7X,cACAL,KAAA6d,UAEApe,MAAA,SAAAyY,UACA,MAAAvlB,KAAAgI,OAAAsC,OAAA+C,KAAAxG,MAAAwkB,0BAAAE,uBAAAQ,gBAGA,IAAA/rB,KAAAsM,IAAAC,QAAA+Y,YACA9W,KAAAud,eA2BAC,CAAA1oB,KAAAkJ,OAAAxH,OAlFA,GAuFA,WACA,aAEAhF,KAAAC,UAAA,2BASA,MAAA4G,yBAEAolB,OAAA,yBACAC,WAAA,2BACAC,cAAA,8BACAC,KAAA,wBALAvlB,iBAQAolB,OAAA,4BACAC,WAAA,8BACAC,cAAA,iCACAC,KAAA,2BAIAC,eAAA,SAAAjjB,MAAAkjB,WACA,IAAA,IAAA/rB,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IACA6I,MAAA7I,GAAAgsB,UAAA9gB,OAAA6gB,YAQAtsB,KAAAmZ,KAAA4P,OAAA6B,OAAAjW,OAAA,SAAAxM,SACA,MAAAiB,MAAAjB,QAAAnD,KAAAoD,iBAAAvB,gBAAAolB,QACA,QAAA3rB,IAAA6H,QAAAuS,WAAAiG,oBAKAvX,MAAA5I,OAAA,EAAA,CACA,MAAAsL,SAAA1C,MAAA,GAAAxB,aAAAf,wBAAAolB,QACA7iB,MAAA,GAAAmjB,UAAA9gB,OAAAK,UAEA,IAAAjH,MAAA,GAEA,IAAAsD,QAAAuS,WAAAiG,qBAEA0L,eAAAjjB,MAAA0C,UAKA1C,MAFAvE,MAAAsD,QAAAuS,WAAAiG,sBAEA4L,UAAAC,IAAA1gB,UAIA,IAAA,IAAAvL,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IAAA,CACA,MAAAoC,QAAAyG,MAAA7I,GACAksB,eAAA9pB,QAAAmJ,SAAA1C,UAKA,MAAAqjB,eAAA,SAAA9pB,QAAAmJ,SAAA1C,OACAzG,QAAAyC,iBAAA,QAAA,SAAAC,OACAA,MAAAyN,iBACAuZ,eAAAjjB,MAAA0C,UACAnJ,QAAA4pB,UAAAC,IAAA1gB,YACA,IAOA9L,KAAAmZ,KAAA4P,OAAA6B,OAAA8B,SAAA,SAAAvkB,SACA,MAAAiB,MAAAjB,QAAAnD,KAAAoD,iBAAAvB,gBAAAqlB,YACA,IAAA,IAAA3rB,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IAAA,CACA,MAAAoC,QAAAyG,MAAA7I,GACAugB,MAAAne,QAAAiF,aAAAf,wBAAAqlB,YACAS,cAAAhqB,QAAAme,MAAA3Y,QAAAuS,cAIA,MAAAiS,cAAA,SAAAhqB,QAAAme,MAAApG,YACA/X,QAAAyC,iBAAA,QAAA,SAAAC,OACAA,MAAAyN,iBACA4H,WAAA6G,gBAAAT,SACA,IAOA9gB,KAAAmZ,KAAA4P,OAAA6B,OAAAgC,YAAA,SAAAzkB,SACA,MAAAiB,MAAAjB,QAAAnD,KAAAoD,iBAAAvB,gBAAAslB,eACA,IAAA,IAAA5rB,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IAAA,CACA,MAAAoC,QAAAyG,MAAA7I,GACAssB,SAAAvX,SAAA3S,QAAAiF,aAAAf,wBAAAslB,eAAA,IACAW,iBAAAnqB,QAAAkqB,SAAA1kB,QAAAuS,cAIA,MAAAoS,iBAAA,SAAAnqB,QAAAkqB,SAAAnS,YACA/X,QAAAyC,iBAAA,QAAA,SAAAC,OACAA,MAAAyN,iBACA4H,WAAA0H,mBAAAyK,YACA,IAOA7sB,KAAAmZ,KAAA4P,OAAA6B,OAAAnI,KAAA,SAAAta,SACA,MAAAiB,MAAAjB,QAAAnD,KAAAoD,iBAAAvB,gBAAAulB,MACA,IAAA,IAAA7rB,EAAA,EAAAA,EAAA6I,MAAA5I,OAAAD,IAAA,CACA,MAAAoC,QAAAyG,MAAA7I,GACAoC,QAAAyC,iBAAA,QAAA,SAAAC,OACAA,MAAAyN,iBACA,MAAAia,QAAApqB,QAAAiF,aAAAf,wBAAAulB,MACAjkB,QAAAuS,WAAA+H,KAAAsK,WACA,KAhIA,GAqIA,WACA,aAEA/sB,KAAAC,UAAA,kBAMAD,KAAAmZ,KAAAsJ,KAAAE,OACAuB,IAAA,YACAC,KAAA,aACAvB,IAAA,UAGA,MAAA/b,sBAEAmmB,sBAAA,2CACAC,uBAAA,8CASAjtB,KAAAmZ,KAAAsJ,KAAAI,iBAAA,SAAAH,WACA,IAAA,IAAA/G,OAAA3b,KAAAmZ,KAAAsJ,KAAAE,MACA,GAAA3iB,KAAAmZ,KAAAsJ,KAAAE,MAAAhH,OAAA+G,UACA,OAAA,EAGA,OAAA,GASA1iB,KAAAmZ,KAAAsJ,KAAAe,gBAAA,SAAA0J,SAAAxK,WACA,QAAApiB,IAAAN,KAAAmZ,KAAAsJ,KAAAyK,UACA,MAAAltB,KAAAgI,OAAAsC,OAAAzD,qBAAAmmB,uBAAAE,WAEA,QAAA5sB,IAAAN,KAAAmZ,KAAAsJ,KAAAyK,UAAAxK,WACA,MAAA1iB,KAAAgI,OAAAsC,OAAAzD,qBAAAomB,wBAAAvK,YAEA,OAAA1iB,KAAAmZ,KAAAsJ,KAAAyK,UAAAxK,YAQA1iB,KAAAC,UAAA,uBAEAD,KAAAmZ,KAAAsJ,KAAA0K,KAAAC,UAAA,SAAAnkB,MACA,OAAA,SAAA+a,EAAAC,GACA,IAAAoJ,GAAArtB,KAAA8B,eAAAkiB,EAAA/a,MACAqkB,GAAAttB,KAAA8B,eAAAmiB,EAAAhb,MAGA,OAFAokB,GAAAA,GAAA,IAAAze,KAAAye,IAAA,IACAC,GAAAA,GAAA,IAAA1e,KAAA0e,IAAA,KAKAttB,KAAAmZ,KAAAsJ,KAAA0K,KAAAI,WAAA,SAAAtkB,MACA,OAAA,SAAA+a,EAAAC,GACA,IAAAoJ,GAAArtB,KAAA8B,eAAAkiB,EAAA/a,MACAqkB,GAAAttB,KAAA8B,eAAAmiB,EAAAhb,MAGA,OAFAokB,GAAAA,GAAA,IAAAze,KAAAye,IAAA,GACAC,GAAAA,GAAA,IAAA1e,KAAA0e,IAAA,GACAD,KAIArtB,KAAAC,UAAA,yBAEAD,KAAAmZ,KAAAsJ,KAAA5L,OAAAuW,UAAA,SAAAnkB,MACA,OAAA,SAAA+a,EAAAC,GAGA,OAFAD,EAAAhkB,KAAA8B,eAAAkiB,EAAA/a,MACAgb,EAAAjkB,KAAA8B,eAAAmiB,EAAAhb,WACA3I,IAAA0jB,QAAA1jB,IAAA2jB,EACAD,IAAAC,EAAA,EAAAD,EAAA,GAAA,EAEAA,EAAAC,IAIAjkB,KAAAmZ,KAAAsJ,KAAA5L,OAAA0W,WAAA,SAAAtkB,MACA,OAAA,SAAA+a,EAAAC,GAGA,OAFAD,EAAAhkB,KAAA8B,eAAAkiB,EAAA/a,MACAgb,EAAAjkB,KAAA8B,eAAAmiB,EAAAhb,WACA3I,IAAA0jB,QAAA1jB,IAAA2jB,EACAD,IAAAC,EAAA,EAAAD,GAAA,EAAA,EAEAC,EAAAD,IAIAhkB,KAAAC,UAAA,yBAEAD,KAAAmZ,KAAAsJ,KAAAza,OAAAolB,UAAA,SAAAnkB,MACA,OAAA,SAAA+a,EAAAC,GAGA,GAFAD,EAAAhkB,KAAA8B,eAAAkiB,EAAA/a,MACAgb,EAAAjkB,KAAA8B,eAAAmiB,EAAAhb,WACA3I,IAAA0jB,QAAA1jB,IAAA2jB,EACA,OAAAD,IAAAC,EAAA,EAAAD,EAAA,GAAA,EAEA,MAAAwJ,GAAAxJ,EAAA5iB,WACAqsB,GAAAxJ,EAAA7iB,WACAssB,QAAAF,GAAA5qB,cACA+qB,QAAAF,GAAA7qB,cACAgrB,OAAAJ,GAAAhtB,OAAAitB,GAAAjtB,OAAAitB,GAAAjtB,OAAAgtB,GAAAhtB,OAEA,IAAA,IAAAD,EAAA,EAAAA,EAAAqtB,OAAArtB,IAAA,CACA,MAAAstB,WAAAH,QAAAnpB,OAAAhE,GACAutB,WAAAH,QAAAppB,OAAAhE,GACAwtB,MAAAP,GAAAjpB,OAAAhE,GACAytB,MAAAP,GAAAlpB,OAAAhE,GACA,GAAAstB,WAAAC,WACA,OAAA,EAEA,GAAAD,WAAAC,WACA,OAAA,EAEA,GAAAC,MAAAC,MACA,OAAA,EAEA,GAAAD,MAAAC,MACA,OAAA,EAGA,OAAAR,GAAAhtB,SAAAitB,GAAAjtB,OACA,EAEAgtB,GAAAhtB,OAAAitB,GAAAjtB,OACA,GAEA,IAIAR,KAAAmZ,KAAAsJ,KAAAza,OAAAulB,WAAA,SAAAtkB,MACA,OAAA,SAAA+a,EAAAC,GAGA,GAFAD,EAAAhkB,KAAA8B,eAAAkiB,EAAA/a,MACAgb,EAAAjkB,KAAA8B,eAAAmiB,EAAAhb,WACA3I,IAAA0jB,QAAA1jB,IAAA2jB,EACA,OAAAD,IAAAC,EAAA,EAAAD,GAAA,EAAA,EAEA,MAAAwJ,GAAAxJ,EAAA5iB,WACAqsB,GAAAxJ,EAAA7iB,WACAssB,QAAAF,GAAA5qB,cACA+qB,QAAAF,GAAA7qB,cACAgrB,OAAAJ,GAAAhtB,OAAAitB,GAAAjtB,OAAAitB,GAAAjtB,OAAAgtB,GAAAhtB,OACA,IAAA,IAAAD,EAAA,EAAAA,EAAAqtB,OAAArtB,IAAA,CACA,MAAAstB,WAAAH,QAAAnpB,OAAAhE,GACAutB,WAAAH,QAAAppB,OAAAhE,GACAwtB,MAAAP,GAAAjpB,OAAAhE,GACAytB,MAAAP,GAAAlpB,OAAAhE,GACA,GAAAstB,WAAAC,WACA,OAAA,EAEA,GAAAD,WAAAC,WACA,OAAA,EAEA,GAAAC,MAAAC,MACA,OAAA,EAEA,GAAAD,MAAAC,MACA,OAAA,EAGA,OAAAR,GAAAhtB,SAAAitB,GAAAjtB,OACA,EAEAgtB,GAAAhtB,OAAAitB,GAAAjtB,QACA,EAEA,IAtLA,GA2LA,WACA,aAcAR,KAAAC,UAAA,qBAMAD,KAAAmZ,KAAA8U,cACAC,MAAA,sBACAC,MAAA,uBAwBAnuB,KAAAmZ,KAAAiV,QAAAC,UAAA,SAAAlmB,SAEA,MAAAtB,qBACA,iBADAA,gBAEA,eAFAA,sBAGA,MAHAA,sBAKAynB,6BAAA,2GACAC,uBAAA,iFACAC,wBAAA,uFAIA,QAAAluB,IAAA6H,QAAAsmB,gBAAAnuB,IAAA6H,QAAAsmB,UAAA3F,cAAA,IAAA3gB,QAAAsmB,UAAA3F,cACA,MAAAjiB,qBAAA,6BAGA,QAAAvG,IAAA6H,QAAAnD,MAAAmD,QAAAnD,gBAAA0pB,UAAA,EACA,MAAA7nB,qBAAA,uBAGA,QAAAvG,IAAA6H,QAAAwmB,QAAA,IArCA,SAAAA,OACA,IAAA,IAAAhT,OAAA3b,KAAAmZ,KAAA8U,aACA,GAAAjuB,KAAAmZ,KAAA8U,aAAAtS,OAAAgT,MACA,OAAA,EAGA,OAAA,EA+BAC,CAAAzmB,QAAAwmB,OACA,MAAA9nB,qBAAA,wBAGAvD,KAAAkJ,QAEAiiB,eAAAnuB,EAEA0E,UAAA1E,EACAquB,MAAA3uB,KAAAmZ,KAAA8U,aAAAC,MACAW,SAAA,IACAC,SAAA,IACAtX,UAAA,MACAuX,SAAA,IAEA/uB,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SAKA,MAAAkF,KAAA/J,KAEAmrB,UAAAphB,KAAAb,OAAAiiB,UACAzpB,KAAAqI,KAAAb,OAAAxH,KAEAypB,UAAAhrB,YAAAH,MAGA0B,KAAAunB,UAAAC,IAAA3lB,sBACA7B,KAAAunB,UAAAC,IAAAnf,KAAAb,OAAAmiB,OAEA,MAYAK,eAAA,SAAAC,KAAAC,WAEA,MAAAC,SAAAvpB,SAAAwpB,eAAAH,MACAI,SAAAzpB,SAAA0pB,cAAA,KACAD,SAAAE,aAAA,OAAA1oB,iBACAwoB,SAAAG,YAAAL,UACAM,iBAAAJ,SAAAH,UAAA,GAEA,IAAAA,UACAlqB,KAAAwqB,YAAAH,UAGArqB,KAAAwqB,YAAAL,UAGAnqB,KAAAwqB,YAAA5pB,SAAAwpB,eAAA,OAGAM,eAAA,SAAAT,KAAAC,WACAlqB,KAAAwqB,YAAA5pB,SAAAwpB,eAAA,MACA,MAAAD,SAAAvpB,SAAAwpB,eAAAH,MACAI,SAAAzpB,SAAA0pB,cAAA,KACAD,SAAAE,aAAA,OAAA1oB,iBACAwoB,SAAAG,YAAAL,UACAM,iBAAAJ,SAAAH,UAAA,GAEAA,YAAAT,UAAAlG,gBACAvjB,KAAAwqB,YAAAH,UAGArqB,KAAAwqB,YAAAL,WAIAQ,gBAAA,SAAAZ,SAAAJ,OACA,MAAA/G,SAAA6G,UAAApG,cACAuH,aAAAnB,UAAApO,kBACAwP,WAAApB,UAAAlG,gBACAuH,iBAAArB,UAAAvG,sBACA6H,SAAAC,YAAAF,iBAAAf,SAAAc,YAGA,IAAA,IAAAtvB,EAAA,EAAAA,EAAAwvB,SAAA,EAAAxvB,IAAA,CAEA,MAAA0vB,UAAAC,aAAA3vB,EAAAouB,MAAA/G,SAAAiI,WAAAD,cACArvB,IAAAuvB,iBACAK,kBAAA5vB,EAAA0vB,WAIAG,kBAAAH,WAGA1vB,EAAAwvB,UACAM,oBAMAF,kBAAA,SAAA5vB,EAAA+vB,UACA,MAAAnB,SAAAvpB,SAAAwpB,eAAAkB,UACAjB,SAAAzpB,SAAA0pB,cAAA,KACAD,SAAAG,YAAAL,UACAE,SAAAE,aAAA,OAAA1oB,iBACA4oB,iBAAAJ,SAAA9uB,GACAyE,KAAAwqB,YAAAH,WAGAe,kBAAA,SAAAH,WACA,MAAAd,SAAAvpB,SAAAwpB,eAAAa,WACAM,WAAA3qB,SAAA0pB,cAAA,UACAiB,WAAAf,YAAAL,UACAnqB,KAAAwqB,YAAAe,aAGAF,gBAAA,WACA,MAAAG,cAAA5qB,SAAAwpB,eAAA/hB,KAAAb,OAAAgL,WACAxS,KAAAwqB,YAAAgB,gBAGAf,iBAAA,SAAAJ,SAAA3G,YACA2G,SAAAjqB,iBAAA,QAAA,SAAAC,OACAA,MAAAyN,iBACA2b,UAAAhG,SAAAC,eAIAsH,YAAA,SAAAF,iBAAAf,SAAAc,YACA,IAAAY,WAAAnb,SAAAwa,iBAAAxa,SAAAyZ,SAAA,IAEA0B,WAAA,IACAA,WAAA,GAEA,MAAAC,QAAAD,WAAA1B,SAAA,EACA,IAAAgB,SAAAF,WAIA,OAHAa,QAAAb,aACAE,SAAAW,SAEAX,UAGAG,aAAA,SAAA3vB,EAAAouB,MAAA/G,SAAAiI,WAAAD,cACA,IAAAK,UAAA,GAOA,GALAtB,QAAA3uB,KAAAmZ,KAAA8U,aAAAE,QACA8B,UAAA1vB,GAIAouB,QAAA3uB,KAAAmZ,KAAA8U,aAAAC,MAAA,CACA,IAAAyC,UAAA,GACAC,QAAA,GAeAX,WAbAU,UADA,IAAApwB,EACAqnB,UAAArnB,EAAA,GAAA,EAIA,GASAsG,uBANA+pB,QADArwB,EAAAsvB,WACAc,UAAA/I,SAAA,EAIAgI,cAKA,OAAAK,WAQA3sB,KAAAohB,qBAAA,SAAAvL,OAtJA,WAEAnU,KAAA2mB,UAAA,GACA,MAAAmE,iBAAArB,UAAAvG,sBAEAuG,UAAAlG,gBAAA,IACAyG,eAAA3hB,KAAAb,OAAAsiB,SAAAgB,kBACAH,gBAAAtiB,KAAAb,OAAAuiB,SAAA1hB,KAAAb,OAAAmiB,OACAe,eAAAriB,KAAAb,OAAAqiB,SAAAiB,mBA+IA5E,KA1PA,GAgQA,WACA,aAEAlrB,KAAAC,UAAA,qBAmBAD,KAAAmZ,KAAAiV,QAAAyC,SAAA,SAAA1oB,SAEA7E,KAAAuD,OACA7D,gBACA8tB,0BAAA,4DACAC,sBAAA,0DAIAztB,KAAAkJ,QAEAyV,aAAA3hB,EACA0wB,UAAA,GACAviB,SAAAnO,GAEAN,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SAGA,MAAAkF,KAAA/J,KAEA,QAAAhD,IAAAgD,KAAAkJ,OAAAyV,QACA,MAAA3e,KAAAuD,MAAA7D,eAAA,0BAEA,QAAA1C,IAAAgD,KAAAkJ,OAAAiC,IACA,MAAAnL,KAAAuD,MAAA7D,eAAA,sBAGA,IAAAiuB,WAAA,EACA3tB,KAAAkJ,OAAAyV,QAAAxe,YAAAH,MAEAA,KAAA4tB,YAAA,WACA,IAAAC,WAAA7tB,KAAAkJ,OAAAyV,QAAA8D,aAKA,MAHA,KAAAziB,KAAAkJ,OAAAwkB,YACAG,WAAAnxB,KAAA8B,eAAAqvB,WAAA7tB,KAAAkJ,OAAAwkB,YAEAhxB,KAAAgI,OAAA4C,SAAAtH,KAAAkJ,OAAAiC,IAAA0iB,aAMA7tB,KAAA8tB,QAAA,aAMA9tB,KAAA+tB,OAAA,aAGA/tB,KAAAguB,MAAA,WACA,MAAA1L,OAAAtiB,KAAA4tB,cACAtL,SAAAtiB,KAAAkJ,OAAAiC,KACAnL,KAAAkJ,OAAAyV,QAAA0D,OAAAC,QACAtiB,KAAAkJ,OAAAyV,QAAAoD,YAGA/hB,KAAA8tB,WAIA9tB,KAAA2tB,UAAA,WACA,OAAAA,WAGA3tB,KAAAiuB,YAAA,WACAjuB,KAAAkJ,OAAAyV,QAAA1B,aAAAvgB,KAAAmZ,KAAAwB,MAAAE,OACAoW,WAAA,EACA3tB,KAAA+tB,WAGAJ,WAAA,EACA3tB,KAAA8tB,YAOA9tB,KAAAshB,sBAAA,SAAAzL,MACA9L,KAAAkkB,eAIAjuB,KAAAiuB,eAoBAvxB,KAAAmZ,KAAAiV,QAAAoD,eAAA,SAAArpB,SACA7E,KAAAkJ,QAEAyV,aAAA3hB,EACA0wB,UAAA,GACAviB,SAAAnO,EAEAmxB,YAAAnxB,EACAoxB,cAAA,YAEA1xB,KAAAmC,MAAAmB,KAAAkJ,OAAArE,SACAnI,KAAAW,OAAAX,KAAAmZ,KAAAiV,QAAAyC,SAAAvtB,MAAAA,KAAAkJ,SAGA,MAAAa,KAAA/J,KAOA,GAJA+J,KAAAxG,MAAA8qB,uBACAC,eAAA,oEAGA,OAAAvkB,KAAAb,OAAAilB,OACA,MAAAnuB,KAAAuD,MAAA8qB,sBAAA,eAGAruB,KAAAuuB,aAAA,WAEAxkB,KAAAb,OAAAilB,OAAArsB,iBAAA,QAAA,SAAAC,OACAA,MAAAyN,kBACA,IAAAzF,KAAA4jB,aACA5jB,KAAAikB,UAEA,IAIAhuB,KAAA8tB,QAAA,WACA/jB,KAAAb,OAAAilB,OAAAlF,UAAAC,IAAAlpB,KAAAkJ,OAAAklB,gBAGApuB,KAAA+tB,OAAA,WACAhkB,KAAAb,OAAAilB,OAAAlF,UAAA9gB,OAAAnI,KAAAkJ,OAAAklB,gBAIApuB,KAAAuuB,gBA5KA","file":"luga.min.js","sourcesContent":["/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\twindow.luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {String} ns                   Namespace as dot-delimited string\r\n\t * @param {Object} [rootObject=window]  Optional root object. Default to window\r\n\t * @return {Object}\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tconst parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(let i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.7\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {Array}    [args]    An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tconst constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {String} path            Fully qualified name of a function\r\n\t * @return {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tconst reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.type(reference) === \"function\"){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tlet parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tconst part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {Object} target     An object that will receive the new properties\r\n\t * @param {Object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(let x in source){\r\n\t\t\tif(source.hasOwnProperty(x) === true){\r\n\t\t\t\ttarget[x] = source[x];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tconst parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tlet part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @return {String}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tconst rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tconst stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.eventObserverMap\r\n\t *\r\n\t * @property {Object} observer\r\n\t * @property {String} methodName\r\n\t */\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_GENERIC_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_EVENT_OBSERVER_PARAMETER: \"addObserver(): eventName and methodName must be strings\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Object>}\r\n\t\t */\r\n\t\tthis.observers = [];\r\n\r\n\t\t/**\r\n\t\t * @type {Object.<String, Array.<luga.eventObserverMap>>}\r\n\t\t */\r\n\t\tthis.eventObservers = {};\r\n\r\n\t\tconst prefix = \"on\";\r\n\t\tconst suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tconst generateGenericMethodName = function(eventName){\r\n\t\t\tlet str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Register an observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given object will be registered as \"generic\" observer\r\n\t\t * \"Generic\" observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t *\r\n\t\t * If you pass three arguments, the first is the object that will be registered as \"event\" observer\r\n\t\t * The second argument is the event name\r\n\t\t * The third argument is the method of the object that will be invoked once the given event is triggered\r\n\t\t *\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer[methodName] = function(data){};\r\n\t\t *\r\n\t\t * @param  {Object} observer  Observer object\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer, eventName, methodName){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_GENERIC_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tthis.observers.push(observer);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(luga.type(eventName) !== \"string\" || luga.type(methodName) !== \"string\"){\r\n\t\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_EVENT_OBSERVER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tconst eventMap = {\r\n\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t};\r\n\t\t\t\t// First entry for the given event\r\n\t\t\t\tif(this.eventObservers[eventName] === undefined){\r\n\t\t\t\t\tthis.eventObservers[eventName] = [eventMap];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(findObserverIndex(this.eventObservers[eventName], eventMap) === -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].push(eventMap);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {Array.<luga.eventObserverMap>} eventArray\r\n\t\t * @param {luga.eventObserverMap} eventMap\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tconst findObserverIndex = function(eventArray, eventMap){\r\n\t\t\tfor(let i = 0; i < eventArray.length; i++){\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tconst currentMap = eventArray[i];\r\n\t\t\t\tif(currentMap.observer === eventMap.observer && currentMap.methodName === eventMap.methodName){\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all relevant observers\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {String}  eventName  Name of the event\r\n\t\t * @param {Object}  payload    Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, payload){\r\n\t\t\tif(luga.type(payload) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\t// \"Generic\" observers\r\n\t\t\tconst genericMethod = generateGenericMethodName(eventName);\r\n\t\t\tthis.observers.forEach(function(element){\r\n\t\t\t\tif((element[genericMethod] !== undefined) && (luga.type(element[genericMethod]) === \"function\")){\r\n\t\t\t\t\telement[genericMethod](payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// \"Event\" observers\r\n\t\t\tconst eventObservers = this.eventObservers[eventName];\r\n\t\t\tif(eventObservers !== undefined){\r\n\t\t\t\teventObservers.forEach(function(element){\r\n\t\t\t\t\tif(luga.type(element.observer[element.methodName]) === \"function\"){\r\n\t\t\t\t\t\telement.observer[element.methodName](payload);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given observer will be removed as \"generic\" observer\r\n\t\t *\r\n\t\t * If you pass three arguments, the given observer will be removed as \"event\" observer associated with the given event and method\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer, eventName, methodName){\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tfor(let i = 0; i < this.observers.length; i++){\r\n\t\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(this.eventObservers[eventName] !== undefined){\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t\t */\r\n\t\t\t\t\tconst eventMap = {\r\n\t\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst index = findObserverIndex(this.eventObservers[eventName], eventMap);\r\n\t\t\t\t\t// We have a matching entry\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(index !== -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].splice(index, 1);\r\n\t\t\t\t\t\t// Delete empty entries\r\n\t\t\t\t\t\tif(this.eventObservers[eventName].length === 0){\r\n\t\t\t\t\t\t\tdelete this.eventObservers[eventName];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom\");\r\n\r\n\t/**\r\n\t * Attach a single event listener, to a parent element, that will fire for all descendants matching a selector\r\n\t * No matter whether those descendants exist now or are added in the future\r\n\t * @param {HTMLElement} node\r\n\t * @param {String} eventType\r\n\t * @param {String} selector\r\n\t * @param {Function} callback\r\n\t */\r\n\tluga.dom.delegateEvent = function(node, eventType, selector, callback){\r\n\t\tnode.addEventListener(eventType, function(/** @type {Event} */ event){\r\n\t\t\t/** @type {Element} */\r\n\t\t\tconst currentElement = event.target;\r\n\t\t\tif(luga.dom.nodeMatches(currentElement, selector) === true){\r\n\t\t\t\tcallback(event, currentElement);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Equalize element.matches across browsers\r\n\t * @param {HTMLElement} node\r\n\t * @param {String} selector\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.dom.nodeMatches = function(node, selector){\r\n\t\tlet methodName = \"matches\";\r\n\t\t// Deal with IE11 without polyfills\r\n\t\t/* istanbul ignore next IE-only */\r\n\t\tif(node.matches === undefined && node.msMatchesSelector !== undefined){\r\n\t\t\tmethodName = \"msMatchesSelector\";\r\n\t\t}\r\n\t\treturn node[methodName](selector);\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke a function as soon as the DOM is loaded\r\n\t * @param {Function} fn\r\n\t */\r\n\tluga.dom.ready = function(fn){\r\n\t\tdocument.addEventListener(\"DOMContentLoaded\", fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser either DOM NodeIterator or TreeWalker\r\n\t *\r\n\t * @param {String}                   type        Either \"NodeIterator\" or \"TreeWalker\"\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                               The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator|TreeWalker}\r\n\t */\r\n\tconst getIteratorInstance = function(type, rootNode, filterFunc){\r\n\r\n\t\tconst filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tconst safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\tif(type === \"TreeWalker\"){\r\n\t\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn document.createNodeIterator(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.nodeIterator\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM NodeIterator\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                               The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator}\r\n\t */\r\n\tluga.dom.nodeIterator.getInstance = function(rootNode, filterFunc){\r\n\t\treturn getIteratorInstance(\"NodeIterator\", rootNode, filterFunc);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\t\treturn getIteratorInstance(\"TreeWalker\", rootNode, filterFunc);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {HTMLElement} rootNode     DOM node wrapping the form fields. Required\r\n\t * @param {Boolean}     demoronize   If true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {Object}                  A JavaScript object containing name/value pairs\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\t\tif(rootNode === null){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\t\tconst map = {};\r\n\t\tconst fields = luga.form.utils.getChildFields(rootNode);\r\n\r\n\t\tfor(let i = 0; i < fields.length; i++){\r\n\t\t\tconst element = fields[i];\r\n\t\t\tif(luga.form.utils.isSuccessfulField(element) === true){\r\n\t\t\t\tconst fieldName = element.getAttribute(\"name\");\r\n\t\t\t\tlet fieldValue = null;\r\n\t\t\t\tconst fieldType = element.type;\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = getMultiSelectValue(element);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(element.checked === true){\r\n\t\t\t\t\t\t\tfieldValue = element.value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = element.value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(Array.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} node\r\n\t * @return {Array.<String>}\r\n\t */\r\n\tconst getMultiSelectValue = function(node){\r\n\t\tconst fieldValue = [];\r\n\t\tconst options = node.querySelectorAll(\"option:checked\");\r\n\t\tfor(let i = 0; i < options.length; i++){\r\n\t\t\tfieldValue.push(options[i].value);\r\n\t\t}\r\n\t\treturn fieldValue;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form node or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {HTMLElement} rootNode  DOM node wrapping the form fields\r\n\t * @return {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tconst flatData = luga.form.toMap(rootNode);\r\n\t\tconst jsonData = {};\r\n\t\tfor(let x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {HTMLElement} rootNode    DOM node wrapping the form fields. Required\r\n\t * @param {Boolean}     demoronize  If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {String}                 A URI encoded string\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\t\tif(rootNode === null){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\t\tlet str = \"\";\r\n\t\tconst fields = luga.form.utils.getChildFields(rootNode);\r\n\r\n\t\tfor(let i = 0; i < fields.length; i++){\r\n\t\t\tconst element = fields[i];\r\n\t\t\tif(luga.form.utils.isSuccessfulField(element) === true){\r\n\t\t\t\tconst fieldName = element.getAttribute(\"name\");\r\n\t\t\t\tconst fieldType = element.type;\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tconst multiValues = getMultiSelectValue(element);\r\n\t\t\t\t\t\tfor(let j = 0; j < multiValues.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, multiValues[i], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(element.checked === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, element.value, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, element.value, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tconst appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given DOM field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {HTMLElement}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(fieldNode.disabled === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(fieldNode.getAttribute(\"name\") === null){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jQuery}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {String} name         Name of the field. Mandatory\r\n\t * @param {jQuery} [rootNode]   Root node, optional, default to document\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tconst selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {HTMLElement}  rootNode   Root node\r\n\t * @return {Array.<HTMLElement>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tconst fields = [];\r\n\t\tconst nodes = rootNode.querySelectorAll(luga.form.CONST.FIELD_SELECTOR);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tif(luga.form.utils.isInputField(element) === true){\r\n\t\t\t\tfields.push(element);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path.toString());\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @param {String} value   String to be persisted\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tconst json = getRootState(root);\r\n\t\tluga.setProperty(json, path.toString(), value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tconst setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tconst getRootState = function(root){\r\n\t\tconst rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {String} str   String containing MS Word's garbage\r\n\t * @return {String}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String}  str                   String containing placeholders\r\n\t * @param  {Object|Array.<String>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tlet pattern = null;\r\n\t\tif(Array.isArray(args) === true){\r\n\t\t\tfor(let i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(let x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {String} str  The querystring\r\n\t * @return {Object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tconst map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tconst parts = str.split(\"&\");\r\n\r\n\t\tfor(let i = 0; i < parts.length; i++){\r\n\t\t\tconst tokens = parts[i].split(\"=\");\r\n\t\t\tconst fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tlet fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(Array.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tconst propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * const nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String} str   String containing placeholders\r\n\t * @param  {Object} obj   An objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tlet results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tconst property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tconst pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t * @param {HTMLElement} node\r\n\t * @return {String}\r\n\t */\r\n\tconst generateBoxId = function(node){\r\n\t\tlet boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node !== undefined){\r\n\t\t\tif(node.getAttribute(\"id\") === null){\r\n\t\t\t\tboxId += node.getAttribute(\"id\");\r\n\t\t\t}\r\n\t\t\telse if(node.getAttribute(\"name\") !== null){\r\n\t\t\t\tboxId += node.getAttribute(\"name\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tconst boxId = generateBoxId(jQuery(node)[0]);\r\n\t\tconst oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t * @param {String}       html   HTML/Text code to inject\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t * @param {String}       html   HTML/Text code to inject\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jQuery}  node                       Target node\r\n\t * @param {String}  html                       HTML/Text code to inject\r\n\t * @param {String}  [cssClass=\"luga_message\"]  CSS class attached to the box. Default to \"luga_message\"\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tconst boxId = generateBoxId(jQuery(node)[0]);\r\n\t\tconst box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tconst oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XHR */\r\n\r\n\tluga.namespace(\"luga.xhr\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.header\r\n\t *\r\n\t * @property {String}  name       Name of the HTTP header\r\n\t * @property {String}  value      Value to be used\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.options\r\n\t *\r\n\t * @property {String}   method                   HTTP method. Default to GET\r\n\t * @property {Function} success                  Function to be invoked if the request succeeds. It will receive a single argument of type luga.xhr.response\r\n\t * @property {Function} error                    Function to be invoked if the request fails. It will receive a single argument of type luga.xhr.response\r\n\t * @property {Number}   timeout                  The number of milliseconds a request can take before automatically being terminated\r\n\t * @property {Boolean}  async                    Indicate that the request should be handled asynchronously. Default to true\r\n\t * @property {Boolean}  cache                    If set to false, it will force requested pages not to be cached by the browser. Will only work correctly with HEAD and GET requests\r\n\t *                                               It works by appending \"_={timestamp}\" to the GET parameters. Default to true\r\n\t * @property {Array.<luga.xhr.header>} headers   An array of name/value pairs to be used for custom HTTP headers. Default to an empty array\r\n\t * @property {String}   requestedWith            Value to be used for the \"X-Requested-With\" request header. Default to \"XMLHttpRequest\"\r\n\t * @property {String}   contentType              MIME type to use instead of the one specified by the server. Default to \"text/plain\"\r\n\t *                                               See also: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.response\r\n\t *\r\n\t * @property {Number}       status              Status code returned by the HTTP server\r\n\t * @property {String}       statusText          The response string returned by the HTTP server\r\n\t * @property {String|null}  responseText        The response as text, null if the request was unsuccessful\r\n\t * @property {String}       responseType        A string which specifies what type of data the response contains. See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\r\n\t * @property {String|null}  responseXML         The response as text, null if the request was unsuccessful or cannot be parsed as XML or HTML\r\n\t * @property {Array.<luga.xhr.header>} headers  An array of header/value pairs returned by the server\r\n\t */\r\n\r\n\tluga.XHR_CONST = {\r\n\t\tPOST_CONTENT_TYPE: \"application/x-www-form-urlencoded\"\r\n\t};\r\n\r\n\tluga.xhr.Request = function(options){\r\n\t\tconst config = {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\tsuccess: function(res){\r\n\t\t\t\tconsole.debug(res);\r\n\t\t\t},\r\n\t\t\terror: function(res){\r\n\t\t\t\tconsole.debug(res);\r\n\t\t\t},\r\n\t\t\ttimeout: 5000,\r\n\t\t\tasync: true,\r\n\t\t\tcache: true,\r\n\t\t\theaders: [],\r\n\t\t\trequestedWith: \"XMLHttpRequest\",\r\n\t\t\tcontentType: \"text/plain\"\r\n\t\t};\r\n\t\tif(options !== undefined){\r\n\t\t\tluga.merge(config, options);\r\n\t\t}\r\n\t\tif(config.method.toUpperCase() === \"POST\"){\r\n\t\t\tconfig.contentType = luga.XHR_CONST.POST_CONTENT_TYPE;\r\n\t\t}\r\n\r\n\t\tconst self = this;\r\n\t\tself.xhr = new XMLHttpRequest();\r\n\r\n\t\t/**\r\n\t\t * Turn the string containing HTTP headers into an array of objects\r\n\t\t * @param {String} str\r\n\t\t * @return {Array.<luga.xhr.header>}\r\n\t\t */\r\n\t\tconst headersToArray = function(str){\r\n\t\t\tconst headers = str.split(\"\\r\\n\");\r\n\t\t\t// Remove the last element since it's empty\r\n\t\t\theaders.pop();\r\n\t\t\treturn headers.map(function(item){\r\n\t\t\t\tconst tokens = item.split(\":\");\r\n\t\t\t\tconst ret = {\r\n\t\t\t\t\theader: tokens[0]\r\n\t\t\t\t};\r\n\t\t\t\tif(tokens[1] !== undefined){\r\n\t\t\t\t\tret.value = tokens[1].substring(1);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.xhr.response}\r\n\t\t */\r\n\t\tconst assembleResponse = function(){\r\n\t\t\treturn {\r\n\t\t\t\tstatus: self.xhr.status,\r\n\t\t\t\tstatusText: self.xhr.statusText,\r\n\t\t\t\tresponseText: self.xhr.responseText,\r\n\t\t\t\tresponseType: self.xhr.responseType,\r\n\t\t\t\tresponseXML: self.xhr.responseXML,\r\n\t\t\t\theaders: headersToArray(self.xhr.getAllResponseHeaders())\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tconst checkReadyState = function(){\r\n\t\t\tif(self.xhr.readyState === 4){\r\n\t\t\t\tconst httpStatus = self.xhr.status;\r\n\t\t\t\tif((httpStatus >= 200 && httpStatus <= 300) || (httpStatus === 304)){\r\n\t\t\t\t\tconfig.success(assembleResponse());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconfig.error(assembleResponse());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst finalizeRequest = function(url){\r\n\t\t\tself.xhr.onreadystatechange = checkReadyState;\r\n\t\t\tself.xhr.timeout = config.timeout;\r\n\t\t\tself.xhr.setRequestHeader(\"Content-Type\", config.contentType);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(url.substring(0, 4) !== \"http\"){\r\n\t\t\t\t// This may cause issue with CORS so better to avoid on cross-site requests\r\n\t\t\t\tself.xhr.setRequestHeader(\"X-Requested-With\", config.requestedWith);\r\n\t\t\t}\r\n\t\t\tconfig.headers.forEach(function(element){\r\n\t\t\t\tself.xhr.setRequestHeader(element.name, element.value);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst finalizeUrl = function(url, params){\r\n\t\t\tlet suffix = \"\";\r\n\t\t\tif(config.cache === false){\r\n\t\t\t\tsuffix += \"_anti-cache=\" + Date.now() + \"&\";\r\n\t\t\t}\r\n\t\t\tif(params !== null && config.method.toUpperCase() === \"GET\"){\r\n\t\t\t\tsuffix += params;\r\n\t\t\t}\r\n\t\t\tif(suffix !== \"\"){\r\n\t\t\t\tif(url.indexOf(\"?\") !== -1){\r\n\t\t\t\t\turl += \"&\";\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\turl += \"?\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn url + suffix;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Aborts the request if it has already been sent\r\n\t\t */\r\n\t\tthis.abort = function(){\r\n\t\t\tself.xhr.abort();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the request is pending. False otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequestPending = function(){\r\n\t\t\treturn self.xhr.readyState !== 4;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {String} url\r\n\t\t * @param {String} [params] Optional parameter which lets you specify the request's body\r\n\t\t *                          See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send\r\n\t\t */\r\n\t\tthis.send = function(url, params){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(params === undefined){\r\n\t\t\t\tparams = null;\r\n\t\t\t}\r\n\t\t\turl = finalizeUrl(url, params);\r\n\t\t\tself.xhr.open(config.method, url, config.async);\r\n\t\t\tfinalizeRequest(url);\r\n\t\t\tself.xhr.send(params);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tlet errorMsg = \"\";\r\n\t\tlet focusGiven = false;\r\n\t\tfor(let i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet focusGiven = false;\r\n\t\tlet htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(let i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jQuery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {String}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {String}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {Boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tconst self = this;\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tconst formDom = self.config.formNode[0];\r\n\t\t\tfor(let i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {Object} event\r\n\t\t * @return {Array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tconst executedValidators = {};\r\n\t\t\tfor(let i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tconst buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tconst buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tconst callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tconst callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tconst callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery|undefined} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                          Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jQuery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @return {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tconst self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {String} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {String} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {String} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {String} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {String} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {String} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {String} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {String} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {String} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {String} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tconst self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tconst requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tconst functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(let rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {String} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {String} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tconst self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tlet currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tconst field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tconst field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tconst field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tlet requiredFlag = false;\r\n\t\t\tconst fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(let i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tconst field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tconst fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(let i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tconst field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {Number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {Number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tconst field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tlet checkCounter = 0;\r\n\t\t\tconst fieldGroup = this.inputGroup;\r\n\t\t\tfor(let i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tconst field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tconst fieldValue = fieldNode.val();\r\n\t\tconst containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tconst containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tconst secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tconst datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tconst pattern = validator.config.datepattern;\r\n\t\tconst valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tconst maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tconst pattern = validator.config.datepattern;\r\n\t\tconst valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tconst minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tconst regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param {regexp} rex\r\n\t * @param {Number} year\r\n\t * @param {Number} month\r\n\t * @param {Number} day\r\n\t * @param {String} separator\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tconst infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {String}   dateStr\r\n\t * @param {String}   dateSpecKey\r\n\t * @return {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tconst dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tconst dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tconst testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tconst yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tconst monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tconst dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])/([0-3][0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])/([0-3]?[0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])/([0-1][0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])/([0-1]?[0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the given DOM node\r\n\t * @param {HTMLElement} [rootNode]  Optional, default to document.body\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.body;\r\n\t\t}\r\n\t\tconst nodes = rootNode.querySelectorAll(luga.validator.CONST.FORM_SELECTOR);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tif(element.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\telement.addEventListener(\"submit\", function(event){\r\n\t\t\t\t\tconst formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: element\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t}, false);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jQuery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tconst formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options} options\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tconst dirtyValidators = [];\r\n\t\tconst fieldValidator = luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tconst callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tconst validators = [];\r\n\t\tconst executedValidators = {};\r\n\t\tconst dirtyValidators = [];\r\n\r\n\t\tfor(let i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(let j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tconst callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jQuery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tconst fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/*! \nLuga Data 0.9.7 2018-04-05T21:50:13.395Z\nhttp://www.lugajs.org\nCopyright 2013-2018 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tconst retRows = [];\r\n\t\tfor(let i = 0; i < rows.length; i++){\r\n\t\t\tconst filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.type(formatter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(let i = 0; i < rows.length; i++){\r\n\t\t\tconst formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(let key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\n/* global ActiveXObject */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.xml\");\r\n\r\n\tluga.data.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.data.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.data.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.6.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @return {Array<Node>}\r\n\t */\r\n\tluga.data.xml.evaluateXPath = function(node, path){\r\n\t\tconst retArray = [];\r\n\t\t/* istanbul ignore else IE-only */\r\n\t\tif(window.XPathEvaluator !== undefined){\r\n\t\t\tconst evaluator = new XPathEvaluator();\r\n\t\t\tconst result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tlet currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(window.ActiveXObject !== undefined){\r\n\t\t\tconst selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(let i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retArray;\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @return {Object}\r\n\t */\r\n\tluga.data.xml.nodeToHash = function(node){\r\n\t\tconst obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i = 0; i < node.attributes.length; i++){\r\n\t\t\tconst attr = node.attributes[i];\r\n\t\t\tobj[luga.data.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(let i = 0; i < node.childNodes.length; i++){\r\n\t\t\tconst child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tlet isArray = false;\r\n\t\t\t\tconst tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tconst curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconst childObj = luga.data.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @return {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tconst child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tconst child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @return {String}\r\n\t */\r\n\tluga.data.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\t// IE11 supports XMLSerializer but fails on serializeToString()\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.data.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @return {Document}\r\n\t */\r\n\tluga.data.xml.parseFromString = function(xmlStr){\r\n\t\tlet xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\t// IE11 supports DOMParser but fails on parseFromString()\r\n\t\t\tconst xmlDOMObj = new ActiveXObject(luga.data.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.setProperty(\"SelectionLanguage\", \"XPath\");\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tconst domDoc = xmlParser.parseFromString(xmlStr, luga.data.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<String>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<String>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.type(options.formatter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.type(options.filter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tconst deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tconst applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tconst hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tconst selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tconst orig = this.records;\r\n\t\t\t\tfor(let i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tconst rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tconst row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tconst targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tlet fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tlet recordsHolder = [];\r\n\t\t\tif(Array.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(let i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tconst recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tconst targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<String>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(let i = 0; i < columnNames.length; i++){\r\n\t\t\t\tconst colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tconst fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tconst oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tconst sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tconst sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tconst sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tlet sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(let i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tconst columnToSortName = sortColumns[i];\r\n\t\t\t\tconst columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tconst sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tconst buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tlet ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tconst assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tconst defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tconst filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.DetailSet: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = [];\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.contentType = \"text/plain\";\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tconst loadUrl = function(){\r\n\t\t\tconst xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response);\r\n\t\t\t\t},\r\n\t\t\t\tcontentType: self.contentType,\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tself.xhrRequest = new luga.xhr.Request(xhrOptions);\r\n\t\t\tself.xhrRequest.send(self.url);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(response){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, response.status]),\r\n\t\t\t\tresponse: response\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tconst self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tloadFromJson(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tloadFromJson(JSON.parse(response.responseText));\r\n\t\t};\r\n\r\n\t\tconst loadFromJson = function(json){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tconst self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords({\r\n\t\t\t\tresponseText: xmlStr\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tconst xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tconst nodes = luga.data.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tconst records = [];\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.data.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given an <item> node, extract its content inside a JavaScript object\r\n\t\t * @param {Node} item\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tconst itemToHash = function(item){\r\n\t\t\tconst rec = {};\r\n\t\t\tfor(let i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\tconst element = self.itemElements[i];\r\n\t\t\t\tconst nodes = luga.data.xml.evaluateXPath(item, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\trec[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {Node} channel\r\n\t\t */\r\n\t\tconst setChannelMeta = function(channel){\r\n\t\t\tfor(let i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tconst element = self.channelElements[i];\r\n\t\t\t\tconst nodes = luga.data.xml.evaluateXPath(channel, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\tself.channelMeta[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Turn an array of <items> nodes into an array of records\r\n\t\t * @param {Array.<Node>} nodes\r\n\t\t * @return {Array.<Object>}\r\n\t\t */\r\n\t\tconst extractRecords = function(nodes){\r\n\t\t\tconst records = [];\r\n\t\t\tnodes.forEach(function(element){\r\n\t\t\t\trecords.push(itemToHash(element));\r\n\t\t\t});\r\n\t\t\treturn records;\r\n\t\t};\r\n\r\n\t\t/* Utilities */\r\n\r\n\t\t/**\r\n\t\t * Extract text out of a TEXT or CDATA node\r\n\t\t * @param {Node} node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfunction getTextValue(node){\r\n\t\t\tconst child = node.childNodes[0];\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\t\treturn child.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tconst xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\t// Extract metadata\r\n\t\t\tconst channelNodes = luga.data.xml.evaluateXPath(xmlDoc, \"//channel\");\r\n\t\t\tsetChannelMeta(channelNodes[0]);\r\n\t\t\t// Insert all records\r\n\t\t\tconst items = luga.data.xml.evaluateXPath(xmlDoc, \"//item\");\r\n\t\t\tconst records = extractRecords(items);\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tconst bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tconst bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.context\r\n\t *\r\n\t * @extend luga.data.DataSet.context\r\n\t * @property {Number} currentPageNumber        The current page index. Starting at 1\r\n\t * @property {Number} currentPageRecordCount   The total number of records in the current page\r\n\t * @property {Number} pageCount                The total number of pages required to display all of the data\r\n\t * @property {Number} pageSize                 The maximum number of items that can be in a page\r\n\t * @property {Number} currentOffsetStart       Zero-based offset of the first record inside the current page\r\n\t * @property {Number} currentOffsetEnd         Zero-based offset of the last record inside the current page\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Instance of a dataSet. Required\r\n\t * @property {Number}            pageSize       The max number of rows in a given page. Default to 10\r\n\t */\r\n\r\n\t/*\r\n\t *  PagedView class\r\n\t *  Works by reading a dataSet and extracting information out of it in order to generate additional information that can be used for paging\r\n\t *\r\n\t * @param {luga.data.PagedView.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t */\r\n\tluga.data.PagedView = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.PagedView: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.PagedView: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.PagedView} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\tlet pageSize = 10;\r\n\t\tif(options.pageSize !== undefined){\r\n\t\t\tpageSize = options.pageSize;\r\n\t\t}\r\n\r\n\t\tlet currentPage = 1;\r\n\t\tlet currentOffsetStart = 0;\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.PagedView.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = self.parentDataSet.getContext();\r\n\t\t\tcontext.entities = context.entities.slice(self.getCurrentOffsetStart(), self.getCurrentOffsetEnd() + 1);\r\n\t\t\t// Additional fields\r\n\t\t\tcontext.currentPageNumber = self.getCurrentPageIndex();\r\n\t\t\tcontext.currentPageRecordCount = context.entities.length;\r\n\t\t\tcontext.currentOffsetEnd = self.getCurrentOffsetEnd();\r\n\t\t\tcontext.currentOffsetStart = self.getCurrentOffsetStart();\r\n\t\t\tcontext.pageSize = self.getPageSize();\r\n\t\t\tcontext.pageCount = self.getPagesCount();\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the last record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetEnd = function(){\r\n\t\t\tlet offSet = self.getCurrentOffsetStart() + self.getPageSize() - 1;\r\n\t\t\tif(offSet > self.getRecordsCount()){\r\n\t\t\t\toffSet = self.getRecordsCount();\r\n\t\t\t}\r\n\t\t\treturn offSet;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the first record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetStart = function(){\r\n\t\t\treturn currentOffsetStart;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the current page index. Starting at 1\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentPageIndex = function(){\r\n\t\t\treturn currentPage;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the total number of pages required to display all of the data\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPagesCount = function(){\r\n\t\t\treturn parseInt((self.parentDataSet.getRecordsCount() + self.getPageSize() - 1) / self.getPageSize());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the maximum number of items that can be in a page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPageSize = function(){\r\n\t\t\treturn pageSize;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the given page number\r\n\t\t * Fails silently if the given page number is out of range\r\n\t\t * It also change the index of the current row to match the first record in the page\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.goToPage = function(pageNumber){\r\n\t\t\tif(self.isPageInRange(pageNumber) === false){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(pageNumber === self.getCurrentPageIndex()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPage = pageNumber;\r\n\t\t\tcurrentOffsetStart = ((pageNumber - 1) * self.getPageSize());\r\n\r\n\t\t\tself.setCurrentRowIndex(self.getCurrentOffsetStart());\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the next page\r\n\t\t * Fails silently if the current page is the last one\r\n\t\t */\r\n\t\tthis.goToNextPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() + 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the previous page\r\n\t\t * Fails silently if the current page is the first one\r\n\t\t */\r\n\t\tthis.goToPrevPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() - 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given page is within range. False otherwise\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPageInRange = function(pageNumber){\r\n\t\t\tif(pageNumber < 1 || pageNumber > self.getPagesCount()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * To be used for type checking\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPagedView = function(){\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/* Proxy methods */\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\treturn self.parentDataSet.getCurrentRowIndex();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn self.parentDataSet.getRecordsCount();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet .loadData() method, if any\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(self.parentDataSet.loadData !== undefined){\r\n\t\t\t\tself.parentDataSet.loadData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\tself.parentDataSet.setCurrentRowId(rowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tself.parentDataSet.setCurrentRowIndex(index);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tself.parentDataSet.setState(newState);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * Be aware this only sort the data, it does not affects pagination\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\tself.parentDataSet.sort(columnNames, sortOrder);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on luga.dom.ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tconst config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {HTMLElement} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE];\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, initialize the relevant Region handler\r\n\t * @param {HTMLElement} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tconst dataSourceId = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === null){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tconst dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tlet regionType = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === null){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tconst RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {HTMLElement|undefined} [rootNode]   Optional, default to <body>\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.querySelector(\"body\");\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(rootNode !== null){\r\n\t\t\tconst nodes = rootNode.querySelectorAll(luga.data.region.CONST.SELECTORS.REGION);\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\tluga.data.region.init(nodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {HTMLElement}                                node   A DOM node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {HTMLElement } node                          The DOM node that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<String>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.node === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tconst attrTraits = this.config.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== null){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE] = this;\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tconst traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(let i = 0; i < this.traits.length; i++){\r\n\t\t\t\tconst func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tconst desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tconst self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {HTMLElement} node\r\n\t\t */\r\n\t\tconst fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.innerHTML);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst templateNode = document.getElementById(self.config.templateId);\r\n\t\t\t\tif(templateNode === null){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tconst templateSrc = templateNode.getAttribute(\"src\");\r\n\t\t\t\tif(templateSrc === null){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.innerHTML);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tconst xhrOptions = {\r\n\t\t\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response.responseText);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(response){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst xhr = new luga.xhr.Request(xhrOptions);\r\n\t\t\t\t\txhr.send(templateSrc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.innerHTML = this.generateHtml();\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tconst desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {HTMLElement}                            node          A DOM node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tconst CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\tconst removeCssClass = function(nodes, className){\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tnodes[i].classList.remove(className);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SELECT);\r\n\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t// It's a detailSet, abort\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(nodes.length > 0){\r\n\t\t\tconst cssClass = nodes[0].getAttribute(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\tnodes[0].classList.remove(cssClass);\r\n\t\t\t// Default to first row\r\n\t\t\tlet index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tnodes[index].classList.add(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event to all nodes\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\tconst element = nodes[i];\r\n\t\t\t\taddSelectEvent(element, cssClass, nodes);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tconst addSelectEvent = function(element, cssClass, nodes){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\telement.classList.add(cssClass);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_ID);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tconst rowId = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\taddRowIdEvent(element, rowId, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tconst addRowIdEvent = function(element, rowId, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowId(rowId);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_INDEX);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tconst rowIndex = parseInt(element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\taddRowIndexEvent(element, rowIndex, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tconst addRowIndexEvent = function(element, rowIndex, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowIndex(rowIndex);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\tconst nodes = options.node.querySelectorAll(CONST.SELECTORS.SORT);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tconst sortCol = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t}, false);\r\n\t\t}\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tconst CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(let key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tlet dA = luga.lookupProperty(a, prop);\r\n\t\t\tlet dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tlet dA = luga.lookupProperty(a, prop);\r\n\t\t\tlet dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tconst tA = a.toString();\r\n\t\t\tconst tB = b.toString();\r\n\t\t\tconst tAlower = tA.toLowerCase();\r\n\t\t\tconst tBlower = tB.toLowerCase();\r\n\t\t\tconst minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(let i = 0; i < minLen; i++){\r\n\t\t\t\tconst aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tconst bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tconst aChar = tA.charAt(i);\r\n\t\t\t\tconst bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tconst tA = a.toString();\r\n\t\t\tconst tB = b.toString();\r\n\t\t\tconst tAlower = tA.toLowerCase();\r\n\t\t\tconst tBlower = tB.toLowerCase();\r\n\t\t\tconst minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(let i = 0; i < minLen; i++){\r\n\t\t\t\tconst aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tconst bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tconst aChar = tA.charAt(i);\r\n\t\t\t\tconst bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.PagingBar.options\r\n\t *\r\n\t * @property {luga.data.PagedView}     pagedView  Instance of a pagedView that will be controlled by the widget. Required\r\n\t * @property {Element}                 node       DOM element that will contain the widget. Required\r\n\t * @property {luga.data.PAGING_STYLE}  style      Style to be used for the widget, either \"luga-pagingBarLinks\" or \"luga-pagingBarPages\". Default to \"luga-pagingBarLinks\"\r\n\t * @property {String}                  nextText   Text to be used for \"next\" links. Default to \">\"\r\n\t * @property {String}                  prevText   Text to be used for \"previous\" links. Default to \"<\"\r\n\t * @property {String}                  separator  Text to be used to separate links. Default to \" | \"\r\n\t * @property {Number}                  maxLinks   Maximum number of links to show. Default to 10\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.PAGING_STYLE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.PAGING_STYLE = {\r\n\t\tLINKS: \"luga-pagingBarLinks\",\r\n\t\tPAGES: \"luga-pagingBarPages\"\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed style is supported\r\n\t * @param {String}  style\r\n\t * @return {Boolean}\r\n\t */\r\n\tconst isValidStyle = function(style){\r\n\t\tfor(let key in luga.data.PAGING_STYLE){\r\n\t\t\tif(luga.data.PAGING_STYLE[key] === style){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * PagingBar widget\r\n\t * Given a pagedView, create a fully fledged pagination bar\r\n\t *\r\n\t * @param {luga.data.widgets.PagingBar.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.data.widgets.PagingBar = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tCSS_BASE_CLASS: \"luga-pagingBar\",\r\n\t\t\tSAFE_HREF: \"javascript:;\",\r\n\t\t\tLINKS_SEPARATOR: \" - \",\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_PAGED_VIEW_PARAMETER: \"luga.data.widgets.PagingBar: pagedView parameter is required. Must be an instance of luga.data.PagedView\",\r\n\t\t\t\tINVALID_NODE_PARAMETER: \"luga.data.widgets.PagingBar: node parameter is required. Must be a DOM Element\",\r\n\t\t\t\tINVALID_STYLE_PARAMETER: \"luga.data.widgets.PagingBar: style parameter must be of type luga.data.PAGING_STYLE\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.pagedView === undefined || (options.pagedView.isPagedView === undefined || options.pagedView.isPagedView() === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PAGED_VIEW_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.node === undefined || options.node instanceof Element === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_NODE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.style !== undefined && isValidStyle(options.style) === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_STYLE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.PagedView} */\r\n\t\t\tpagedView: undefined,\r\n\t\t\t/** @type {Element} */\r\n\t\t\tnode: undefined,\r\n\t\t\tstyle: luga.data.PAGING_STYLE.LINKS,\r\n\t\t\tnextText: \">\",\r\n\t\t\tprevText: \"<\",\r\n\t\t\tseparator: \" | \",\r\n\t\t\tmaxLinks: 10\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.data.widgets.PagingBar}\r\n\t\t */\r\n\t\tconst self = this;\r\n\t\t// Alias/shortcuts\r\n\t\tconst pagedView = self.config.pagedView;\r\n\t\tconst node = self.config.node;\r\n\r\n\t\tpagedView.addObserver(this);\r\n\r\n\t\t// Add CSS\r\n\t\tnode.classList.add(CONST.CSS_BASE_CLASS);\r\n\t\tnode.classList.add(self.config.style);\r\n\r\n\t\tconst render = function(){\r\n\t\t\t// Reset UI\r\n\t\t\tnode.innerHTML = \"\";\r\n\t\t\tconst currentPageIndex = pagedView.getCurrentPageIndex();\r\n\r\n\t\t\tif(pagedView.getPagesCount() > 1){\r\n\t\t\t\trenderPrevLink(self.config.prevText, currentPageIndex);\r\n\t\t\t\trenderMainLinks(self.config.maxLinks, self.config.style);\r\n\t\t\t\trenderNextLink(self.config.nextText, currentPageIndex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst renderPrevLink = function(text, pageIndex){\r\n\r\n\t\t\tconst textNode = document.createTextNode(text);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex - 1);\r\n\r\n\t\t\tif(pageIndex !== 1){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t};\r\n\r\n\t\tconst renderNextLink = function(text, pageIndex){\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t\tconst textNode = document.createTextNode(text);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex + 1);\r\n\r\n\t\t\tif(pageIndex !== pagedView.getPagesCount()){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst renderMainLinks = function(maxLinks, style){\r\n\t\t\tconst pageSize = pagedView.getPageSize();\r\n\t\t\tconst recordsCount = pagedView.getRecordsCount();\r\n\t\t\tconst pagesCount = pagedView.getPagesCount();\r\n\t\t\tconst currentPageIndex = pagedView.getCurrentPageIndex();\r\n\t\t\tconst endIndex = getEndIndex(currentPageIndex, maxLinks, pagesCount);\r\n\r\n\t\t\t// Page numbers are between 1 and n. So the loop start from 1\r\n\t\t\tfor(let i = 1; i < (endIndex + 1); i++){\r\n\r\n\t\t\t\tconst labelText = getLabelText(i, style, pageSize, pagesCount, recordsCount);\r\n\t\t\t\tif(i !== currentPageIndex){\r\n\t\t\t\t\trenderCurrentLink(i, labelText);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// No link on current page\r\n\t\t\t\t\trenderCurrentText(labelText);\r\n\t\t\t\t}\r\n\t\t\t\t// No separator on last entry\r\n\t\t\t\tif(i < endIndex){\r\n\t\t\t\t\trenderSeparator();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tconst renderCurrentLink = function(i, linkText){\r\n\t\t\tconst textNode = document.createTextNode(linkText);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, i);\r\n\t\t\tnode.appendChild(linkNode);\r\n\t\t};\r\n\r\n\t\tconst renderCurrentText = function(labelText){\r\n\t\t\tconst textNode = document.createTextNode(labelText);\r\n\t\t\tconst strongNode = document.createElement(\"strong\");\r\n\t\t\tstrongNode.appendChild(textNode);\r\n\t\t\tnode.appendChild(strongNode);\r\n\t\t};\r\n\r\n\t\tconst renderSeparator = function(){\r\n\t\t\tconst separatorNode = document.createTextNode(self.config.separator);\r\n\t\t\tnode.appendChild(separatorNode);\r\n\t\t};\r\n\r\n\t\tconst addGoToPageEvent = function(linkNode, pageNumber){\r\n\t\t\tlinkNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tpagedView.goToPage(pageNumber);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst getEndIndex = function(currentPageIndex, maxLinks, pagesCount){\r\n\t\t\tlet startIndex = parseInt(currentPageIndex - parseInt(maxLinks / 2));\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\t\t\tconst tempPos = startIndex + maxLinks - 1;\r\n\t\t\tlet endIndex = pagesCount;\r\n\t\t\tif(tempPos < pagesCount){\r\n\t\t\t\tendIndex = tempPos;\r\n\t\t\t}\r\n\t\t\treturn endIndex;\r\n\t\t};\r\n\r\n\t\tconst getLabelText = function(i, style, pageSize, pagesCount, recordsCount){\r\n\t\t\tlet labelText = \"\";\r\n\r\n\t\t\tif(style === luga.data.PAGING_STYLE.PAGES){\r\n\t\t\t\tlabelText = i;\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(style === luga.data.PAGING_STYLE.LINKS){\r\n\t\t\t\tlet startText = \"\";\r\n\t\t\t\tlet endText = \"\";\r\n\t\t\t\tif(i !== 1){\r\n\t\t\t\t\tstartText = (pageSize * (i - 1)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// First link\r\n\t\t\t\t\tstartText = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < pagesCount){\r\n\t\t\t\t\tendText = startText + pageSize - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Last link\r\n\t\t\t\t\tendText = recordsCount;\r\n\t\t\t\t}\r\n\t\t\t\tlabelText = startText + CONST.LINKS_SEPARATOR + endText;\r\n\t\t\t}\r\n\r\n\t\t\treturn labelText;\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\trender();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tconst self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tlet isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tlet bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tconst newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {HTMLElement}  button     Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {HTMLElement} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tconst self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\tif(self.config.button === null){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\r\n\t\t\tself.config.button.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tself.config.button.classList.add(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tself.config.button.classList.remove(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}