{"version":3,"sources":["luga.validator.js","luga.common.js","luga.data.js"],"names":["window","luga","namespace","ns","rootObject","parts","split","undefined","i","length","common","version","extend","baseFunc","func","args","apply","isPlainObject","obj","Object","prototype","toString","call","proto","getPrototypeOf","constructor","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","type","object","part","shift","merge","target","source","x","setProperty","value","TO_QUERY_STRING_CONST","ERROR_INPUT","toQueryString","input","str","Array","isArray","forEach","element","appendQueryString","class2type","toLowerCase","rawType","stringType","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_GENERIC_OBSERVER_PARAMETER","INVALID_EVENT_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","eventObservers","addObserver","observer","eventName","methodName","arguments","push","eventMap","findObserverIndex","eventArray","currentMap","notifyObservers","payload","genericMethod","charAt","toUpperCase","substring","generateGenericMethodName","removeObserver","splice","index","dom","delegateEvent","node","eventType","selector","callback","addEventListener","event","currentElement","nodeMatches","matches","msMatchesSelector","ready","fn","document","getIteratorInstance","rootNode","filterFunc","filter","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","acceptNode","createTreeWalker","SHOW_ELEMENT","createNodeIterator","nodeIterator","getInstance","treeWalker","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","getAttribute","fieldValue","getMultiSelectValue","checked","string","options","querySelectorAll","toJson","flatData","jsonData","multiValues","j","encodeURIComponent","fieldNode","isInputField","disabled","getFieldGroup","name","nodes","slice","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","XHR_CONST","POST_CONTENT_TYPE","xhr","Request","config","method","success","res","console","debug","error","timeout","async","cache","headers","requestedWith","contentType","self","XMLHttpRequest","assembleResponse","status","statusText","responseText","responseType","responseXML","pop","item","ret","header","headersToArray","getAllResponseHeaders","checkReadyState","readyState","httpStatus","abort","isRequestPending","send","url","params","suffix","Date","now","indexOf","finalizeUrl","open","onreadystatechange","setRequestHeader","finalizeRequest","isNumeric","isNaN","parseFloat","isFinite","validator","handlers","errorAlert","formNode","validators","errorMsg","focusGiven","message","getFocus","alert","errorBox","removeDisplayBox","htmlStr","displayErrorMessage","FORM_SELECTOR","RULE_PREFIX","DEFAULT_DATE_PATTERN","CUSTOM_ATTRIBUTES","VALIDATE","ERROR","BEFORE","AFTER","BLOCK_SUBMIT","MESSAGE","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","MISSING_FUNCTION","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","HANDLERS","FORM_ERROR","FormValidator","blocksubmit","before","after","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","preventDefault","disableSubmit","buttons","buttonNode","callBack","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","classList","add","setAttribute","flagValid","remove","removeAttribute","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","currentIndex","selectedIndex","parseInt","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","containDot","secondFieldNode","getElementById","dateStrToObj","valueDate","maxDate","minDate","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","initForms","body","CSS_CLASSES","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","oldBox","outerHTML","displayMessage","html","displayBox","cssClass","box","createElement","innerHTML","insertBefore","api","validateForm","formValidator","validateField","fieldValidator","validateFields","validateChildFields","data","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","getTextValue","child","childNodes","nodeType","nodeHasText","nextSibling","xml","MIME_TYPE","ATTRIBUTE_PREFIX","DOM_ACTIVEX_NAME","evaluateXPath","retArray","XPathEvaluator","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","ActiveXObject","selectedNodes","selectNodes","nodeToHash","attributes","attr","attributesToProperties","tagName","nodeName","curValue","childObj","childrenToProperties","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlParser","xmlDOMObj","loadXML","DOMParser","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","delete","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","funcA","funcB","a","b","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","incrementalLoad","xhrRequest","cancelRequest","getUrl","loadData","xhrOptions","response","loadRecords","xhrError","loadUrl","setUrl","newUrl","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","loadFromJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","Rss2Dataset","channelElements","itemElements","channelMeta","extractRecords","rec","itemToHash","items","channel","setChannelMeta","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","PagedView","pageSize","currentPage","currentOffsetStart","getCurrentOffsetStart","getCurrentOffsetEnd","currentPageNumber","getCurrentPageIndex","currentPageRecordCount","currentOffsetEnd","getPageSize","pageCount","getPagesCount","offSet","goToPage","pageNumber","isPageInRange","goToNextPage","goToPrevPage","isPagedView","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","querySelector","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","compile","templateNode","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","removeCssClass","nodeList","className","setRowId","setRowIndex","rowIndex","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","dataType","date","ascending","prop","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","PAGING_STYLE","LINKS","PAGES","widgets","PagingBar","INVALID_PAGED_VIEW_PARAMETER","INVALID_NODE_PARAMETER","INVALID_STYLE_PARAMETER","pagedView","Element","style","isValidStyle","nextText","prevText","maxLinks","renderPrevLink","text","pageIndex","textNode","createTextNode","linkNode","appendChild","addGoToPageEvent","renderNextLink","renderMainLinks","recordsCount","pagesCount","currentPageIndex","endIndex","getEndIndex","labelText","getLabelText","renderCurrentLink","renderCurrentText","renderSeparator","linkText","strongNode","separatorNode","startIndex","tempPos","startText","endText","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents"],"mappings":"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","file":"luga.min.js","sourcesContent":["/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Common\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Helper function\r\n\t * @param {*} input\r\n\t * @returns {Boolean}\r\n\t */\r\n\tconst isNumeric = function(input){\r\n\t\treturn (isNaN(parseFloat(input)) === false) && (isFinite(input) === true);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {HTMLElement}                                 formNode      DOM node\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tlet errorMsg = \"\";\r\n\t\tlet focusGiven = false;\r\n\t\tfor(let i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {HTMLElement}                                 formNode      DOM node\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.validator.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet focusGiven = false;\r\n\t\tlet htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(let i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.validator.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {HTMLElement}  formNode      DOM node. Required\r\n\t * @property {String}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {String}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {String}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {Boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\r\n\t\tif(options.formNode === null){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: options.formNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: options.formNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tconst self = this;\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tconst formDom = self.config.formNode;\r\n\t\t\tfor(let i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {Event} event\r\n\t\t * @return {Array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(self.config.formNode, event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tconst executedValidators = {};\r\n\t\t\tfor(let i = 0; i < self.validators.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(self.config.formNode, event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tconst buttons = self.config.formNode.querySelectorAll(\"input[type=submit]\");\r\n\t\t\tfor(let i = 0; i < buttons.length; i++){\r\n\t\t\t\tconst buttonNode = buttons[i];\r\n\t\t\t\tif(buttonNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== null){\r\n\t\t\t\t\tbuttonNode.value = buttonNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(formNode, event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tconst callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tconst callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(formNode, event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tconst callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {HTMLElement|undefined} formNode    The form DOM object\r\n\t *                                               Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {HTMLElement} fieldNode             The field DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @return {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tconst self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst fieldType = this.config.fieldNode.type;\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(this.config.fieldNode.name, this.config.formNode)\r\n\t\t\t\t});\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(this.config.fieldNode.name, this.config.formNode)\r\n\t\t\t\t});\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {HTMLElement} fieldNode    Field DOM object. Required\r\n\t * @property {String} message           Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass        CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = options.fieldNode;\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.getAttribute(\"name\") !== null){\r\n\t\t\tthis.name = this.node.getAttribute(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.getAttribute(\"id\") !== null){\r\n\t\t\tthis.name = this.node.getAttribute(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tif(this.config.errorclass !== \"\"){\r\n\t\t\t\tthis.node.classList.add(this.config.errorclass);\r\n\t\t\t}\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.setAttribute(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.config.errorclass !== \"\"){\r\n\t\t\t\tthis.node.classList.remove(this.config.errorclass);\r\n\t\t\t}\r\n\t\t\tthis.node.removeAttribute(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.disabled === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {HTMLElement} fieldNode          DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {String} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {String} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {String} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {String} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {String} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {String} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {String} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {String} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {String} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {String} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\tif(options.fieldNode === null){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tconst self = this;\r\n\r\n\t\tself.node = options.fieldNode;\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.value === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tconst requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false || requiredAtt === null){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tconst functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(let rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.getAttribute(luga.validator.CONST.RULE_PREFIX + rule) !== null){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {HTMLElement} fieldNode         DOM object. Required\r\n\t * @property {String|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {String} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {String} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\tif(options.fieldNode === null){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: options.fieldNode.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tconst self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = options.fieldNode;\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== null) && (isNumeric(self.config.invalidindex) === false)){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tlet currentIndex = self.node.selectedIndex;\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.value === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property @property {Array.<HTMLElement>} inputGroup      An array of DOM nodes that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message                                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass                             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\r\n\t\tif(this.config.inputGroup.length > 0 && this.config.inputGroup[0].getAttribute(\"name\") !== null){\r\n\t\t\t// Get the name of the first node\r\n\t\t\tthis.name = this.config.inputGroup[0].getAttribute(\"name\");\r\n\t\t}\r\n\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tconst field = this.inputGroup[i];\r\n\t\t\tif(field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== null){\r\n\t\t\t\tthis.message = field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== null){\r\n\t\t\t\tthis.errorclass = field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tconst field = this.inputGroup[i];\r\n\t\t\t\t\tfield.classList.add(this.errorclass);\r\n\t\t\t\t\tfield.setAttribute(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tconst field = this.inputGroup[i];\r\n\t\t\t\t\tfield.classList.remove(this.errorclass);\r\n\t\t\t\t\tfield.removeAttribute(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {Array.<HTMLElement>} inputGroup      An array of DOM nodes that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message                      Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass                   CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tlet requiredFlag = false;\r\n\t\t\tconst fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(let i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tconst field = fieldGroup[i];\r\n\t\t\t\tif(field.disabled === false){\r\n\t\t\t\t\tif(field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED) !== null){\r\n\t\t\t\t\t\trequiredFlag = field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tconst fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(let i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tconst field = fieldGroup[i];\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.checked === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property @property {Array.<HTMLElement>} inputGroup      An array of DOM nodes that share the same name.  Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {Number} minchecked                             Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {Number} maxchecked                             Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {String} message                                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass                             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(let i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tconst field = this.inputGroup[i];\r\n\t\t\tif(field.disabled === false){\r\n\t\t\t\tif(field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== null){\r\n\t\t\t\t\tthis.minchecked = field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== null){\r\n\t\t\t\t\tthis.maxchecked = field.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tlet checkCounter = 0;\r\n\t\t\tconst fieldGroup = this.inputGroup;\r\n\t\t\tfor(let i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tconst field = this.inputGroup[i];\r\n\t\t\t\tif(field.disabled === false){\r\n\t\t\t\t\tif(field.checked === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tconst fieldValue = fieldNode.value;\r\n\t\tconst containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tconst containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tconst secondFieldNode = document.getElementById(validator.config.equalto);\r\n\t\tif(secondFieldNode === null){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.value === secondFieldNode.value);\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tconst datObj = luga.validator.dateStrToObj(fieldNode.value, validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tconst pattern = validator.config.datepattern;\r\n\t\tconst valueDate = luga.validator.dateStrToObj(fieldNode.value, pattern);\r\n\t\tconst maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tconst pattern = validator.config.datepattern;\r\n\t\tconst valueDate = luga.validator.dateStrToObj(fieldNode.value, pattern);\r\n\t\tconst minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.value.length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.value.length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(isNumeric(fieldNode.value) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.value) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(isNumeric(fieldNode.value) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.value) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tconst regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.value);\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param {regexp} rex\r\n\t * @param {Number} year\r\n\t * @param {Number} month\r\n\t * @param {Number} day\r\n\t * @param {String} separator\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tconst infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {String}   dateStr\r\n\t * @param {String}   dateSpecKey\r\n\t * @return {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tconst dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tconst dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tconst testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tconst yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tconst monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tconst dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])/([0-3][0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])/([0-3]?[0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])/([0-1][0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])/([0-1]?[0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the given DOM node\r\n\t * @param {HTMLElement} [rootNode]  Optional, default to document.body\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.body;\r\n\t\t}\r\n\t\tconst nodes = rootNode.querySelectorAll(luga.validator.CONST.FORM_SELECTOR);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(element.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\telement.addEventListener(\"submit\", function(event){\r\n\t\t\t\t\tconst formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: element\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t}, false);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.utils\");\r\n\r\n\tluga.validator.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t * @param {HTMLElement} node\r\n\t * @return {String}\r\n\t */\r\n\tconst generateBoxId = function(node){\r\n\t\tlet boxId = luga.validator.utils.CONST.MSG_BOX_ID;\r\n\t\t/* istanbul ignore else */\r\n\t\tif(node !== undefined){\r\n\t\t\tif(node.getAttribute(\"id\") === null){\r\n\t\t\t\tboxId += node.getAttribute(\"id\");\r\n\t\t\t}\r\n\t\t\telse if(node.getAttribute(\"name\") !== null){\r\n\t\t\t\tboxId += node.getAttribute(\"name\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t */\r\n\tluga.validator.utils.removeDisplayBox = function(node){\r\n\t\tconst boxId = generateBoxId(node);\r\n\t\tconst oldBox = document.getElementById(boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox !== null){\r\n\t\t\toldBox.outerHTML = \"\";\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t * @param {String}       html   HTML/Text code to inject\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.validator.utils.displayMessage = function(node, html){\r\n\t\treturn luga.validator.utils.displayBox(node, html, luga.validator.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t * @param {String}       html   HTML/Text code to inject\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.validator.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.validator.utils.displayBox(node, html, luga.validator.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.validator.utils.displayMessage and luga.validator.utils.displayErrorMessage behaves\r\n\t * @param {HTMLElement}  node                  Target node\r\n\t * @param {String}  html                       HTML/Text code to inject\r\n\t * @param {String}  [cssClass=\"luga_message\"]  CSS class attached to the box. Default to \"luga_message\"\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.validator.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(node === undefined){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.validator.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tconst boxId = generateBoxId(node);\r\n\t\tconst box = document.createElement(\"div\");\r\n\t\tbox.setAttribute(\"id\", boxId);\r\n\t\tbox.classList.add(cssClass);\r\n\t\tbox.innerHTML = html;\r\n\r\n\t\tconst oldBox = document.getElementById(boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox !== null){\r\n\t\t\t// A bit brutal, but does the job\r\n\t\t\toldBox.outerHTML = box.outerHTML\r\n\t\t}\r\n\t\telse{\r\n\t\t\tnode.insertBefore(box, null);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {HTMLElement} formNode     DOM node. Required\r\n\t * @property {Function}        error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                      Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tconst formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {HTMLElement} fieldNode    DOM node. Required\r\n\t * @property {Function}      error      Function to be invoked to handle/display validation messages.\r\n\t *                                      Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options} options\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tconst dirtyValidators = [];\r\n\t\tconst fieldValidator = luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tconst callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {Nodelist} fields     Nodelist. Required\r\n\t * @property {Function}  error     Function to be invoked to handle/display validation messages.\r\n\t *                                 Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tconst validators = [];\r\n\t\tconst executedValidators = {};\r\n\t\tconst dirtyValidators = [];\r\n\r\n\t\tfor(let i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(let j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tconst callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {HTMLElement} rootNode    DOM node. Required\r\n\t * @property {Function} error          Function to be invoked to handle/display validation messages.\r\n\t *                                     Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tconst fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\twindow.luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {String} ns                   Namespace as dot-delimited string\r\n\t * @param {Object} [rootObject=window]  Optional root object. Default to window\r\n\t * @return {Object}\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tconst parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(let i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.7\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {Function} baseFunc  Parent constructor function. Required\r\n\t * @param {Function} func      Child constructor function. Required\r\n\t * @param {Array}    [args]    An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tconst proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tconst constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\tif(constructor === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {String} path            Fully qualified name of a function\r\n\t * @return {Function|undefined}    The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tconst reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.type(reference) === \"function\"){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tlet parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tconst part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {Object} target     An object that will receive the new properties\r\n\t * @param {Object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(let x in source){\r\n\t\t\tif(source.hasOwnProperty(x) === true){\r\n\t\t\t\ttarget[x] = source[x];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tconst parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tlet part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.TO_QUERY_STRING_CONST = {\r\n\t\tERROR_INPUT: \"luga.toQueryString: Can serialize only plain objects\"\r\n\t};\r\n\r\n\t/**\r\n\t * Create a query string out of a plain object containing name/value pairs\r\n\t * @param {Object} input\r\n\t * @return {String}\r\n\t */\r\n\tluga.toQueryString = function(input){\r\n\t\tif(luga.isPlainObject(input) === false){\r\n\t\t\tthrow(luga.TO_QUERY_STRING_CONST.ERROR_INPUT);\r\n\t\t}\r\n\t\tlet str = \"\";\r\n\t\tfor(let x in input){\r\n\t\t\t// Assume is just an array of simple values\r\n\t\t\tif(Array.isArray(input[x]) === true){\r\n\t\t\t\tinput[x].forEach(function(element){\r\n\t\t\t\t\tstr = appendQueryString(str, x, element);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Assume it is just name/value pair\r\n\t\t\t\tstr = appendQueryString(str, x, input[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tconst class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @return {String}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tconst rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tconst stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.eventObserverMap\r\n\t *\r\n\t * @property {Object} observer\r\n\t * @property {String} methodName\r\n\t */\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_GENERIC_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_EVENT_OBSERVER_PARAMETER: \"addObserver(): eventName and methodName must be strings\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Object>}\r\n\t\t */\r\n\t\tthis.observers = [];\r\n\r\n\t\t/**\r\n\t\t * @type {Object.<String, Array.<luga.eventObserverMap>>}\r\n\t\t */\r\n\t\tthis.eventObservers = {};\r\n\r\n\t\tconst prefix = \"on\";\r\n\t\tconst suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tconst generateGenericMethodName = function(eventName){\r\n\t\t\tlet str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Register an observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given object will be registered as \"generic\" observer\r\n\t\t * \"Generic\" observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t *\r\n\t\t * If you pass three arguments, the first is the object that will be registered as \"event\" observer\r\n\t\t * The second argument is the event name\r\n\t\t * The third argument is the method of the object that will be invoked once the given event is triggered\r\n\t\t *\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer[methodName] = function(data){};\r\n\t\t *\r\n\t\t * @param  {Object} observer  Observer object\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer, eventName, methodName){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_GENERIC_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tthis.observers.push(observer);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(luga.type(eventName) !== \"string\" || luga.type(methodName) !== \"string\"){\r\n\t\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_EVENT_OBSERVER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tconst eventMap = {\r\n\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t};\r\n\t\t\t\t// First entry for the given event\r\n\t\t\t\tif(this.eventObservers[eventName] === undefined){\r\n\t\t\t\t\tthis.eventObservers[eventName] = [eventMap];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(findObserverIndex(this.eventObservers[eventName], eventMap) === -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].push(eventMap);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {Array.<luga.eventObserverMap>} eventArray\r\n\t\t * @param {luga.eventObserverMap} eventMap\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tconst findObserverIndex = function(eventArray, eventMap){\r\n\t\t\tfor(let i = 0; i < eventArray.length; i++){\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tconst currentMap = eventArray[i];\r\n\t\t\t\tif(currentMap.observer === eventMap.observer && currentMap.methodName === eventMap.methodName){\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all relevant observers\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {String}  eventName  Name of the event\r\n\t\t * @param {Object}  payload    Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, payload){\r\n\t\t\tif(luga.type(payload) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\t// \"Generic\" observers\r\n\t\t\tconst genericMethod = generateGenericMethodName(eventName);\r\n\t\t\tthis.observers.forEach(function(element){\r\n\t\t\t\tif((element[genericMethod] !== undefined) && (luga.type(element[genericMethod]) === \"function\")){\r\n\t\t\t\t\telement[genericMethod](payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// \"Event\" observers\r\n\t\t\tconst eventObservers = this.eventObservers[eventName];\r\n\t\t\tif(eventObservers !== undefined){\r\n\t\t\t\teventObservers.forEach(function(element){\r\n\t\t\t\t\tif(luga.type(element.observer[element.methodName]) === \"function\"){\r\n\t\t\t\t\t\telement.observer[element.methodName](payload);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given observer will be removed as \"generic\" observer\r\n\t\t *\r\n\t\t * If you pass three arguments, the given observer will be removed as \"event\" observer associated with the given event and method\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer, eventName, methodName){\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tfor(let i = 0; i < this.observers.length; i++){\r\n\t\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(this.eventObservers[eventName] !== undefined){\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t\t */\r\n\t\t\t\t\tconst eventMap = {\r\n\t\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst index = findObserverIndex(this.eventObservers[eventName], eventMap);\r\n\t\t\t\t\t// We have a matching entry\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(index !== -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].splice(index, 1);\r\n\t\t\t\t\t\t// Delete empty entries\r\n\t\t\t\t\t\tif(this.eventObservers[eventName].length === 0){\r\n\t\t\t\t\t\t\tdelete this.eventObservers[eventName];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom\");\r\n\r\n\t/**\r\n\t * Attach a single event listener, to a parent element, that will fire for all descendants matching a selector\r\n\t * No matter whether those descendants exist now or are added in the future\r\n\t * @param {HTMLElement} node\r\n\t * @param {String} eventType\r\n\t * @param {String} selector\r\n\t * @param {Function} callback\r\n\t */\r\n\tluga.dom.delegateEvent = function(node, eventType, selector, callback){\r\n\t\tnode.addEventListener(eventType, function(/** @type {Event} */ event){\r\n\t\t\t/** @type {Element} */\r\n\t\t\tconst currentElement = event.target;\r\n\t\t\tif(luga.dom.nodeMatches(currentElement, selector) === true){\r\n\t\t\t\tcallback(event, currentElement);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Equalize element.matches across browsers\r\n\t * @param {HTMLElement} node\r\n\t * @param {String} selector\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.dom.nodeMatches = function(node, selector){\r\n\t\tlet methodName = \"matches\";\r\n\t\t// Deal with IE11 without polyfills\r\n\t\t/* istanbul ignore next IE-only */\r\n\t\tif(node.matches === undefined && node.msMatchesSelector !== undefined){\r\n\t\t\tmethodName = \"msMatchesSelector\";\r\n\t\t}\r\n\t\treturn node[methodName](selector);\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke a function as soon as the DOM is loaded\r\n\t * @param {Function} fn\r\n\t */\r\n\tluga.dom.ready = function(fn){\r\n\t\tdocument.addEventListener(\"DOMContentLoaded\", fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser either DOM NodeIterator or TreeWalker\r\n\t *\r\n\t * @param {String}                   type        Either \"NodeIterator\" or \"TreeWalker\"\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {Function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                               The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator|TreeWalker}\r\n\t */\r\n\tconst getIteratorInstance = function(type, rootNode, filterFunc){\r\n\r\n\t\tconst filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tconst safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\tif(type === \"TreeWalker\"){\r\n\t\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn document.createNodeIterator(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.nodeIterator\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM NodeIterator\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {Function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                               The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator}\r\n\t */\r\n\tluga.dom.nodeIterator.getInstance = function(rootNode, filterFunc){\r\n\t\treturn getIteratorInstance(\"NodeIterator\", rootNode, filterFunc);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {Function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\t\treturn getIteratorInstance(\"TreeWalker\", rootNode, filterFunc);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {HTMLElement} rootNode     DOM node wrapping the form fields. Required\r\n\t * @param {Boolean}     demoronize   If true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {Object}                  A JavaScript object containing name/value pairs\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\t\tif(rootNode === null){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\t\tconst map = {};\r\n\t\tconst fields = luga.form.utils.getChildFields(rootNode);\r\n\r\n\t\tfor(let i = 0; i < fields.length; i++){\r\n\t\t\tconst element = fields[i];\r\n\t\t\tif(luga.form.utils.isSuccessfulField(element) === true){\r\n\t\t\t\tconst fieldName = element.getAttribute(\"name\");\r\n\t\t\t\tlet fieldValue = null;\r\n\t\t\t\tconst fieldType = element.type;\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = getMultiSelectValue(element);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(element.checked === true){\r\n\t\t\t\t\t\t\tfieldValue = element.value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = element.value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(Array.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} node\r\n\t * @return {Array.<String>}\r\n\t */\r\n\tconst getMultiSelectValue = function(node){\r\n\t\tconst fieldValue = [];\r\n\t\tconst options = node.querySelectorAll(\"option:checked\");\r\n\t\tfor(let i = 0; i < options.length; i++){\r\n\t\t\tfieldValue.push(options[i].value);\r\n\t\t}\r\n\t\treturn fieldValue;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form node or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {HTMLElement} rootNode  DOM node wrapping the form fields\r\n\t * @return {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tconst flatData = luga.form.toMap(rootNode);\r\n\t\tconst jsonData = {};\r\n\t\tfor(let x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {HTMLElement} rootNode    DOM node wrapping the form fields. Required\r\n\t * @param {Boolean}     demoronize  If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {String}                 A URI encoded string\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\t\tif(rootNode === null){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\t\tlet str = \"\";\r\n\t\tconst fields = luga.form.utils.getChildFields(rootNode);\r\n\r\n\t\tfor(let i = 0; i < fields.length; i++){\r\n\t\t\tconst element = fields[i];\r\n\t\t\tif(luga.form.utils.isSuccessfulField(element) === true){\r\n\t\t\t\tconst fieldName = element.getAttribute(\"name\");\r\n\t\t\t\tconst fieldType = element.type;\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\t/* eslint-disable no-case-declarations */\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tconst multiValues = getMultiSelectValue(element);\r\n\t\t\t\t\t\tfor(let j = 0; j < multiValues.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, multiValues[i], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(element.checked === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, element.value, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, element.value, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tconst appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given DOM field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {HTMLElement}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(fieldNode.disabled === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(fieldNode.getAttribute(\"name\") === null){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {HTMLElement}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(fieldNode.type === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[fieldNode.type] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {String} name              Name of the field. Mandatory\r\n\t * @param {HTMLElement} [rootNode]   Root node, optional, default to document\r\n\t * @return {Array.<HTMLElement>}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document;\r\n\t\t}\r\n\t\tconst selector = \"input[name='\" + name + \"']\";\r\n\t\tconst nodes = rootNode.querySelectorAll(selector);\r\n\t\t// Turn nodelist into an array to be consistent with .getChildFields()\r\n\t\treturn Array.prototype.slice.call(nodes);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {HTMLElement}  rootNode   Root node\r\n\t * @return {Array.<HTMLElement>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tconst fields = [];\r\n\t\tconst nodes = rootNode.querySelectorAll(luga.form.CONST.FIELD_SELECTOR);\r\n\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\tconst element = nodes[i];\r\n\t\t\tif(luga.form.utils.isInputField(element) === true){\r\n\t\t\t\tfields.push(element);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path.toString());\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @param {String} value   String to be persisted\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tconst json = getRootState(root);\r\n\t\tluga.setProperty(json, path.toString(), value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tconst setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tconst getRootState = function(root){\r\n\t\tconst rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {String} str   String containing MS Word's garbage\r\n\t * @return {String}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String}  str                   String containing placeholders\r\n\t * @param  {Object|Array.<String>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tlet pattern = null;\r\n\t\tif(Array.isArray(args) === true){\r\n\t\t\tfor(let i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(let x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {String} str  The querystring\r\n\t * @return {Object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tconst map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tconst parts = str.split(\"&\");\r\n\r\n\t\tfor(let i = 0; i < parts.length; i++){\r\n\t\t\tconst tokens = parts[i].split(\"=\");\r\n\t\t\tconst fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tlet fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(Array.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tconst propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * const nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String} str   String containing placeholders\r\n\t * @param  {Object} obj   An objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tlet results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tconst property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tconst pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/* XHR */\r\n\r\n\tluga.namespace(\"luga.xhr\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.header\r\n\t *\r\n\t * @property {String}  name       Name of the HTTP header\r\n\t * @property {String}  value      Value to be used\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.options\r\n\t *\r\n\t * @property {String}   method                   HTTP method. Default to GET\r\n\t * @property {Function} success                  Function to be invoked if the request succeeds. It will receive a single argument of type luga.xhr.response\r\n\t * @property {Function} error                    Function to be invoked if the request fails. It will receive a single argument of type luga.xhr.response\r\n\t * @property {Number}   timeout                  The number of milliseconds a request can take before automatically being terminated\r\n\t * @property {Boolean}  async                    Indicate that the request should be handled asynchronously. Default to true\r\n\t * @property {Boolean}  cache                    If set to false, it will force requested pages not to be cached by the browser. Will only work correctly with HEAD and GET requests\r\n\t *                                               It works by appending \"_={timestamp}\" to the GET parameters. Default to true\r\n\t * @property {Array.<luga.xhr.header>} headers   An array of name/value pairs to be used for custom HTTP headers. Default to an empty array\r\n\t * @property {String}   requestedWith            Value to be used for the \"X-Requested-With\" request header. Default to \"XMLHttpRequest\"\r\n\t * @property {String}   contentType              MIME type to use instead of the one specified by the server. Default to \"text/plain\"\r\n\t *                                               See also: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.response\r\n\t *\r\n\t * @property {Number}       status              Status code returned by the HTTP server\r\n\t * @property {String}       statusText          The response string returned by the HTTP server\r\n\t * @property {String|null}  responseText        The response as text, null if the request was unsuccessful\r\n\t * @property {String}       responseType        A string which specifies what type of data the response contains. See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\r\n\t * @property {String|null}  responseXML         The response as text, null if the request was unsuccessful or cannot be parsed as XML or HTML\r\n\t * @property {Array.<luga.xhr.header>} headers  An array of header/value pairs returned by the server\r\n\t */\r\n\r\n\tluga.XHR_CONST = {\r\n\t\tPOST_CONTENT_TYPE: \"application/x-www-form-urlencoded\"\r\n\t};\r\n\r\n\tluga.xhr.Request = function(options){\r\n\t\tconst config = {\r\n\t\t\t/* eslint-disable no-console */\r\n\t\t\tmethod: \"GET\",\r\n\t\t\tsuccess: function(res){\r\n\t\t\t\tconsole.debug(res);\r\n\t\t\t},\r\n\t\t\terror: function(res){\r\n\t\t\t\tconsole.debug(res);\r\n\t\t\t},\r\n\t\t\ttimeout: 5000,\r\n\t\t\tasync: true,\r\n\t\t\tcache: true,\r\n\t\t\theaders: [],\r\n\t\t\trequestedWith: \"XMLHttpRequest\",\r\n\t\t\tcontentType: \"text/plain\"\r\n\t\t};\r\n\t\tif(options !== undefined){\r\n\t\t\tluga.merge(config, options);\r\n\t\t}\r\n\t\tif(config.method.toUpperCase() === \"POST\"){\r\n\t\t\tconfig.contentType = luga.XHR_CONST.POST_CONTENT_TYPE;\r\n\t\t}\r\n\r\n\t\tconst self = this;\r\n\t\tself.xhr = new XMLHttpRequest();\r\n\r\n\t\t/**\r\n\t\t * Turn the string containing HTTP headers into an array of objects\r\n\t\t * @param {String} str\r\n\t\t * @return {Array.<luga.xhr.header>}\r\n\t\t */\r\n\t\tconst headersToArray = function(str){\r\n\t\t\tconst headers = str.split(\"\\r\\n\");\r\n\t\t\t// Remove the last element since it's empty\r\n\t\t\theaders.pop();\r\n\t\t\treturn headers.map(function(item){\r\n\t\t\t\tconst tokens = item.split(\":\");\r\n\t\t\t\tconst ret = {\r\n\t\t\t\t\theader: tokens[0]\r\n\t\t\t\t};\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(tokens[1] !== undefined){\r\n\t\t\t\t\tret.value = tokens[1].substring(1);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.xhr.response}\r\n\t\t */\r\n\t\tconst assembleResponse = function(){\r\n\t\t\treturn {\r\n\t\t\t\tstatus: self.xhr.status,\r\n\t\t\t\tstatusText: self.xhr.statusText,\r\n\t\t\t\tresponseText: self.xhr.responseText,\r\n\t\t\t\tresponseType: self.xhr.responseType,\r\n\t\t\t\tresponseXML: self.xhr.responseXML,\r\n\t\t\t\theaders: headersToArray(self.xhr.getAllResponseHeaders())\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tconst checkReadyState = function(){\r\n\t\t\tif(self.xhr.readyState === 4){\r\n\t\t\t\tconst httpStatus = self.xhr.status;\r\n\t\t\t\tif((httpStatus >= 200 && httpStatus <= 300) || (httpStatus === 304)){\r\n\t\t\t\t\tconfig.success(assembleResponse());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconfig.error(assembleResponse());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst finalizeRequest = function(url){\r\n\t\t\tself.xhr.onreadystatechange = checkReadyState;\r\n\t\t\tself.xhr.timeout = config.timeout;\r\n\t\t\tself.xhr.setRequestHeader(\"Content-Type\", config.contentType);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(url.substring(0, 4) !== \"http\"){\r\n\t\t\t\t// This may cause issue with CORS so better to avoid on cross-site requests\r\n\t\t\t\tself.xhr.setRequestHeader(\"X-Requested-With\", config.requestedWith);\r\n\t\t\t}\r\n\t\t\tconfig.headers.forEach(function(element){\r\n\t\t\t\tself.xhr.setRequestHeader(element.name, element.value);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst finalizeUrl = function(url, params){\r\n\t\t\tlet suffix = \"\";\r\n\t\t\tif(config.cache === false){\r\n\t\t\t\tsuffix += \"_anti-cache=\" + Date.now() + \"&\";\r\n\t\t\t}\r\n\t\t\tif(params !== null && config.method.toUpperCase() === \"GET\"){\r\n\t\t\t\tsuffix += params;\r\n\t\t\t}\r\n\t\t\tif(suffix !== \"\"){\r\n\t\t\t\tif(url.indexOf(\"?\") !== -1){\r\n\t\t\t\t\turl += \"&\";\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\turl += \"?\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn url + suffix;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Aborts the request if it has already been sent\r\n\t\t */\r\n\t\tthis.abort = function(){\r\n\t\t\tself.xhr.abort();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the request is pending. False otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequestPending = function(){\r\n\t\t\treturn self.xhr.readyState !== 4;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {String} url\r\n\t\t * @param {String} [params] Optional parameter which lets you specify the request's body\r\n\t\t *                          See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send\r\n\t\t */\r\n\t\tthis.send = function(url, params){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(params === undefined){\r\n\t\t\t\tparams = null;\r\n\t\t\t}\r\n\t\t\turl = finalizeUrl(url, params);\r\n\t\t\tself.xhr.open(config.method, url, config.async);\r\n\t\t\tfinalizeRequest(url);\r\n\t\t\tself.xhr.send(params);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/*! \nLuga Data 0.9.7 2018-04-08T09:40:04.077Z\nhttp://www.lugajs.org\nCopyright 2013-2018 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Common\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {Function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tconst retRows = [];\r\n\t\tfor(let i = 0; i < rows.length; i++){\r\n\t\t\tconst filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {Function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.type(formatter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(let i = 0; i < rows.length; i++){\r\n\t\t\tconst formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(let key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\n/* global ActiveXObject */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.xml\");\r\n\r\n\tluga.data.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.data.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.data.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.6.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @return {Array<Node>}\r\n\t */\r\n\tluga.data.xml.evaluateXPath = function(node, path){\r\n\t\tconst retArray = [];\r\n\t\t/* istanbul ignore else IE-only */\r\n\t\tif(window.XPathEvaluator !== undefined){\r\n\t\t\tconst evaluator = new XPathEvaluator();\r\n\t\t\tconst result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tlet currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(window.ActiveXObject !== undefined){\r\n\t\t\tconst selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(let i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn retArray;\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @return {Object}\r\n\t */\r\n\tluga.data.xml.nodeToHash = function(node){\r\n\t\tconst obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(let i = 0; i < node.attributes.length; i++){\r\n\t\t\tconst attr = node.attributes[i];\r\n\t\t\tobj[luga.data.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(let i = 0; i < node.childNodes.length; i++){\r\n\t\t\tconst child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tlet isArray = false;\r\n\t\t\t\tconst tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tconst curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconst childObj = luga.data.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @return {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tconst child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tconst child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @return {String}\r\n\t */\r\n\tluga.data.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\t// IE11 supports XMLSerializer but fails on serializeToString()\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tconst serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.data.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @return {Document}\r\n\t */\r\n\tluga.data.xml.parseFromString = function(xmlStr){\r\n\t\tlet xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\t// IE11 supports DOMParser but fails on parseFromString()\r\n\t\t\tconst xmlDOMObj = new ActiveXObject(luga.data.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.setProperty(\"SelectionLanguage\", \"XPath\");\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tconst domDoc = xmlParser.parseFromString(xmlStr, luga.data.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<String>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<String>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {Function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {Function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.type(options.formatter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.type(options.filter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tconst deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tconst applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tconst hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tconst selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {Function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tconst orig = this.records;\r\n\t\t\t\tfor(let i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tconst rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tconst row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tconst targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tlet fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tlet recordsHolder = [];\r\n\t\t\tif(Array.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(let i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tconst recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tconst targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {Function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<String>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(let i = 0; i < columnNames.length; i++){\r\n\t\t\t\tconst colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tconst fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {Function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tconst oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tconst sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tconst notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tconst sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tconst sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tlet sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(let i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tconst columnToSortName = sortColumns[i];\r\n\t\t\t\tconst columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tconst sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tconst buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tlet ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tconst assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tconst defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {Function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {Function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tconst filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.DetailSet: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = [];\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.contentType = \"text/plain\";\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tconst loadUrl = function(){\r\n\t\t\tconst xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response);\r\n\t\t\t\t},\r\n\t\t\t\tcontentType: self.contentType,\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tself.xhrRequest = new luga.xhr.Request(xhrOptions);\r\n\t\t\tself.xhrRequest.send(self.url);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(response){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, response.status]),\r\n\t\t\t\tresponse: response\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tconst self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tloadFromJson(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tloadFromJson(JSON.parse(response.responseText));\r\n\t\t};\r\n\r\n\t\tconst loadFromJson = function(json){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tconst self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords({\r\n\t\t\t\tresponseText: xmlStr\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tconst xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tconst nodes = luga.data.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tconst records = [];\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.data.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given an <item> node, extract its content inside a JavaScript object\r\n\t\t * @param {Node} item\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tconst itemToHash = function(item){\r\n\t\t\tconst rec = {};\r\n\t\t\tfor(let i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\tconst element = self.itemElements[i];\r\n\t\t\t\tconst nodes = luga.data.xml.evaluateXPath(item, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\trec[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {Node} channel\r\n\t\t */\r\n\t\tconst setChannelMeta = function(channel){\r\n\t\t\tfor(let i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tconst element = self.channelElements[i];\r\n\t\t\t\tconst nodes = luga.data.xml.evaluateXPath(channel, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\tself.channelMeta[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Turn an array of <items> nodes into an array of records\r\n\t\t * @param {Array.<Node>} nodes\r\n\t\t * @return {Array.<Object>}\r\n\t\t */\r\n\t\tconst extractRecords = function(nodes){\r\n\t\t\tconst records = [];\r\n\t\t\tnodes.forEach(function(element){\r\n\t\t\t\trecords.push(itemToHash(element));\r\n\t\t\t});\r\n\t\t\treturn records;\r\n\t\t};\r\n\r\n\t\t/* Utilities */\r\n\r\n\t\t/**\r\n\t\t * Extract text out of a TEXT or CDATA node\r\n\t\t * @param {Node} node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfunction getTextValue(node){\r\n\t\t\tconst child = node.childNodes[0];\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((child.nodeType === 3) /* TEXT_NODE */){\r\n\t\t\t\treturn child.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tconst stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tconst xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\t// Extract metadata\r\n\t\t\tconst channelNodes = luga.data.xml.evaluateXPath(xmlDoc, \"//channel\");\r\n\t\t\tsetChannelMeta(channelNodes[0]);\r\n\t\t\t// Insert all records\r\n\t\t\tconst items = luga.data.xml.evaluateXPath(xmlDoc, \"//item\");\r\n\t\t\tconst records = extractRecords(items);\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tconst bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tconst bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.context\r\n\t *\r\n\t * @extend luga.data.DataSet.context\r\n\t * @property {Number} currentPageNumber        The current page index. Starting at 1\r\n\t * @property {Number} currentPageRecordCount   The total number of records in the current page\r\n\t * @property {Number} pageCount                The total number of pages required to display all of the data\r\n\t * @property {Number} pageSize                 The maximum number of items that can be in a page\r\n\t * @property {Number} currentOffsetStart       Zero-based offset of the first record inside the current page\r\n\t * @property {Number} currentOffsetEnd         Zero-based offset of the last record inside the current page\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Instance of a dataSet. Required\r\n\t * @property {Number}            pageSize       The max number of rows in a given page. Default to 10\r\n\t */\r\n\r\n\t/*\r\n\t *  PagedView class\r\n\t *  Works by reading a dataSet and extracting information out of it in order to generate additional information that can be used for paging\r\n\t *\r\n\t * @param {luga.data.PagedView.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t */\r\n\tluga.data.PagedView = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.PagedView: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.PagedView: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.PagedView} */\r\n\t\tconst self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\tlet pageSize = 10;\r\n\t\tif(options.pageSize !== undefined){\r\n\t\t\tpageSize = options.pageSize;\r\n\t\t}\r\n\r\n\t\tlet currentPage = 1;\r\n\t\tlet currentOffsetStart = 0;\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.PagedView.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tconst context = self.parentDataSet.getContext();\r\n\t\t\tcontext.entities = context.entities.slice(self.getCurrentOffsetStart(), self.getCurrentOffsetEnd() + 1);\r\n\t\t\t// Additional fields\r\n\t\t\tcontext.currentPageNumber = self.getCurrentPageIndex();\r\n\t\t\tcontext.currentPageRecordCount = context.entities.length;\r\n\t\t\tcontext.currentOffsetEnd = self.getCurrentOffsetEnd();\r\n\t\t\tcontext.currentOffsetStart = self.getCurrentOffsetStart();\r\n\t\t\tcontext.pageSize = self.getPageSize();\r\n\t\t\tcontext.pageCount = self.getPagesCount();\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the last record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetEnd = function(){\r\n\t\t\tlet offSet = self.getCurrentOffsetStart() + self.getPageSize() - 1;\r\n\t\t\tif(offSet > self.getRecordsCount()){\r\n\t\t\t\toffSet = self.getRecordsCount();\r\n\t\t\t}\r\n\t\t\treturn offSet;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the first record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetStart = function(){\r\n\t\t\treturn currentOffsetStart;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the current page index. Starting at 1\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentPageIndex = function(){\r\n\t\t\treturn currentPage;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the total number of pages required to display all of the data\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPagesCount = function(){\r\n\t\t\treturn parseInt((self.parentDataSet.getRecordsCount() + self.getPageSize() - 1) / self.getPageSize());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the maximum number of items that can be in a page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPageSize = function(){\r\n\t\t\treturn pageSize;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the given page number\r\n\t\t * Fails silently if the given page number is out of range\r\n\t\t * It also change the index of the current row to match the first record in the page\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.goToPage = function(pageNumber){\r\n\t\t\tif(self.isPageInRange(pageNumber) === false){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(pageNumber === self.getCurrentPageIndex()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPage = pageNumber;\r\n\t\t\tcurrentOffsetStart = ((pageNumber - 1) * self.getPageSize());\r\n\r\n\t\t\tself.setCurrentRowIndex(self.getCurrentOffsetStart());\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the next page\r\n\t\t * Fails silently if the current page is the last one\r\n\t\t */\r\n\t\tthis.goToNextPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() + 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the previous page\r\n\t\t * Fails silently if the current page is the first one\r\n\t\t */\r\n\t\tthis.goToPrevPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() - 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given page is within range. False otherwise\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPageInRange = function(pageNumber){\r\n\t\t\tif(pageNumber < 1 || pageNumber > self.getPagesCount()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * To be used for type checking\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPagedView = function(){\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/* Proxy methods */\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\treturn self.parentDataSet.getCurrentRowIndex();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn self.parentDataSet.getRecordsCount();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet .loadData() method, if any\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(self.parentDataSet.loadData !== undefined){\r\n\t\t\t\tself.parentDataSet.loadData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\tself.parentDataSet.setCurrentRowId(rowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tself.parentDataSet.setCurrentRowIndex(index);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tself.parentDataSet.setState(newState);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * Be aware this only sort the data, it does not affects pagination\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\tself.parentDataSet.sort(columnNames, sortOrder);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on luga.dom.ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tconst config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {HTMLElement} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE];\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, initialize the relevant Region handler\r\n\t * @param {HTMLElement} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tconst dataSourceId = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === null){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tconst dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tlet regionType = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === null){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tconst RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {HTMLElement|undefined} [rootNode]   Optional, default to <body>\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.querySelector(\"body\");\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(rootNode !== null){\r\n\t\t\tconst nodes = rootNode.querySelectorAll(luga.data.region.CONST.SELECTORS.REGION);\r\n\t\t\tfor(let i = 0; i < nodes.length; i++){\r\n\t\t\t\tluga.data.region.init(nodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {HTMLElement}                                node   A DOM node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {HTMLElement } node                          The DOM node that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<String>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.node === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tconst self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tconst attrTraits = this.config.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== null){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE] = this;\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tconst traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(let i = 0; i < this.traits.length; i++){\r\n\t\t\t\tconst func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tconst desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tconst self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {HTMLElement} node\r\n\t\t */\r\n\t\tconst fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.innerHTML);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tconst templateNode = document.getElementById(self.config.templateId);\r\n\t\t\t\tif(templateNode === null){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tconst templateSrc = templateNode.getAttribute(\"src\");\r\n\t\t\t\tif(templateSrc === null){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.innerHTML);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tconst xhrOptions = {\r\n\t\t\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response.responseText);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(response){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tconst xhr = new luga.xhr.Request(xhrOptions);\r\n\t\t\t\t\txhr.send(templateSrc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.innerHTML = this.generateHtml();\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tconst desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {HTMLElement}                            node          A DOM node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tconst CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\tconst removeCssClass = function(nodeList, className){\r\n\t\tnodeList.forEach(function(item){\r\n\t\t\titem.classList.remove(className);\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t// It's a detailSet, abort\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet nodes = options.node.querySelectorAll(CONST.SELECTORS.SELECT);\r\n\t\tnodes = Array.prototype.slice.call(nodes);\r\n\r\n\t\tif(nodes.length > 0){\r\n\t\t\tconst cssClass = nodes[0].getAttribute(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\tnodes[0].classList.remove(cssClass);\r\n\t\t\t// Default to first row\r\n\t\t\tlet index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tnodes[index].classList.add(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event to all nodes\r\n\t\t\tnodes.forEach(function(item){\r\n\t\t\t\titem.addEventListener(\"click\", function(event){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\t\t\titem.classList.add(cssClass);\r\n\t\t\t\t}, false);\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\tlet nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_ID);\r\n\t\tnodes = Array.prototype.slice.call(nodes);\r\n\r\n\t\tnodes.forEach(function(item){\r\n\t\t\titem.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tconst rowId = item.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\t\toptions.dataSource.setCurrentRowId(rowId);\r\n\t\t\t}, false);\r\n\t\t});\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\tlet nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_INDEX);\r\n\t\tnodes = Array.prototype.slice.call(nodes);\r\n\r\n\t\tnodes.forEach(function(item){\r\n\t\t\titem.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tconst rowIndex = parseInt(item.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\t\toptions.dataSource.setCurrentRowIndex(rowIndex);\r\n\t\t\t}, false);\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\tlet nodes = options.node.querySelectorAll(CONST.SELECTORS.SORT);\r\n\t\tnodes = Array.prototype.slice.call(nodes);\r\n\r\n\t\tnodes.forEach(function(item){\r\n\t\t\titem.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tconst sortCol = item.getAttribute(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t}, false);\r\n\t\t});\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tconst CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(let key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {Function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tlet dA = luga.lookupProperty(a, prop);\r\n\t\t\tlet dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tlet dA = luga.lookupProperty(a, prop);\r\n\t\t\tlet dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tconst tA = a.toString();\r\n\t\t\tconst tB = b.toString();\r\n\t\t\tconst tAlower = tA.toLowerCase();\r\n\t\t\tconst tBlower = tB.toLowerCase();\r\n\t\t\tconst minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(let i = 0; i < minLen; i++){\r\n\t\t\t\tconst aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tconst bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tconst aChar = tA.charAt(i);\r\n\t\t\t\tconst bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tconst tA = a.toString();\r\n\t\t\tconst tB = b.toString();\r\n\t\t\tconst tAlower = tA.toLowerCase();\r\n\t\t\tconst tBlower = tB.toLowerCase();\r\n\t\t\tconst minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(let i = 0; i < minLen; i++){\r\n\t\t\t\tconst aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tconst bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tconst aChar = tA.charAt(i);\r\n\t\t\t\tconst bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.PagingBar.options\r\n\t *\r\n\t * @property {luga.data.PagedView}     pagedView  Instance of a pagedView that will be controlled by the widget. Required\r\n\t * @property {Element}                 node       DOM element that will contain the widget. Required\r\n\t * @property {luga.data.PAGING_STYLE}  style      Style to be used for the widget, either \"luga-pagingBarLinks\" or \"luga-pagingBarPages\". Default to \"luga-pagingBarLinks\"\r\n\t * @property {String}                  nextText   Text to be used for \"next\" links. Default to \">\"\r\n\t * @property {String}                  prevText   Text to be used for \"previous\" links. Default to \"<\"\r\n\t * @property {String}                  separator  Text to be used to separate links. Default to \" | \"\r\n\t * @property {Number}                  maxLinks   Maximum number of links to show. Default to 10\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.PAGING_STYLE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.PAGING_STYLE = {\r\n\t\tLINKS: \"luga-pagingBarLinks\",\r\n\t\tPAGES: \"luga-pagingBarPages\"\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed style is supported\r\n\t * @param {String}  style\r\n\t * @return {Boolean}\r\n\t */\r\n\tconst isValidStyle = function(style){\r\n\t\tfor(let key in luga.data.PAGING_STYLE){\r\n\t\t\tif(luga.data.PAGING_STYLE[key] === style){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * PagingBar widget\r\n\t * Given a pagedView, create a fully fledged pagination bar\r\n\t *\r\n\t * @param {luga.data.widgets.PagingBar.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.data.widgets.PagingBar = function(options){\r\n\r\n\t\tconst CONST = {\r\n\t\t\tCSS_BASE_CLASS: \"luga-pagingBar\",\r\n\t\t\tSAFE_HREF: \"javascript:;\",\r\n\t\t\tLINKS_SEPARATOR: \" - \",\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_PAGED_VIEW_PARAMETER: \"luga.data.widgets.PagingBar: pagedView parameter is required. Must be an instance of luga.data.PagedView\",\r\n\t\t\t\tINVALID_NODE_PARAMETER: \"luga.data.widgets.PagingBar: node parameter is required. Must be a DOM Element\",\r\n\t\t\t\tINVALID_STYLE_PARAMETER: \"luga.data.widgets.PagingBar: style parameter must be of type luga.data.PAGING_STYLE\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.pagedView === undefined || (options.pagedView.isPagedView === undefined || options.pagedView.isPagedView() === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PAGED_VIEW_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.node === undefined || options.node instanceof Element === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_NODE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.style !== undefined && isValidStyle(options.style) === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_STYLE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.PagedView} */\r\n\t\t\tpagedView: undefined,\r\n\t\t\t/** @type {Element} */\r\n\t\t\tnode: undefined,\r\n\t\t\tstyle: luga.data.PAGING_STYLE.LINKS,\r\n\t\t\tnextText: \">\",\r\n\t\t\tprevText: \"<\",\r\n\t\t\tseparator: \" | \",\r\n\t\t\tmaxLinks: 10\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.data.widgets.PagingBar}\r\n\t\t */\r\n\t\tconst self = this;\r\n\t\t// Alias/shortcuts\r\n\t\tconst pagedView = self.config.pagedView;\r\n\t\tconst node = self.config.node;\r\n\r\n\t\tpagedView.addObserver(this);\r\n\r\n\t\t// Add CSS\r\n\t\tnode.classList.add(CONST.CSS_BASE_CLASS);\r\n\t\tnode.classList.add(self.config.style);\r\n\r\n\t\tconst render = function(){\r\n\t\t\t// Reset UI\r\n\t\t\tnode.innerHTML = \"\";\r\n\t\t\tconst currentPageIndex = pagedView.getCurrentPageIndex();\r\n\r\n\t\t\tif(pagedView.getPagesCount() > 1){\r\n\t\t\t\trenderPrevLink(self.config.prevText, currentPageIndex);\r\n\t\t\t\trenderMainLinks(self.config.maxLinks, self.config.style);\r\n\t\t\t\trenderNextLink(self.config.nextText, currentPageIndex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst renderPrevLink = function(text, pageIndex){\r\n\r\n\t\t\tconst textNode = document.createTextNode(text);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex - 1);\r\n\r\n\t\t\tif(pageIndex !== 1){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t};\r\n\r\n\t\tconst renderNextLink = function(text, pageIndex){\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t\tconst textNode = document.createTextNode(text);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex + 1);\r\n\r\n\t\t\tif(pageIndex !== pagedView.getPagesCount()){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst renderMainLinks = function(maxLinks, style){\r\n\t\t\tconst pageSize = pagedView.getPageSize();\r\n\t\t\tconst recordsCount = pagedView.getRecordsCount();\r\n\t\t\tconst pagesCount = pagedView.getPagesCount();\r\n\t\t\tconst currentPageIndex = pagedView.getCurrentPageIndex();\r\n\t\t\tconst endIndex = getEndIndex(currentPageIndex, maxLinks, pagesCount);\r\n\r\n\t\t\t// Page numbers are between 1 and n. So the loop start from 1\r\n\t\t\tfor(let i = 1; i < (endIndex + 1); i++){\r\n\r\n\t\t\t\tconst labelText = getLabelText(i, style, pageSize, pagesCount, recordsCount);\r\n\t\t\t\tif(i !== currentPageIndex){\r\n\t\t\t\t\trenderCurrentLink(i, labelText);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// No link on current page\r\n\t\t\t\t\trenderCurrentText(labelText);\r\n\t\t\t\t}\r\n\t\t\t\t// No separator on last entry\r\n\t\t\t\tif(i < endIndex){\r\n\t\t\t\t\trenderSeparator();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tconst renderCurrentLink = function(i, linkText){\r\n\t\t\tconst textNode = document.createTextNode(linkText);\r\n\t\t\tconst linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, i);\r\n\t\t\tnode.appendChild(linkNode);\r\n\t\t};\r\n\r\n\t\tconst renderCurrentText = function(labelText){\r\n\t\t\tconst textNode = document.createTextNode(labelText);\r\n\t\t\tconst strongNode = document.createElement(\"strong\");\r\n\t\t\tstrongNode.appendChild(textNode);\r\n\t\t\tnode.appendChild(strongNode);\r\n\t\t};\r\n\r\n\t\tconst renderSeparator = function(){\r\n\t\t\tconst separatorNode = document.createTextNode(self.config.separator);\r\n\t\t\tnode.appendChild(separatorNode);\r\n\t\t};\r\n\r\n\t\tconst addGoToPageEvent = function(linkNode, pageNumber){\r\n\t\t\tlinkNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tpagedView.goToPage(pageNumber);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst getEndIndex = function(currentPageIndex, maxLinks, pagesCount){\r\n\t\t\tlet startIndex = parseInt(currentPageIndex - parseInt(maxLinks / 2));\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\t\t\tconst tempPos = startIndex + maxLinks - 1;\r\n\t\t\tlet endIndex = pagesCount;\r\n\t\t\tif(tempPos < pagesCount){\r\n\t\t\t\tendIndex = tempPos;\r\n\t\t\t}\r\n\t\t\treturn endIndex;\r\n\t\t};\r\n\r\n\t\tconst getLabelText = function(i, style, pageSize, pagesCount, recordsCount){\r\n\t\t\tlet labelText = \"\";\r\n\r\n\t\t\tif(style === luga.data.PAGING_STYLE.PAGES){\r\n\t\t\t\tlabelText = i;\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(style === luga.data.PAGING_STYLE.LINKS){\r\n\t\t\t\tlet startText = \"\";\r\n\t\t\t\tlet endText = \"\";\r\n\t\t\t\tif(i !== 1){\r\n\t\t\t\t\tstartText = (pageSize * (i - 1)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// First link\r\n\t\t\t\t\tstartText = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < pagesCount){\r\n\t\t\t\t\tendText = startText + pageSize - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Last link\r\n\t\t\t\t\tendText = recordsCount;\r\n\t\t\t\t}\r\n\t\t\t\tlabelText = startText + CONST.LINKS_SEPARATOR + endText;\r\n\t\t\t}\r\n\r\n\t\t\treturn labelText;\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\trender();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tconst self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tlet isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tlet bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tconst newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {HTMLElement}  button     Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {HTMLElement} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tconst self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\tif(self.config.button === null){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\r\n\t\t\tself.config.button.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tself.config.button.classList.add(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tself.config.button.classList.remove(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}