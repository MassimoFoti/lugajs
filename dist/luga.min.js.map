{"version":3,"sources":["luga.common.js","luga.validator.js","luga.data.js"],"names":["window","luga","namespace","ns","rootObject","parts","split","undefined","i","length","common","version","extend","baseFunc","func","args","apply","isPlainObject","obj","Object","prototype","toString","call","proto","getPrototypeOf","constructor","hasOwnProperty","Function","lookupFunction","path","reference","lookupProperty","type","object","part","shift","merge","target","source","x","setProperty","value","class2type","forEach","element","toLowerCase","rawType","stringType","NOTIFIER_CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_GENERIC_OBSERVER_PARAMETER","INVALID_EVENT_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","Notifier","this","observers","eventObservers","addObserver","observer","eventName","methodName","arguments","push","eventMap","findObserverIndex","eventArray","currentMap","notifyObservers","payload","genericMethod","str","charAt","toUpperCase","substring","generateGenericMethodName","removeObserver","splice","index","dom","ready","fn","document","addEventListener","getIteratorInstance","rootNode","filterFunc","filter","node","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","acceptNode","createTreeWalker","SHOW_ELEMENT","createNodeIterator","nodeIterator","getInstance","treeWalker","form","CONST","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toMap","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","getAttribute","fieldValue","getMultiSelectValue","checked","string","Array","isArray","options","querySelectorAll","toJson","flatData","jsonData","toQueryString","multiValues","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","disabled","jQuery","prop","getFieldGroup","name","nodes","localStorage","retrieve","root","getRootState","persist","json","setRootState","setItem","JSON","stringify","rootJson","getItem","parse","replace","RegExp","String","fromCharCode","format","pattern","queryToMap","tokens","decodeURIComponent","propertyPattern","populate","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","attr","addClass","replaceWith","before","XHR_CONST","POST_CONTENT_TYPE","xhr","Request","config","method","success","res","console","debug","error","timeout","async","cache","headers","requestedWith","contentType","self","XMLHttpRequest","assembleResponse","status","statusText","responseText","responseType","responseXML","getAllResponseHeaders","pop","item","ret","header","checkReadyState","readyState","httpStatus","abort","isRequestPending","send","url","params","suffix","Date","now","indexOf","finalizeUrl","open","onreadystatechange","setRequestHeader","finalizeRequest","validator","handlers","errorAlert","formNode","validators","errorMsg","focusGiven","message","getFocus","alert","errorBox","htmlStr","FORM_SELECTOR","RULE_PREFIX","DEFAULT_DATE_PATTERN","CUSTOM_ATTRIBUTES","VALIDATE","ERROR","BEFORE","AFTER","BLOCK_SUBMIT","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","MISSING_FUNCTION","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","HANDLERS","FORM_ERROR","FormValidator","blocksubmit","after","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","event","executedValidators","isValid","preventDefault","disableSubmit","buttons","each","buttonNode","val","callBack","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeClass","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","parseInt","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","containDot","secondFieldNode","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","initForms","body","api","validateForm","formValidator","validateField","fieldValidator","validateFields","validateChildFields","data","dataSourceRegistry","COL_TYPES","EVENTS","CURRENT_ROW_CHANGED","DATA_CHANGED","DATA_SORTED","DATA_LOADING","PRE_DATA_SORTED","STATE_CHANGED","XHR_ERROR","DUPLICATED_UUID","INVALID_FILTER_PARAMETER","INVALID_FILTER_ACTION","INVALID_UPDATER_PARAMETER","INVALID_UPDATER_ACTION","INVALID_STATE","PK_KEY","PK_KEY_PREFIX","XHR_TIMEOUT","getDataSource","uuid","setDataSource","dataSource","STATE","LOADING","READY","assembleStateDescription","state","isValidState","isStateError","isStateLoading","isStateReady","rows","dataset","retRows","filteredRow","update","formatter","formattedRow","key","getTextValue","child","childNodes","nodeType","nodeHasText","nextSibling","xml","MIME_TYPE","ATTRIBUTE_PREFIX","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","result","XPathEvaluator","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","nodeToHash","attributes","attributesToProperties","tagName","nodeName","curValue","childObj","childrenToProperties","nodeToString","XMLSerializer","serializeToString","parseFromString","xmlStr","xmlDOMObj","loadXML","DOMParser","DataSet","INVALID_COL_TYPE","INVALID_UUID_PARAMETER","INVALID_FORMATTER_PARAMETER","INVALID_PRIMITIVE","INVALID_PRIMITIVE_ARRAY","INVALID_ROW_PARAMETER","INVALID_ROW_ID_PARAMETER","INVALID_ROW_INDEX_PARAMETER","INVALID_SORT_COLUMNS","INVALID_SORT_ORDER","records","recordsHash","filteredRecords","currentRowId","columnTypes","lastSortColumns","lastSortOrder","applyFilter","hasFilter","resetCurrentRow","hasFormatter","selectAll","clearFilter","delete","orig","rowToDelete","setState","getColumnType","columnName","getContext","context","entities","recordCount","getRecordsCount","stateDesc","getState","getCurrentRow","getRowById","getCurrentRowId","getCurrentRowIndex","row","getRowIndex","rowId","targetRow","getRowByIndex","fetchedRow","getSortColumn","getSortOrder","insert","recordsHolder","recordID","setCurrentRowId","resetCurrentRowToFirst","setColumnType","columnNames","columnType","colName","notificationData","oldRowId","oldRow","currentRow","dataSet","setCurrentRow","fetchedRowId","setCurrentRowIndex","setFilter","newState","oldState","currentState","sort","sortOrder","ORDER","TOG","isValidSortOrder","sortColumns","assembleSortColumns","defineToggleSortOrder","oldSortColumns","oldSortOrder","newSortColumns","newSortOrder","sortColumnName","sortColumnType","sortFunction","getSortStrategy","columnToSortName","columnToSortType","sortStrategy","buildSecondarySortFunction","slice","funcA","funcB","a","b","ASC","DESC","updater","DetailSet","INVALID_DS_PARAMETER","parentDataSet","entity","fetchRow","onDataChangedHandler","onCurrentRowChangedHandler","onStateChangedHandler","HttpDataSet","HTTP_DATA_SET_ABSTRACT","XHR_FAILURE","NEED_URL_TO_LOAD","incrementalLoad","xhrRequest","cancelRequest","getUrl","loadData","xhrOptions","response","loadRecords","xhrError","setUrl","newUrl","JsonDataSet","rawJson","getRawJson","getPath","loadRawJson","loadFromJson","setPath","XmlDataSet","rawXml","getRawXml","loadRawXml","xmlDoc","Rss2Dataset","channelElements","itemElements","channelMeta","extractRecords","rec","itemToHash","items","channel","setChannelMeta","ChildJsonDataSet","MISSING_PARENT_DS","MISSING_URL","FAILED_URL_BINDING","urlPattern","fetchData","bindUrl","ChildXmlDataSet","PagedView","pageSize","currentPage","currentOffsetStart","getCurrentOffsetStart","getCurrentOffsetEnd","currentPageNumber","getCurrentPageIndex","currentPageRecordCount","currentOffsetEnd","getPageSize","pageCount","getPagesCount","offSet","goToPage","pageNumber","isPageInRange","goToNextPage","goToPrevPage","isPagedView","region","DATA_SOURCE_UUID","REGION","REGION_TYPE","TEMPLATE_ID","TRAITS","REGION_REFERENCE","DEFAULT_REGION_TYPE","DEFAULT_TRAITS","MISSING_DATA_SOURCE_ATTRIBUTE","MISSING_DATA_SOURCE","MISSING_REGION_TYPE_FUNCTION","REGION_RENDERED","SELECTORS","autoregister","setup","getReferenceFromNode","dataSourceId","regionType","RegionClass","initRegions","querySelector","assembleRegionDescription","ds","Base","INVALID_TRAIT","MISSING_NODE","dsUuid","templateId","traits","dsId","attrTraits","concat","applyTraits","traitData","render","desc","Handlebars","HANDLEBARS_ERROR_MESSAGES","MISSING_HANDLEBARS","MISSING_TEMPLATE_FILE","MISSING_TEMPLATE_NODE","template","generateHtml","innerHTML","compile","templateNode","getElementById","templateSrc","fetchTemplate","SELECT","SET_ROW_ID","SET_ROW_INDEX","SORT","removeCssClass","className","classList","add","addSelectEvent","setRowId","addRowIdEvent","setRowIndex","rowIndex","addRowIndexEvent","sortCol","UNSUPPORTED_DATA_TYPE","UNSUPPORTED_SORT_ORDER","dataType","date","ascending","dA","dB","descending","tA","tB","tAlower","tBlower","minLen","aLowerChar","bLowerChar","aChar","bChar","PAGING_STYLE","LINKS","PAGES","widgets","PagingBar","INVALID_PAGED_VIEW_PARAMETER","INVALID_NODE_PARAMETER","INVALID_STYLE_PARAMETER","pagedView","Element","style","isValidStyle","nextText","prevText","maxLinks","renderPrevLink","text","pageIndex","textNode","createTextNode","linkNode","createElement","setAttribute","appendChild","addGoToPageEvent","renderNextLink","renderMainLinks","recordsCount","pagesCount","currentPageIndex","endIndex","getEndIndex","labelText","getLabelText","renderCurrentLink","renderCurrentText","renderSeparator","linkText","strongNode","separatorNode","startIndex","tempPos","startText","ShowMore","INVALID_DATASET_PARAMETER","INVALID_URL_PARAMETER","paramPath","isEnabled","assembleUrl","bindingObj","disable","enable","fetch","updateState","ShowMoreButton","button","disabledClass","BUTTON_ERROR_MESSAGES","MISSING_BUTTON","attachEvents"],"mappings":"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","file":"luga.min.js","sourcesContent":["/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\twindow.luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {String} ns                   Namespace as dot-delimited string\r\n\t * @param {Object} [rootObject=window]  Optional root object. Default to window\r\n\t * @return {Object}\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.common\");\r\n\tluga.common.version = \"0.9.7\";\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {Array}    [args]    An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if an object is a plain object (created using \"{}\" or \"new Object\"). False otherwise\r\n\t * Based on jQuery.isPlainObject()\r\n\t * @param {*} obj\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.isPlainObject = function(obj){\r\n\t\t// Detect obvious negatives\r\n\t\t// Use Object.prototype.toString to catch host objects\r\n\t\tif(Object.prototype.toString.call(obj) !== \"[object Object]\"){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tvar proto = Object.getPrototypeOf(obj);\r\n\r\n\t\t// Objects with no prototype (e.g., Object.create(null)) are plain\r\n\t\tif(proto === null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\t// Objects with prototype are plain if they were constructed by a global Object function\r\n\t\tvar constructor = Object.prototype.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\r\n\t\treturn typeof (constructor === \"function\") && (Function.toString.call(constructor) === Function.toString.call(Object));\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {String} path            Fully qualified name of a function\r\n\t * @return {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(luga.type(reference) === \"function\"){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t *\r\n\t * @param {Object} target     An object that will receive the new properties\r\n\t * @param {Object} source     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, source){\r\n\t\tfor(var x in source){\r\n\t\t\tif(source.hasOwnProperty(x) === true){\r\n\t\t\t\ttarget[x] = source[x];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {Object} object  Target object\r\n\t * @param {String} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\tif(parts.length === 1){\r\n\t\t\tobject[path] = value;\r\n\t\t}\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// Update\r\n\t\t\t\t\tobject[part] = value;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar class2type = {};\r\n\t[\"Array\", \"Boolean\", \"Date\", \"Error\", \"Function\", \"Number\", \"Object\", \"RegExp\", \"String\", \"Symbol\"].forEach(function(element){\r\n\t\tclass2type[\"[object \" + element + \"]\"] = element.toLowerCase();\r\n\t});\r\n\r\n\t/**\r\n\t * Determine the internal JavaScript [[Class]] of an object\r\n\t * Based on jQuery.type()\r\n\t * @param {*} obj\r\n\t * @return {String}\r\n\t */\r\n\tluga.type = function(obj){\r\n\t\tif(obj === null){\r\n\t\t\treturn \"null\";\r\n\t\t}\r\n\t\tvar rawType = typeof obj;\r\n\t\tif((rawType === \"object\") || (rawType === \"function\")){\r\n\t\t\t/* http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/ */\r\n\t\t\tvar stringType = Object.prototype.toString.call(obj);\r\n\t\t\treturn class2type[stringType];\r\n\t\t}\r\n\t\treturn rawType;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.eventObserverMap\r\n\t *\r\n\t * @property {Object} observer\r\n\t * @property {String} methodName\r\n\t */\r\n\r\n\tluga.NOTIFIER_CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_GENERIC_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_EVENT_OBSERVER_PARAMETER: \"addObserver(): eventName and methodName must be strings\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @type {Array.<Object>}\r\n\t\t */\r\n\t\tthis.observers = [];\r\n\r\n\t\t/**\r\n\t\t * @type {Object.<String, Array.<luga.eventObserverMap>>}\r\n\t\t */\r\n\t\tthis.eventObservers = {};\r\n\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateGenericMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Register an observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given object will be registered as \"generic\" observer\r\n\t\t * \"Generic\" observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t *\r\n\t\t * If you pass three arguments, the first is the object that will be registered as \"event\" observer\r\n\t\t * The second argument is the event name\r\n\t\t * The third argument is the method of the object that will be invoked once the given event is triggered\r\n\t\t *\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer[methodName] = function(data){};\r\n\t\t *\r\n\t\t * @param  {Object} observer  Observer object\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.addObserver = function(observer, eventName, methodName){\r\n\t\t\tif(luga.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_GENERIC_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tthis.observers.push(observer);\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(luga.type(eventName) !== \"string\" || luga.type(methodName) !== \"string\"){\r\n\t\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_EVENT_OBSERVER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tvar eventMap = {\r\n\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t};\r\n\t\t\t\t// First entry for the given event\r\n\t\t\t\tif(this.eventObservers[eventName] === undefined){\r\n\t\t\t\t\tthis.eventObservers[eventName] = [eventMap];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(findObserverIndex(this.eventObservers[eventName], eventMap) === -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].push(eventMap);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {Array.<luga.eventObserverMap>} eventArray\r\n\t\t * @param {luga.eventObserverMap} eventMap\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tvar findObserverIndex = function(eventArray, eventMap){\r\n\t\t\tfor(var i = 0; i < eventArray.length; i++){\r\n\t\t\t\t/**\r\n\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t */\r\n\t\t\t\tvar currentMap = eventArray[i];\r\n\t\t\t\tif(currentMap.observer === eventMap.observer && currentMap.methodName === eventMap.methodName){\r\n\t\t\t\t\treturn i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all relevant observers\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {String}  eventName  Name of the event\r\n\t\t * @param {Object}  payload    Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, payload){\r\n\t\t\tif(luga.type(payload) !== \"object\"){\r\n\t\t\t\tthrow(luga.NOTIFIER_CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\t// \"Generic\" observers\r\n\t\t\tvar genericMethod = generateGenericMethodName(eventName);\r\n\t\t\tthis.observers.forEach(function(element){\r\n\t\t\t\tif((element[genericMethod] !== undefined) && (luga.type(element[genericMethod]) === \"function\")){\r\n\t\t\t\t\telement[genericMethod](payload);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t// \"Event\" observers\r\n\t\t\tvar eventObservers = this.eventObservers[eventName];\r\n\t\t\tif(eventObservers !== undefined){\r\n\t\t\t\teventObservers.forEach(function(element){\r\n\t\t\t\t\tif(luga.type(element.observer[element.methodName]) === \"function\"){\r\n\t\t\t\t\t\telement.observer[element.methodName](payload);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t * This method is overloaded. You can either invoke it with one or three arguments\r\n\t\t *\r\n\t\t * If you only pass one argument, the given observer will be removed as \"generic\" observer\r\n\t\t *\r\n\t\t * If you pass three arguments, the given observer will be removed as \"event\" observer associated with the given event and method\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t * @param {String} [eventName]\r\n\t\t * @param {String} [methodName]\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer, eventName, methodName){\r\n\t\t\tif(arguments.length === 1){\r\n\t\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(arguments.length === 3){\r\n\t\t\t\tif(this.eventObservers[eventName] !== undefined){\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * @type {luga.eventObserverMap}\r\n\t\t\t\t\t */\r\n\t\t\t\t\tvar eventMap = {\r\n\t\t\t\t\t\tobserver: observer,\r\n\t\t\t\t\t\tmethodName: methodName\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar index = findObserverIndex(this.eventObservers[eventName], eventMap);\r\n\t\t\t\t\t// We have a matching entry\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif(index !== -1){\r\n\t\t\t\t\t\tthis.eventObservers[eventName].splice(index, 1);\r\n\t\t\t\t\t\t// Delete empty entries\r\n\t\t\t\t\t\tif(this.eventObservers[eventName].length === 0){\r\n\t\t\t\t\t\t\tdelete this.eventObservers[eventName];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom\");\r\n\r\n\t/**\r\n\t * Invoke a function as soon as the DOM is loaded\r\n\t * @param {Function} fn\r\n\t */\r\n\tluga.dom.ready = function(fn){\r\n\t\tdocument.addEventListener(\"DOMContentLoaded\", fn);\r\n\t};\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser either DOM NodeIterator or TreeWalker\r\n\t *\r\n\t * @param {String}                   type        Either \"NodeIterator\" or \"TreeWalker\"\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                               The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator|TreeWalker}\r\n\t */\r\n\tvar getIteratorInstance = function(type, rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\tif(type === \"TreeWalker\"){\r\n\t\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn document.createNodeIterator(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.nodeIterator\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM NodeIterator\r\n\t * https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                               The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {NodeIterator}\r\n\t */\r\n\tluga.dom.nodeIterator.getInstance = function(rootNode, filterFunc){\r\n\t\treturn getIteratorInstance(\"NodeIterator\", rootNode, filterFunc);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {HTMLElement}              rootNode    Start node. Required\r\n\t * @param {function} [filterFunc]    filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @return {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\t\treturn getIteratorInstance(\"TreeWalker\", rootNode, filterFunc);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {HTMLElement} rootNode     DOM node wrapping the form fields. Required\r\n\t * @param {Boolean}     demoronize   If true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {Object}                  A JavaScript object containing name/value pairs\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toMap = function(rootNode, demoronize){\r\n\t\tif(rootNode === null){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tvar element = fields[i];\r\n\t\t\tif(luga.form.utils.isSuccessfulField(element) === true){\r\n\t\t\t\tvar fieldName = element.getAttribute(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = element.type;\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = getMultiSelectValue(element);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(element.checked === true){\r\n\t\t\t\t\t\t\tfieldValue = element.value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = element.value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(Array.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {HTMLElement} node\r\n\t * @return {Array.<String>}\r\n\t */\r\n\tvar getMultiSelectValue = function(node){\r\n\t\tvar fieldValue = [];\r\n\t\tvar options = node.querySelectorAll(\"option:checked\");\r\n\t\tfor(var i = 0; i < options.length; i++){\r\n\t\t\tfieldValue.push(options[i].value);\r\n\t\t}\r\n\t\treturn fieldValue;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form node or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {HTMLElement} rootNode  DOM node wrapping the form fields\r\n\t * @return {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toMap(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {HTMLElement} rootNode    DOM node wrapping the form fields. Required\r\n\t * @param {Boolean}     demoronize  If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @return {String}                 A URI encoded string\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\t\tif(rootNode === null){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tvar element = fields[i];\r\n\t\t\tif(luga.form.utils.isSuccessfulField(element) === true){\r\n\t\t\t\tvar fieldName = element.getAttribute(\"name\");\r\n\t\t\t\tvar fieldType = element.type;\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tvar multiValues = getMultiSelectValue(element);\r\n\t\t\t\t\t\tfor(var j = 0; j < multiValues.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, multiValues[i], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(element.checked === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, element.value, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, element.value, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given DOM field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {HTMLElement}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(fieldNode.disabled === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(fieldNode.getAttribute(\"name\") === null){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jQuery}  fieldNode\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {String} name         Name of the field. Mandatory\r\n\t * @param {jQuery} [rootNode]   Root node, optional, default to document\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name='\" + name + \"']\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {HTMLElement}  rootNode   Root node\r\n\t * @return {Array.<HTMLElement>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tvar nodes = rootNode.querySelectorAll(luga.form.CONST.FIELD_SELECTOR);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\tif(luga.form.utils.isInputField(element) === true){\r\n\t\t\t\tfields.push(element);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fields;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.localStorage\");\r\n\r\n\t/**\r\n\t * Retrieve from localStorage the string corresponding to the given combination of root and path\r\n\t * Returns undefined if nothing matches the given root/path\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @return {*|undefined}\r\n\t */\r\n\tluga.localStorage.retrieve = function(root, path){\r\n\t\treturn luga.lookupProperty(getRootState(root), path.toString());\r\n\t};\r\n\r\n\t/**\r\n\t * Persist the given string inside localStorage, under the given combination of root and path\r\n\t * The ability to pass a dot-delimited path allow to protect the information from name clashes\r\n\t * @param {String} root    Top-level key inside localStorage\r\n\t * @param {String} path    Dot-delimited string\r\n\t * @param {String} value   String to be persisted\r\n\t */\r\n\tluga.localStorage.persist = function(root, path, value){\r\n\t\tvar json = getRootState(root);\r\n\t\tluga.setProperty(json, path.toString(), value);\r\n\t\tsetRootState(root, json);\r\n\t};\r\n\r\n\tvar setRootState = function(root, json){\r\n\t\tlocalStorage.setItem(root, JSON.stringify(json));\r\n\t};\r\n\r\n\tvar getRootState = function(root){\r\n\t\tvar rootJson = localStorage.getItem(root);\r\n\t\tif(rootJson === null){\r\n\t\t\treturn {};\r\n\t\t}\r\n\t\treturn JSON.parse(rootJson);\r\n\t};\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {String} str   String containing MS Word's garbage\r\n\t * @return {String}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String}  str                   String containing placeholders\r\n\t * @param  {Object|Array.<String>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif(Array.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(luga.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {String} str  The querystring\r\n\t * @return {Object}\r\n\t */\r\n\tluga.string.queryToMap = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(Array.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * populating the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.populate(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {String} str   String containing placeholders\r\n\t * @param  {Object} obj   An objects containing name/value pairs in string format\r\n\t * @return {String} The newly assembled string\r\n\t */\r\n\tluga.string.populate = function(str, obj){\r\n\t\tif(luga.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t * @param {HTMLElement} node\r\n\t * @return {String}\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node !== undefined){\r\n\t\t\tif(node.getAttribute(\"id\") === null){\r\n\t\t\t\tboxId += node.getAttribute(\"id\");\r\n\t\t\t}\r\n\t\t\telse if(node.getAttribute(\"name\") !== null){\r\n\t\t\t\tboxId += node.getAttribute(\"name\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jQuery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node)[0]);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\t/* istanbul ignore else */\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t * @param {String}       html   HTML/Text code to inject\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {HTMLElement}  node   Target node\r\n\t * @param {String}       html   HTML/Text code to inject\r\n\t * @return {HTMLElement}\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jQuery}  node                       Target node\r\n\t * @param {String}  html                       HTML/Text code to inject\r\n\t * @param {String}  [cssClass=\"luga_message\"]  CSS class attached to the box. Default to \"luga_message\"\r\n\t * @return {jQuery}\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node)[0]);\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XHR */\r\n\r\n\tluga.namespace(\"luga.xhr\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.header\r\n\t *\r\n\t * @property {String}  name       Name of the HTTP header\r\n\t * @property {String}  value      Value to be used\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.options\r\n\t *\r\n\t * @property {String}   method                   HTTP method. Default to GET\r\n\t * @property {Function} success                  Function to be invoked if the request succeeds. It will receive a single argument of type luga.xhr.response\r\n\t * @property {Function} error                    Function to be invoked if the request fails. It will receive a single argument of type luga.xhr.response\r\n\t * @property {Number}   timeout                  The number of milliseconds a request can take before automatically being terminated\r\n\t * @property {Boolean}  async                    Indicate that the request should be handled asynchronously. Default to true\r\n\t * @property {Boolean}  cache                    If set to false, it will force requested pages not to be cached by the browser. Will only work correctly with HEAD and GET requests\r\n\t *                                               It works by appending \"_={timestamp}\" to the GET parameters. Default to true\r\n\t * @property {Array.<luga.xhr.header>} headers   An array of name/value pairs to be used for custom HTTP headers. Default to an empty array\r\n\t * @property {String}   requestedWith            Value to be used for the \"X-Requested-With\" request header. Default to \"XMLHttpRequest\"\r\n\t * @property {String}   contentType              MIME type to use instead of the one specified by the server. Default to \"text/plain\"\r\n\t *                                               See also: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.xhr.response\r\n\t *\r\n\t * @property {Number}       status              Status code returned by the HTTP server\r\n\t * @property {String}       statusText          The response string returned by the HTTP server\r\n\t * @property {String|null}  responseText        The response as text, null if the request was unsuccessful\r\n\t * @property {String}       responseType        A string which specifies what type of data the response contains. See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType\r\n\t * @property {String|null}  responseXML         The response as text, null if the request was unsuccessful or cannot be parsed as XML or HTML\r\n\t * @property {Array.<luga.xhr.header>} headers  An array of header/value pairs returned by the server\r\n\t */\r\n\r\n\tluga.XHR_CONST = {\r\n\t\tPOST_CONTENT_TYPE: \"application/x-www-form-urlencoded\"\r\n\t};\r\n\r\n\tluga.xhr.Request = function(options){\r\n\t\tvar config = {\r\n\t\t\tmethod: \"GET\",\r\n\t\t\tsuccess: function(res){\r\n\t\t\t\tconsole.debug(res);\r\n\t\t\t},\r\n\t\t\terror: function(res){\r\n\t\t\t\tconsole.debug(res);\r\n\t\t\t},\r\n\t\t\ttimeout: 5000,\r\n\t\t\tasync: true,\r\n\t\t\tcache: true,\r\n\t\t\theaders: [],\r\n\t\t\trequestedWith: \"XMLHttpRequest\",\r\n\t\t\tcontentType: \"text/plain\"\r\n\t\t};\r\n\t\tif(options !== undefined){\r\n\t\t\tluga.merge(config, options);\r\n\t\t}\r\n\t\tif(config.method.toUpperCase() === \"POST\"){\r\n\t\t\tconfig.contentType = luga.XHR_CONST.POST_CONTENT_TYPE;\r\n\t\t}\r\n\r\n\t\tvar self = this;\r\n\t\tself.xhr = new XMLHttpRequest();\r\n\r\n\t\t/**\r\n\t\t * Turn the string containing HTTP headers into an array of objects\r\n\t\t * @param {String} str\r\n\t\t * @return {Array.<luga.xhr.header>}\r\n\t\t */\r\n\t\tvar headersToArray = function(str){\r\n\t\t\tvar headers = str.split(\"\\r\\n\");\r\n\t\t\t// Remove the last element since it's empty\r\n\t\t\theaders.pop();\r\n\t\t\treturn headers.map(function(item){\r\n\t\t\t\tvar tokens = item.split(\":\");\r\n\t\t\t\tvar ret = {\r\n\t\t\t\t\theader: tokens[0]\r\n\t\t\t\t};\r\n\t\t\t\tif(tokens[1] !== undefined){\r\n\t\t\t\t\tret.value = tokens[1].substring(1);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.xhr.response}\r\n\t\t */\r\n\t\tvar assembleResponse = function(){\r\n\t\t\treturn {\r\n\t\t\t\tstatus: self.xhr.status,\r\n\t\t\t\tstatusText: self.xhr.statusText,\r\n\t\t\t\tresponseText: self.xhr.responseText,\r\n\t\t\t\tresponseType: self.xhr.responseType,\r\n\t\t\t\tresponseXML: self.xhr.responseXML,\r\n\t\t\t\theaders: headersToArray(self.xhr.getAllResponseHeaders())\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar checkReadyState = function(){\r\n\t\t\tif(self.xhr.readyState === 4){\r\n\t\t\t\tvar httpStatus = self.xhr.status;\r\n\t\t\t\tif((httpStatus >= 200 && httpStatus <= 300) || (httpStatus === 304)){\r\n\t\t\t\t\tconfig.success(assembleResponse());\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tconfig.error(assembleResponse());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar finalizeRequest = function(url){\r\n\t\t\tself.xhr.onreadystatechange = checkReadyState;\r\n\t\t\tself.xhr.timeout = config.timeout;\r\n\t\t\tself.xhr.setRequestHeader(\"Content-Type\", config.contentType);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(url.substring(0, 4) !== \"http\"){\r\n\t\t\t\t// This may cause issue with CORS so better to avoid on cross-site requests\r\n\t\t\t\tself.xhr.setRequestHeader(\"X-Requested-With\", config.requestedWith);\r\n\t\t\t}\r\n\t\t\tconfig.headers.forEach(function(element){\r\n\t\t\t\tself.xhr.setRequestHeader(element.name, element.value);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tvar finalizeUrl = function(url, params){\r\n\t\t\tvar suffix = \"\";\r\n\t\t\tif(config.cache === false){\r\n\t\t\t\tsuffix += \"_anti-cache=\" + Date.now() + \"&\";\r\n\t\t\t}\r\n\t\t\tif(params !== null && config.method.toUpperCase() === \"GET\"){\r\n\t\t\t\tsuffix += params;\r\n\t\t\t}\r\n\t\t\tif(suffix !== \"\"){\r\n\t\t\t\tif(url.indexOf(\"?\") !== -1){\r\n\t\t\t\t\turl += \"&\";\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\turl += \"?\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn url + suffix;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Aborts the request if it has already been sent\r\n\t\t */\r\n\t\tthis.abort = function(){\r\n\t\t\tself.xhr.abort();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the request is pending. False otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequestPending = function(){\r\n\t\t\treturn self.xhr.readyState !== 4;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {String} url\r\n\t\t * @param {String} [params] Optional parameter which lets you specify the request's body\r\n\t\t *                          See: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send\r\n\t\t */\r\n\t\tthis.send = function(url, params){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(params === undefined){\r\n\t\t\t\tparams = null;\r\n\t\t\t}\r\n\t\t\turl = finalizeUrl(url, params);\r\n\t\t\tself.xhr.open(config.method, url, config.async);\r\n\t\t\tfinalizeRequest(url);\r\n\t\t\tself.xhr.send(params);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jQuery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {String}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {String}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {Boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {Object} event\r\n\t\t * @return {Array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery|undefined} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                          Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jQuery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @return {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {String} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {String} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {String} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {String} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {String} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {String} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {String} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {String} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {String} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {String} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {String} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {String} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {Number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {Number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param {regexp} rex\r\n\t * @param {Number} year\r\n\t * @param {Number} month\r\n\t * @param {Number} day\r\n\t * @param {String} separator\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {String}   dateStr\r\n\t * @param {String}   dateSpecKey\r\n\t * @return {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])/([0-3][0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])/([0-3]?[0-9])/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])/([0-1][0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])/([0-1]?[0-9])/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the given DOM node\r\n\t * @param {HTMLElement} [rootNode]  Optional, default to document.body\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.body;\r\n\t\t}\r\n\t\tvar nodes = rootNode.querySelectorAll(luga.validator.CONST.FORM_SELECTOR);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\tif(element.getAttribute(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\telement.addEventListener(\"submit\", function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: element\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t}, false);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jQuery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options} options\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jQuery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());","/*! \nLuga Data 0.9.7 2018-04-02T15:30:22.702Z\nhttp://www.lugajs.org\nCopyright 2013-2018 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n/**\r\n * @typedef {Object} luga.data.dataSourceChanged\r\n *\r\n * @property {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data\");\r\n\r\n\t/** @type {hash.<luga.data.DataSet>} */\r\n\tluga.data.dataSourceRegistry = {};\r\n\r\n\tluga.data.CONST = {\r\n\t\tCOL_TYPES: [\"date\", \"number\", \"string\"],\r\n\t\tEVENTS: {\r\n\t\t\tCURRENT_ROW_CHANGED: \"currentRowChanged\",\r\n\t\t\tDATA_CHANGED: \"dataChanged\",\r\n\t\t\tDATA_SORTED: \"dataSorted\",\r\n\t\t\tDATA_LOADING: \"dataLoading\",\r\n\t\t\tPRE_DATA_SORTED: \"preDataSorted\",\r\n\t\t\tSTATE_CHANGED: \"stateChanged\",\r\n\t\t\tXHR_ERROR: \"xhrError\"\r\n\t\t},\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tDUPLICATED_UUID: \"Unable to register dataSource. The uuuid was already used: {0}\",\r\n\t\t\tINVALID_FILTER_PARAMETER: \"Invalid filter. You must use a function as filter\",\r\n\t\t\tINVALID_FILTER_ACTION: \"Invalid action from a filter function. A filter must return either a plain object or null (undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_UPDATER_PARAMETER: \"Invalid updater. You must use a function as updater\",\r\n\t\t\tINVALID_UPDATER_ACTION: \"Invalid action from an updater function. An updater must return a plain object (null, undefined, primitives etc are not valid return values)\",\r\n\t\t\tINVALID_STATE: \"luga.data.utils.assembleStateDescription: Unsupported state: {0}\"\r\n\t\t},\r\n\t\tPK_KEY: \"lugaRowId\",\r\n\t\tPK_KEY_PREFIX: \"lugaPk_\",\r\n\t\tXHR_TIMEOUT: 10000 // Keep this accessible to everybody\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a dataSource from the registry\r\n\t * Returns null if no source matches the given id\r\n\t * @param {String} uuid\r\n\t * @return {luga.data.DataSet|luga.data.DetailSet}\r\n\t */\r\n\tluga.data.getDataSource = function(uuid){\r\n\t\tif(luga.data.dataSourceRegistry[uuid] !== undefined){\r\n\t\t\treturn luga.data.dataSourceRegistry[uuid];\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\t/**\r\n\t * Adds a dataSource inside the registry\r\n\t * @param {String}                                uuid\r\n\t * @param {luga.data.DataSet|luga.data.DetailSet} dataSource\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.setDataSource = function(uuid, dataSource){\r\n\t\tif(luga.data.getDataSource(uuid) !== null){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.DUPLICATED_UUID, [uuid]));\r\n\t\t}\r\n\t\tluga.data.dataSourceRegistry[uuid] = dataSource;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.STATE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.STATE = {\r\n\t\tERROR: \"error\",\r\n\t\tLOADING: \"loading\",\r\n\t\tREADY: \"ready\"\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.STATE}  state\r\n\t * @property {Boolean}          isStateLoading\r\n\t * @property {Boolean}          isStateError\r\n\t * @property {Boolean}          isStateReady\r\n\t */\r\n\r\n\t/**\r\n\t * Given a state string, returns an object containing a boolean field for each possible state\r\n\t * @param {null|luga.data.STATE} state\r\n\t * @throw {Exception}\r\n\t * @return {luga.data.stateDescription}\r\n\t */\r\n\tluga.data.utils.assembleStateDescription = function(state){\r\n\t\tif((state !== null) && (luga.data.utils.isValidState(state) === false)){\r\n\t\t\tthrow(luga.string.format(luga.data.CONST.ERROR_MESSAGES.INVALID_STATE, [state]));\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tstate: state,\r\n\t\t\tisStateError: (state === luga.data.STATE.ERROR),\r\n\t\t\tisStateLoading: (state === luga.data.STATE.LOADING),\r\n\t\t\tisStateReady: (state === luga.data.STATE.READY)\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given filter function to each passed row\r\n\t * Return an array of filtered rows\r\n\t * @param {Array.<luga.data.DataSet.row>} rows    Required\r\n\t * @param {function}                      filter  Required\r\n\t * @param {luga.data.DataSet}             dataset Required\r\n\t * @return {Array.<luga.data.DataSet.row>}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.filter = function(rows, filter, dataset){\r\n\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tvar retRows = [];\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar filteredRow = filter(rows[i], i, dataset);\r\n\t\t\t// Row to be removed\r\n\t\t\tif(filteredRow === null){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// Invalid row\r\n\t\t\tif(luga.isPlainObject(filteredRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_FILTER_ACTION);\r\n\t\t\t}\r\n\t\t\t// Valid row\r\n\t\t\tretRows.push(filteredRow);\r\n\t\t}\r\n\t\treturn retRows;\r\n\t};\r\n\r\n\t/**\r\n\t * Apply the given updater function to each passed row\r\n\t * @param {Array.<luga.data.DataSet.row>} rows      Required\r\n\t * @param {function}                      formatter Required\r\n\t * @param {luga.data.DataSet}             dataset   Required\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.utils.update = function(rows, formatter, dataset){\r\n\t\tif(luga.type(formatter) !== \"function\"){\r\n\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t}\r\n\t\tfor(var i = 0; i < rows.length; i++){\r\n\t\t\tvar formattedRow = formatter(rows[i], i, dataset);\r\n\t\t\tif(luga.isPlainObject(formattedRow) === false){\r\n\t\t\t\tthrow(luga.data.CONST.ERROR_MESSAGES.INVALID_UPDATER_ACTION);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed state is supported\r\n\t * @param {String}  state\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.utils.isValidState = function(state){\r\n\t\tfor(var key in luga.data.STATE){\r\n\t\t\tif(luga.data.STATE[key] === state){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n}());\n/* global ActiveXObject */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.xml\");\r\n\r\n\tluga.data.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.data.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.data.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {String} path\r\n\t * @return {Array<Node>}\r\n\t */\r\n\tluga.data.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @return {Object}\r\n\t */\r\n\tluga.data.xml.nodeToHash = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.data.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {Object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.data.xml.nodeToHash(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @return {String}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @return {Boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Serialize a DOM node into a string\r\n\t * @param {Node}   node\r\n\t * @return {String}\r\n\t */\r\n\tluga.data.xml.nodeToString = function(node){\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\treturn node.xml;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar serializer = new XMLSerializer();\r\n\t\t\treturn serializer.serializeToString(node, luga.data.xml.MIME_TYPE);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {String} xmlStr\r\n\t * @return {Document}\r\n\t */\r\n\tluga.data.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.data.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.setProperty(\"SelectionLanguage\", \"XPath\");\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.data.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.row\r\n\t *\r\n\t * @property {String} rowID  Artificial PK\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.currentRowChanged\r\n\t *\r\n\t * @property {String}                oldRowId\r\n\t * @property {luga.data.DataSet.row} oldRow\r\n\t * @property {String}                currentRowId\r\n\t * @property {luga.data.DataSet.row} currentRow\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataSorted\r\n\t *\r\n\t * @property {luga.data.DataSet}    dataSet\r\n\t * @property {Array<String>}        oldSortColumns\r\n\t * @property {luga.data.sort.ORDER} oldSortOrder\r\n\t * @property {Array<String>}        newSortColumns\r\n\t * @property {luga.data.sort.ORDER} newSortOrder\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.stateChanged\r\n\t *\r\n\t * @property {luga.data.DataSet}     dataSet\r\n\t * @property {null|luga.data.STATE}  currentState\r\n\t * @property {null|luga.data.STATE}  oldState\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {Number}                         recordCount\r\n\t * @property {Array.<luga.data.DataSet.row>}  entities\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.options\r\n\t *\r\n\t * @property {String}                uuid       Unique identifier. Required\r\n\t * @property {Array.<object>|object} records    Records to be loaded, either one single object containing value/name pairs, or an array of name/value pairs\r\n\t * @property {function}              formatter  A formatting functions to be called once for each row in the dataSet. Default to null\r\n\t * @property {function}              filter     A filter functions to be called once for each row in the dataSet. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * Base DataSet class\r\n\t *\r\n\t * @param {luga.data.DataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @fire currentRowChanged\r\n\t * @fire dataSorted\r\n\t * @fire preDataSorted\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.DataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_COL_TYPE: \"luga.DataSet.setColumnType(): Invalid type passed {0}\",\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.DataSet: uuid parameter is required\",\r\n\t\t\t\tINVALID_FORMATTER_PARAMETER: \"luga.DataSet: invalid formatter. You must use a function as formatter\",\r\n\t\t\t\tINVALID_FILTER_PARAMETER: \"luga.DataSet: invalid filter. You must use a function as filter\",\r\n\t\t\t\tINVALID_PRIMITIVE: \"luga.DataSet: records can be either an array of objects or a single object. Primitives are not accepted\",\r\n\t\t\t\tINVALID_PRIMITIVE_ARRAY: \"luga.DataSet: records can be either an array of name/value pairs or a single object. Array of primitives are not accepted\",\r\n\t\t\t\tINVALID_ROW_PARAMETER: \"luga.DataSet: invalid row parameter. No available record matches the given row\",\r\n\t\t\t\tINVALID_ROW_ID_PARAMETER: \"luga.DataSet: invalid rowId parameter\",\r\n\t\t\t\tINVALID_ROW_INDEX_PARAMETER: \"luga.DataSet: invalid parameter. Row index is out of range\",\r\n\t\t\t\tINVALID_SORT_COLUMNS: \"luga.DataSet.sort(): Unable to sort dataSet. You must supply one or more column name\",\r\n\t\t\t\tINVALID_SORT_ORDER: \"luga.DataSet.sort(): Unable to sort dataSet. Invalid sort order passed {0}\",\r\n\t\t\t\tINVALID_STATE: \"luga.DataSet: Unsupported state: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif((options.formatter !== undefined) && (luga.type(options.formatter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FORMATTER_PARAMETER);\r\n\t\t}\r\n\t\tif((options.filter !== undefined) && (luga.type(options.filter) !== \"function\")){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t}\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\r\n\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\tthis.records = [];\r\n\r\n\t\t/** @type {hash.<luga.data.DataSet.row>} */\r\n\t\tthis.recordsHash = {};\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.formatter = null;\r\n\t\tif(options.formatter !== undefined){\r\n\t\t\tthis.formatter = options.formatter;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Array.<luga.data.DataSet.row>} */\r\n\t\tthis.filteredRecords = null;\r\n\r\n\t\t/** @type {null|function} */\r\n\t\tthis.filter = null;\r\n\r\n\t\t/** @type {null|luga.data.STATE} */\r\n\t\tthis.state = null;\r\n\r\n\t\tthis.currentRowId = null;\r\n\t\tthis.columnTypes = {};\r\n\t\tthis.lastSortColumns = [];\r\n\t\tthis.lastSortOrder = \"\";\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar deleteAll = function(){\r\n\t\t\tself.filteredRecords = null;\r\n\t\t\tself.records = [];\r\n\t\t\tself.recordsHash = {};\r\n\t\t};\r\n\r\n\t\tvar applyFilter = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tself.filteredRecords = luga.data.utils.filter(self.records, self.filter, self);\r\n\t\t\t\tself.resetCurrentRow();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar applyFormatter = function(){\r\n\t\t\tif(hasFormatter() === true){\r\n\t\t\t\tluga.data.utils.update(self.records, self.formatter, self);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar hasFilter = function(){\r\n\t\t\treturn (self.filter !== null);\r\n\t\t};\r\n\r\n\t\tvar hasFormatter = function(){\r\n\t\t\treturn (self.formatter !== null);\r\n\t\t};\r\n\r\n\t\tvar selectAll = function(){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn self.filteredRecords;\r\n\t\t\t}\r\n\t\t\treturn self.records;\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Remove the current filter function\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.clearFilter = function(){\r\n\t\t\tthis.filter = null;\r\n\t\t\tthis.filteredRecords = null;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Delete records matching the given filter\r\n\t\t * If no filter is passed, delete all records\r\n\t\t * @param {function} [filter]    A filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.delete = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\tdeleteAll();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t\t}\r\n\t\t\t\tvar orig = this.records;\r\n\t\t\t\tfor(var i = 0; i < orig.length; i++){\r\n\t\t\t\t\tif(filter(orig[i], i, this) === null){\r\n\t\t\t\t\t\t// If matches, delete from array and hash\r\n\t\t\t\t\t\tvar rowToDelete = orig[i];\r\n\t\t\t\t\t\tthis.records.splice(i, 1);\r\n\t\t\t\t\t\tdelete this.recordsHash[rowToDelete[luga.data.CONST.PK_KEY]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tapplyFilter();\r\n\t\t\t}\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the column type of the specified column. Either \"date\", \"number\" or \"string\"\r\n\t\t * @param {String} columnName\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getColumnType = function(columnName){\r\n\t\t\tif(this.columnTypes[columnName] !== undefined){\r\n\t\t\t\treturn this.columnTypes[columnName];\r\n\t\t\t}\r\n\t\t\treturn \"string\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DataSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentities: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the current row object\r\n\t\t * By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow() or setCurrentRowIndex().\r\n\t\t * @return {luga.data.DataSet.row|null}\r\n\t\t */\r\n\t\tthis.getCurrentRow = function(){\r\n\t\t\treturn this.getRowById(this.getCurrentRowId());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the rowId of the current row\r\n\t\t * Do not confuse the rowId of a row with the index of the row\r\n\t\t * RowId is a column that contains a unique identifier for the row\r\n\t\t * This identifier does not change if the rows of the dataSet are sorted\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getCurrentRowId = function(){\r\n\t\t\treturn this.currentRowId;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\tvar row = this.getCurrentRow();\r\n\t\t\treturn this.getRowIndex(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the number of records in the dataSet\r\n\t\t * If the dataSet has a filter, returns the number of filtered records\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn selectAll().length;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given unique identifier\r\n\t\t * @param {String} rowId  Required\r\n\t\t * @return {null|luga.data.DataSet.row}\r\n\t\t */\r\n\t\tthis.getRowById = function(rowId){\r\n\t\t\tvar targetRow = this.recordsHash[rowId];\r\n\t\t\tif(targetRow === undefined){\r\n\t\t\t\t// Nothing matches\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif(this.filteredRecords.indexOf(targetRow) !== -1){\r\n\t\t\t\t\treturn targetRow;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t\t// No filter, return the matching row\r\n\t\t\treturn targetRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the row object associated with the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  Required\r\n\t\t * @return {luga.data.DataSet.row}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.getRowByIndex = function(index){\r\n\t\t\tvar fetchedRow;\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tfetchedRow = this.filteredRecords[index];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfetchedRow = this.records[index];\r\n\t\t\t}\r\n\t\t\tif(fetchedRow === undefined){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_INDEX_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn fetchedRow;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the index at which a row can be found in the dataSet, or -1 if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRowIndex = function(row){\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\treturn this.filteredRecords.indexOf(row);\r\n\t\t\t}\r\n\t\t\treturn this.records.indexOf(row);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the name of the column used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortColumn = function(){\r\n\t\t\treturn (this.lastSortColumns && this.lastSortColumns.length > 0) ? this.lastSortColumns[0] : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the order used for the most recent sort\r\n\t\t * Returns an empty string if no sort has been performed yet\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.getSortOrder = function(){\r\n\t\t\treturn this.lastSortOrder ? this.lastSortOrder : \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the dataSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn this.state;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds rows to a dataSet\r\n\t\t * Be aware that the dataSet use passed data by reference\r\n\t\t * That is, it uses those objects as its row object internally. It does not make a copy\r\n\t\t * @param  {Array.<Object>|Object} records   Records to be loaded, either one single object containing value/name pairs, or an array of objects. Required\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.insert = function(records){\r\n\t\t\t// If we only get one record, we put it inside an array anyway,\r\n\t\t\tvar recordsHolder = [];\r\n\t\t\tif(Array.isArray(records) === true){\r\n\t\t\t\trecordsHolder = records;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(records) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE);\r\n\t\t\t\t}\r\n\t\t\t\trecordsHolder.push(records);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < recordsHolder.length; i++){\r\n\t\t\t\t// Ensure we don't have primitive values\r\n\t\t\t\tif(luga.isPlainObject(recordsHolder[i]) === false){\r\n\t\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PRIMITIVE_ARRAY);\r\n\t\t\t\t}\r\n\t\t\t\t// Create new PK\r\n\t\t\t\tvar recordID = luga.data.CONST.PK_KEY_PREFIX + this.records.length;\r\n\t\t\t\trecordsHolder[i][luga.data.CONST.PK_KEY] = recordID;\r\n\t\t\t\tthis.recordsHash[recordID] = recordsHolder[i];\r\n\t\t\t\tthis.records.push(recordsHolder[i]);\r\n\t\t\t}\r\n\t\t\tapplyFormatter();\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId. Persist previous selection if possible\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRow = function(){\r\n\t\t\t// If we have previous selection\r\n\t\t\tif(this.currentRowId !== null){\r\n\t\t\t\t// Try to persist\r\n\t\t\t\tvar targetRow = this.getRowById(this.currentRowId);\r\n\t\t\t\tif(targetRow !== null){\r\n\t\t\t\t\tthis.setCurrentRowId(this.currentRowId);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No previous selection\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Reset the currentRowId to the first record available\r\n\t\t * @fire currentRowChanged\r\n\t\t */\r\n\t\tthis.resetCurrentRowToFirst = function(){\r\n\t\t\t// We have a filter\r\n\t\t\tif(hasFilter() === true){\r\n\t\t\t\tif((this.filteredRecords === null) || (this.filteredRecords.length === 0)){\r\n\t\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// First among the filtered records\r\n\t\t\t\t\tthis.setCurrentRowId(this.filteredRecords[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No filter\r\n\t\t\tif(this.records.length > 0){\r\n\t\t\t\t// First record\r\n\t\t\t\tthis.setCurrentRowId(this.records[0][luga.data.CONST.PK_KEY]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setCurrentRowId(null);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns an array of the internal row objects that store the records in the dataSet\r\n\t\t * Be aware that modifying any property of a returned object results in a modification of the internal records (since records are passed by reference)\r\n\t\t * @param {function} [filter]    An optional filter function. If specified only records matching the filter will be returned. Optional\r\n\t\t *                               The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @return {Array.<luga.data.DataSet.row>}\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.select = function(filter){\r\n\t\t\tif(filter === undefined){\r\n\t\t\t\treturn selectAll();\r\n\t\t\t}\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\treturn luga.data.utils.filter(selectAll(), filter, self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set a column type for a column. Required for proper sorting of numeric or date data.\r\n\t\t * By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper columnType\r\n\t\t * @param {String|Array<String>} columnNames\r\n\t\t * @param {String}               columnType   Either \"date\", \"number\" or \"string\"\r\n\t\t */\r\n\t\tthis.setColumnType = function(columnNames, columnType){\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\tcolumnNames = [columnNames];\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < columnNames.length; i++){\r\n\t\t\t\tvar colName = columnNames[i];\r\n\t\t\t\tif(luga.data.CONST.COL_TYPES.indexOf(columnType) === -1){\r\n\t\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_COL_TYPE, [colName]));\r\n\t\t\t\t}\r\n\t\t\t\tthis.columnTypes[colName] = columnType;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the data set to the row matching the given rowId\r\n\t\t * Throws an exception if the given rowId is invalid\r\n\t\t * If null is passed, no row is selected\r\n\t\t * Triggers a \"currentRowChanged\" notification\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\t// No need to do anything\r\n\t\t\tif(this.currentRowId === rowId){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * @type {luga.data.DataSet.currentRowChanged}\r\n\t\t\t */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldRowId: this.getCurrentRowId(),\r\n\t\t\t\toldRow: this.getRowById(this.currentRowId),\r\n\t\t\t\tcurrentRowId: rowId,\r\n\t\t\t\tcurrentRow: this.getRowById(rowId),\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\t\t\t// Set to null\r\n\t\t\tif((rowId === null) && (this.currentRowId !== null)){\r\n\t\t\t\tthis.currentRowId = null;\r\n\t\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Validate input\r\n\t\t\tif(this.getRowById(rowId) === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_ID_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.currentRowId = rowId;\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.CURRENT_ROW_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the passed row as currentRow\r\n\t\t * Throws an exception if no available record matches the given row\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRow = function(row){\r\n\t\t\tvar fetchedRowId = this.getRowIndex(row);\r\n\t\t\tif(fetchedRowId === -1){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_ROW_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.setCurrentRowId(luga.data.CONST.PK_KEY_PREFIX + fetchedRowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sets the current row of the dataSet to the one matching the given index\r\n\t\t * Throws an exception if the index is out of range\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tthis.setCurrentRow(this.getRowByIndex(index));\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Replace current filter with a new filter functions and apply the new filter\r\n\t\t * Triggers a \"dataChanged\" notification\r\n\t\t * @param {function} filter   A filter functions to be called once for each row in the data set. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @fire currentRowChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setFilter = function(filter){\r\n\t\t\tif(luga.type(filter) !== \"function\"){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_FILTER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.filter = filter;\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set current state\r\n\t\t * This method is not intended to be called outside the dataSet. It's public only to be accessible to subclasses\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tif(luga.data.utils.isValidState(newState) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_STATE, [newState]));\r\n\t\t\t}\r\n\t\t\tvar oldState = this.state;\r\n\t\t\tthis.state = newState;\r\n\r\n\t\t\t/** @type {luga.data.DataSet.stateChanged} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\toldState: oldState,\r\n\t\t\t\tcurrentState: this.state,\r\n\t\t\t\tdataSet: this\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, notificationData);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sorts the dataSet using the given column(s) and sort order\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\t/*\r\n\t\t\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t\t\t */\r\n\t\t\tif((columnNames === undefined) || (columnNames === null)){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_SORT_COLUMNS);\r\n\t\t\t}\r\n\t\t\tif(sortOrder === undefined){\r\n\t\t\t\tsortOrder = luga.data.sort.ORDER.TOG;\r\n\t\t\t}\r\n\t\t\tif(luga.data.sort.isValidSortOrder(sortOrder) === false){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.INVALID_SORT_ORDER, [sortOrder]));\r\n\t\t\t}\r\n\r\n\t\t\tvar sortColumns = assembleSortColumns(columnNames);\r\n\r\n\t\t\tif(sortOrder === luga.data.sort.ORDER.TOG){\r\n\t\t\t\tsortOrder = defineToggleSortOrder(sortColumns);\r\n\t\t\t}\r\n\r\n\t\t\t/** @type {luga.data.DataSet.dataSorted} */\r\n\t\t\tvar notificationData = {\r\n\t\t\t\tdataSet: this,\r\n\t\t\t\toldSortColumns: this.lastSortColumns,\r\n\t\t\t\toldSortOrder: this.lastSortOrder,\r\n\t\t\t\tnewSortColumns: sortColumns,\r\n\t\t\t\tnewSortOrder: sortOrder\r\n\t\t\t};\r\n\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.PRE_DATA_SORTED, notificationData);\r\n\r\n\t\t\tvar sortColumnName = sortColumns[sortColumns.length - 1];\r\n\t\t\tvar sortColumnType = this.getColumnType(sortColumnName);\r\n\t\t\tvar sortFunction = luga.data.sort.getSortStrategy(sortColumnType, sortOrder);\r\n\r\n\t\t\tfor(var i = sortColumns.length - 2; i >= 0; i--){\r\n\t\t\t\tvar columnToSortName = sortColumns[i];\r\n\t\t\t\tvar columnToSortType = this.getColumnType(columnToSortName);\r\n\t\t\t\tvar sortStrategy = luga.data.sort.getSortStrategy(columnToSortType, sortOrder);\r\n\t\t\t\tsortFunction = buildSecondarySortFunction(sortStrategy(columnToSortName), sortFunction);\r\n\t\t\t}\r\n\r\n\t\t\tthis.records.sort(sortFunction);\r\n\t\t\tapplyFilter();\r\n\t\t\tthis.resetCurrentRowToFirst();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_SORTED, notificationData);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\r\n\t\t\t// Keep track of sorting criteria\r\n\t\t\tthis.lastSortColumns = sortColumns.slice(0); // Copy the array.\r\n\t\t\tthis.lastSortOrder = sortOrder;\r\n\r\n\t\t};\r\n\r\n\t\tvar buildSecondarySortFunction = function(funcA, funcB){\r\n\t\t\treturn function(a, b){\r\n\t\t\t\tvar ret = funcA(a, b);\r\n\t\t\t\tif(ret === 0){\r\n\t\t\t\t\tret = funcB(a, b);\r\n\t\t\t\t}\r\n\t\t\t\treturn ret;\r\n\t\t\t};\r\n\t\t};\r\n\r\n\t\tvar assembleSortColumns = function(columnNames){\r\n\t\t\t// If only one column name was specified for sorting\r\n\t\t\t// Do a secondary sort on PK so we get a stable sort order\r\n\t\t\tif(Array.isArray(columnNames) === false){\r\n\t\t\t\treturn [columnNames, luga.data.CONST.PK_KEY];\r\n\t\t\t}\r\n\t\t\telse if(columnNames.length < 2 && columnNames[0] !== luga.data.CONST.PK_KEY){\r\n\t\t\t\tcolumnNames.push(luga.data.CONST.PK_KEY);\r\n\t\t\t\treturn columnNames;\r\n\t\t\t}\r\n\t\t\treturn columnNames;\r\n\t\t};\r\n\r\n\t\tvar defineToggleSortOrder = function(sortColumns){\r\n\t\t\tif((self.lastSortColumns.length > 0) && (self.lastSortColumns[0] === sortColumns[0]) && (self.lastSortOrder === luga.data.sort.ORDER.ASC)){\r\n\t\t\t\treturn luga.data.sort.ORDER.DESC;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\treturn luga.data.sort.ORDER.ASC;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Updates rows inside the dataSet\r\n\t\t * @param {function} filter   Filter function to be used as search criteria. Required\r\n\t\t *                            The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)\r\n\t\t * @param {function} updater  Updater function. Required\r\n\t\t *                            The function is going to be called with this signature: myUpdater(row, rowIndex, dataSet)\r\n\t\t * @fire stateChanged\r\n\t\t * @fire dataChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.update = function(filter, updater){\r\n\t\t\t/** @type {Array.<luga.data.DataSet.row>} */\r\n\t\t\tvar filteredRecords = luga.data.utils.filter(this.records, filter, this);\r\n\t\t\tluga.data.utils.update(filteredRecords, updater, this);\r\n\t\t\tthis.resetCurrentRow();\r\n\t\t\tthis.setState(luga.data.STATE.READY);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\r\n\t\tif(options.filter !== undefined){\r\n\t\t\tthis.setFilter(options.filter);\r\n\t\t}\r\n\t\tif(options.records !== undefined){\r\n\t\t\tthis.insert(options.records);\r\n\t\t}\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.context\r\n\t * @extend luga.data.stateDescription\r\n\t *\r\n\t * @property {null|luga.data.DataSet.row} entity\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DetailSet.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Master dataSet. Required\r\n\t */\r\n\r\n\t/**\r\n\t * DetailSet class\r\n\t * Register itself as observer of the passed dataSet and act as the details in a master/details scenario\r\n\t *\r\n\t * @param {luga.data.DetailSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fire dataChanged\r\n\t * @listen dataChanged\r\n\t * @listen currentRowChanged\r\n\t */\r\n\tluga.data.DetailSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.DetailSet: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.DetailSet: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.DetailSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\t/** @type {luga.data.DataSet.row} */\r\n\t\tthis.row = null;\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.DetailSet.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\tentity: self.row\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the detailSet's current state\r\n\t\t * @return {null|luga.data.STATE}\r\n\t\t */\r\n\t\tthis.getState = function(){\r\n\t\t\treturn self.parentDataSet.getState();\r\n\t\t};\r\n\r\n\t\tthis.fetchRow = function(){\r\n\t\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.fetchRow();\r\n\t\t};\r\n\r\n\t\t/* Fetch row without notifying observers */\r\n\t\tself.row = self.parentDataSet.getCurrentRow();\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.DataSet.dataLoading\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.HttpDataSet.options\r\n\t *\r\n\t * @extend luga.data.DataSet.options\r\n\t * @property {String}    url              URL to be fetched. Default to null\r\n\t * @property {Number}    timeout          Timeout (in milliseconds) for the HTTP request. Default to 10 seconds\r\n\t * @property {Object}    headers          A set of name/value pairs to be used as custom HTTP headers\r\n\t * @property {Boolean}   incrementalLoad  By default calling once .loadData() is called the dataSet discard all the previous records.\r\n\t *                                        Set this to true to keep the old records. Default to false\r\n\t * @property {Boolean}   cache            If set to false, it will force requested pages not to be cached by the browser.\r\n\t *                                        It works by appending \"_={timestamp}\" to the querystring. Default to true\r\n\t */\r\n\r\n\t/**\r\n\t * Base HttpDataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.DataSet\r\n\t * @abstract\r\n\t * @fire dataLoading\r\n\t * @fire xhrError\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.HttpDataSet = function(options){\r\n\t\tluga.extend(luga.data.DataSet, this, [options]);\r\n\t\t/** @type {luga.data.HttpDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tHTTP_DATA_SET_ABSTRACT: \"luga.data.HttpDataSet is an abstract class\",\r\n\t\t\t\tXHR_FAILURE: \"Failed to retrieve: {0}. HTTP status: {1}. Error: {2}\",\r\n\t\t\t\tNEED_URL_TO_LOAD: \"Unable to call loadData(). DataSet is missing a URL\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(this.constructor === luga.data.HttpDataSet){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.HTTP_DATA_SET_ABSTRACT);\r\n\t\t}\r\n\r\n\t\tthis.url = null;\r\n\t\tif(options.url !== undefined){\r\n\t\t\tthis.url = options.url;\r\n\t\t}\r\n\r\n\t\tthis.timeout = luga.data.CONST.XHR_TIMEOUT;\r\n\t\tif(options.timeout !== undefined){\r\n\t\t\tthis.timeout = options.timeout;\r\n\t\t}\r\n\r\n\t\tthis.cache = true;\r\n\t\tif(options.cache !== undefined){\r\n\t\t\tthis.cache = options.cache;\r\n\t\t}\r\n\r\n\t\tthis.headers = [];\r\n\t\tif(options.headers !== undefined){\r\n\t\t\tthis.headers = options.headers;\r\n\t\t}\r\n\r\n\t\tthis.incrementalLoad = false;\r\n\t\tif(options.incrementalLoad !== undefined){\r\n\t\t\tthis.incrementalLoad = options.incrementalLoad;\r\n\t\t}\r\n\r\n\t\t// Concrete implementations can override this\r\n\t\tthis.contentType = \"text/plain\";\r\n\t\tthis.xhrRequest = null;\r\n\r\n\t\t/* Private methods */\r\n\r\n\t\tvar loadUrl = function(){\r\n\t\t\tvar xhrOptions = {\r\n\t\t\t\turl: self.url,\r\n\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\tif(self.incrementalLoad === false){\r\n\t\t\t\t\t\tself.delete();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tself.loadRecords(response);\r\n\t\t\t\t},\r\n\t\t\t\tcontentType: self.contentType,\r\n\t\t\t\ttimeout: self.timeout,\r\n\t\t\t\tcache: self.cache,\r\n\t\t\t\theaders: self.headers,\r\n\t\t\t\terror: self.xhrError\r\n\t\t\t};\r\n\t\t\tself.xhrRequest = new luga.xhr.Request(xhrOptions);\r\n\t\t\tself.xhrRequest.send(self.url);\r\n\t\t};\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Abort any pending XHR request\r\n\t\t */\r\n\t\tthis.cancelRequest = function(){\r\n\t\t\tif(this.xhrRequest !== null){\r\n\t\t\t\tthis.xhrRequest.abort();\r\n\t\t\t\tthis.xhrRequest = null;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the URL that will be used to fetch the data. Returns null if URL is not set\r\n\t\t * @return {String|null}\r\n\t\t */\r\n\t\tthis.getUrl = function(){\r\n\t\t\treturn this.url;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Fires an XHR request to fetch and load the data, notify observers (\"dataLoading\" first, \"dataChanged\" after records are loaded).\r\n\t\t * Throws an exception if URL is not set\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(this.url === null){\r\n\t\t\t\tthrow(CONST.ERROR_MESSAGES.NEED_URL_TO_LOAD);\r\n\t\t\t}\r\n\t\t\tthis.setState(luga.data.STATE.LOADING);\r\n\t\t\tthis.notifyObservers(luga.data.CONST.EVENTS.DATA_LOADING, {dataSet: this});\r\n\t\t\tthis.cancelRequest();\r\n\t\t\tloadUrl();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Abstract method, concrete classes must implement it to extract records from XHR response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @abstract\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the URL that will be used to fetch the data.\r\n\t\t * This method does not load the data into the data set, it merely sets the internal URL.\r\n\t\t * The developer must call loadData() to actually trigger the data loading\r\n\t\t * @param {String} newUrl\r\n\t\t */\r\n\t\tthis.setUrl = function(newUrl){\r\n\t\t\tthis.url = newUrl;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Is called whenever an XHR request fails, set state to error, notify observers (\"xhrError\")\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @fire xhrError\r\n\t\t */\r\n\t\tthis.xhrError = function(response){\r\n\t\t\tself.setState(luga.data.STATE.ERROR);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.XHR_ERROR, {\r\n\t\t\t\tdataSet: self,\r\n\t\t\t\tmessage: luga.string.format(CONST.ERROR_MESSAGES.XHR_FAILURE, [self.url, response.status]),\r\n\t\t\t\tresponse: response\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.JsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String|null}   path      Specifies the path to the data within the JSON structure.\r\n\t *                                     The path is expressed as a set of property names on the objects, separated by dots. Default to null\r\n\t */\r\n\r\n\t/**\r\n\t * JSON dataSet class\r\n\t * @param {luga.data.JsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.JsonDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/json\";\r\n\r\n\t\tthis.path = null;\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|json} */\r\n\t\tthis.rawJson = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw JSON data structure\r\n\t\t * @return {null|json}\r\n\t\t */\r\n\t\tthis.getRawJson = function(){\r\n\t\t\treturn this.rawJson;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the path to be used to extract data out of the JSON data structure\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given JSON, without XHR calls\r\n\t\t * @param {json} json\r\n\t\t */\r\n\t\tthis.loadRawJson = function(json){\r\n\t\t\tself.delete();\r\n\t\t\tloadFromJson(json);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves JSON data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tloadFromJson(JSON.parse(response.responseText));\r\n\t\t};\r\n\r\n\t\tvar loadFromJson = function(json){\r\n\t\t\tself.rawJson = json;\r\n\t\t\tif(self.path === null){\r\n\t\t\t\tself.insert(json);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar records = luga.lookupProperty(json, self.path);\r\n\t\t\t\tif(records !== undefined){\r\n\t\t\t\t\tself.insert(records);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the path to be used to extract data out of the JSON data structure\r\n\t\t * @param {String} path   Data path, expressed as a set of property names on the objects, separated by dots. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.XmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.HttpDataSet.options\r\n\t * @property {String} path  Specifies the XPath expression to be used to extract nodes from the XML document. Default to: \"/\"\r\n\t */\r\n\r\n\t/**\r\n\t * XML dataSet class\r\n\t * @param {luga.data.XmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.XmlDataSet = function(options){\r\n\t\tluga.extend(luga.data.HttpDataSet, this, [options]);\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tvar self = this;\r\n\t\t/** @override */\r\n\t\tthis.contentType = \"application/xml\";\r\n\r\n\t\tthis.path = \"/\";\r\n\t\tif(options.path !== undefined){\r\n\t\t\tthis.path = options.path;\r\n\t\t}\r\n\r\n\t\t/** @type {null|Node} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * Returns the raw XML data\r\n\t\t * @return {null|Node}\r\n\t\t */\r\n\t\tthis.getRawXml = function(){\r\n\t\t\treturn this.rawXml;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns the XPath expression to be used to extract data out of the XML\r\n\t\t * @return {null|String}\r\n\t\t */\r\n\t\tthis.getPath = function(){\r\n\t\t\treturn this.path;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * First delete any existing records, then load data from the given XML, without XHR calls\r\n\t\t * @param {String} xmlStr\r\n\t\t */\r\n\t\tthis.loadRawXml = function(xmlStr){\r\n\t\t\tself.delete();\r\n\t\t\tself.loadRecords({\r\n\t\t\t\tresponseText: xmlStr\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data from an HTTP response, apply the path, if any, extract and load records out of it\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tvar xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\tvar nodes = luga.data.xml.evaluateXPath(xmlDoc, self.path);\r\n\t\t\tvar records = [];\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\trecords.push(luga.data.xml.nodeToHash(nodes[i]));\r\n\t\t\t}\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Set the the XPath expression to be used to extract data out of the XML\r\n\t\t * @param {String} path   XPath expression. Required\r\n\t\t */\r\n\t\tthis.setPath = function(path){\r\n\t\t\tthis.path = path;\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n/**\r\n * @typedef {Object} luga.data.DataSet.context\r\n * @extend luga.data.stateDescription\r\n *\r\n * @property {Number}                         recordCount\r\n * @property {Array.<luga.data.DataSet.row>}  items\r\n */\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * RSS 2.0 dataSet class\r\n\t * @param {luga.data.HttpDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.HttpDataSet\r\n\t */\r\n\tluga.data.Rss2Dataset = function(options){\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\t\t/** @type {luga.data.Rss2Dataset} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {null|string} */\r\n\t\tthis.rawXml = null;\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.channelElements = [\"title\", \"link\", \"description\", \"language\", \"copyright\", \"managingEditor\", \"webMaster\", \"pubDate\", \"lastBuildDate\", \"category\", \"generator\", \"docs\", \"cloud\", \"ttl\", \"image\", \"textInput\", \"skipHours\", \"skipDays\"];\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.itemElements = [\"title\", \"link\", \"description\", \"author\", \"category\", \"comments\", \"enclosure\", \"guid\", \"pubDate\", \"source\"];\r\n\r\n\t\t// Store metadata extracted from <channel>\r\n\t\tthis.channelMeta = {};\r\n\r\n\t\t/**\r\n\t\t * Given an <item> node, extract its content inside a JavaScript object\r\n\t\t * @param {Node} item\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tvar itemToHash = function(item){\r\n\t\t\tvar rec = {};\r\n\t\t\tfor(var i = 0; i < self.itemElements.length; i++){\r\n\t\t\t\tvar element = self.itemElements[i];\r\n\t\t\t\tvar nodes = luga.data.xml.evaluateXPath(item, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\trec[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\treturn rec;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Extract metadata from <channel>\r\n\t\t * @param {Node} channel\r\n\t\t */\r\n\t\tvar setChannelMeta = function(channel){\r\n\t\t\tfor(var i = 0; i < self.channelElements.length; i++){\r\n\t\t\t\tvar element = self.channelElements[i];\r\n\t\t\t\tvar nodes = luga.data.xml.evaluateXPath(channel, element);\r\n\t\t\t\tif(nodes.length > 0){\r\n\t\t\t\t\tself.channelMeta[element] = getTextValue(nodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Turn an array of <items> nodes into an array of records\r\n\t\t * @param {Array.<Node>} nodes\r\n\t\t * @return {Array.<Object>|Object}\r\n\t\t */\r\n\t\tvar extractRecords = function(nodes){\r\n\t\t\tvar records = [];\r\n\t\t\tnodes.forEach(function(element){\r\n\t\t\t\trecords.push(itemToHash(element));\r\n\t\t\t});\r\n\t\t\treturn records;\r\n\t\t};\r\n\r\n\t\t/* Utilities */\r\n\r\n\t\t/**\r\n\t\t * Extract text out of a TEXT or CDATA node\r\n\t\t * @param {Node} node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tfunction getTextValue(node){\r\n\t\t\tvar child = node.childNodes[0];\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\t\treturn child.data;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* Public methods */\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.Rss2Dataset.context}\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = {\r\n\t\t\t\titems: self.select(),\r\n\t\t\t\trecordCount: self.getRecordsCount()\r\n\t\t\t};\r\n\t\t\tvar stateDesc = luga.data.utils.assembleStateDescription(self.getState());\r\n\t\t\tluga.merge(context, stateDesc);\r\n\t\t\tluga.merge(context, self.channelMeta);\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieves XML data, either from an HTTP response\r\n\t\t * @param {luga.xhr.response} response\r\n\t\t * @override\r\n\t\t */\r\n\t\tthis.loadRecords = function(response){\r\n\t\t\tvar xmlDoc = luga.data.xml.parseFromString(response.responseText);\r\n\t\t\tself.rawXml = xmlDoc;\r\n\t\t\t// Extract metadata\r\n\t\t\tvar channelNodes = luga.data.xml.evaluateXPath(xmlDoc, \"//channel\");\r\n\t\t\tsetChannelMeta(channelNodes[0]);\r\n\t\t\t// Insert all records\r\n\t\t\tvar items = luga.data.xml.evaluateXPath(xmlDoc, \"//item\");\r\n\t\t\tvar records = extractRecords(items);\r\n\t\t\tself.insert(records);\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildJsonDataSet.options\r\n\t *\r\n\t * @extend luga.data.JsonDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike JsonDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded JSON dataSet class\r\n\t * @param {luga.data.ChildJsonDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.JsonDataSet\r\n\t */\r\n\tluga.data.ChildJsonDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildJsonDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildJsonDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildJsonDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.JsonDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildJsonDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.JsonDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ChildXmlDataSet.options\r\n\t *\r\n\t * @extend luga.data.XmlDataSet.options\r\n\t * @property {luga.data.DataSet}  parentDataSet   Parent dataSet to be used in a master-detail scenario\r\n\t * @property {String}             url             Unlike XmlDataSet the url here is required and is expected to be a string template like:\r\n\t *                                                http://www.ciccio.com/api/products/{uuid}\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Binded XML dataSet class\r\n\t * @param {luga.data.ChildXmlDataSet.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.XmlDataSet\r\n\t */\r\n\tluga.data.ChildXmlDataSet = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tMISSING_PARENT_DS: \"luga.data.ChildXmlDataSet: parentDataSet parameter is required\",\r\n\t\t\t\tMISSING_URL: \"luga.data.ChildXmlDataSet: url parameter is required\",\r\n\t\t\t\tFAILED_URL_BINDING: \"luga.data.ChildXmlDataSet: unable to generate valid URL: {0}\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_PARENT_DS);\r\n\t\t}\r\n\r\n\t\tif(options.url === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.MISSING_URL);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.data.XmlDataSet, this, [options]);\r\n\r\n\t\t/** @type {luga.data.ChildXmlDataSet} */\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.XmlDataSet} */\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\t\tthis.url = null;\r\n\t\tthis.urlPattern = options.url;\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.row} row\r\n\t\t */\r\n\t\tthis.fetchData = function(row){\r\n\t\t\tvar bindUrl = luga.string.populate(self.urlPattern, row);\r\n\t\t\tif(bindUrl === self.urlPattern){\r\n\t\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.FAILED_URL_BINDING, [bindUrl]));\r\n\t\t\t}\r\n\t\t\tself.setUrl(bindUrl);\r\n\t\t\tself.loadData();\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tif(data.currentRow !== null){\r\n\t\t\t\tself.fetchData(data.currentRow);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.delete();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.context\r\n\t *\r\n\t * @extend luga.data.DataSet.context\r\n\t * @property {Number} currentPageNumber        The current page index. Starting at 1\r\n\t * @property {Number} currentPageRecordCount   The total number of records in the current page\r\n\t * @property {Number} pageCount                The total number of pages required to display all of the data\r\n\t * @property {Number} pageSize                 The maximum number of items that can be in a page\r\n\t * @property {Number} currentOffsetStart       Zero-based offset of the first record inside the current page\r\n\t * @property {Number} currentOffsetEnd         Zero-based offset of the last record inside the current page\r\n\t */\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.PagedView.options\r\n\t *\r\n\t * @property {String}            uuid           Unique identifier. Required\r\n\t * @property {luga.data.DataSet} parentDataSet  Instance of a dataSet. Required\r\n\t * @property {Number}            pageSize       The max number of rows in a given page. Default to 10\r\n\t */\r\n\r\n\t/*\r\n\t *  PagedView class\r\n\t *  Works by reading a dataSet and extracting information out of it in order to generate additional information that can be used for paging\r\n\t *\r\n\t * @param {luga.data.PagedView.options} options\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t */\r\n\tluga.data.PagedView = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_UUID_PARAMETER: \"luga.data.PagedView: id parameter is required\",\r\n\t\t\t\tINVALID_DS_PARAMETER: \"luga.data.PagedView: parentDataSet parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.uuid === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_UUID_PARAMETER);\r\n\t\t}\r\n\t\tif(options.parentDataSet === undefined){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_DS_PARAMETER);\r\n\t\t}\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\t/** @type {luga.data.PagedView} */\r\n\t\tvar self = this;\r\n\r\n\t\tthis.uuid = options.uuid;\r\n\t\tthis.parentDataSet = options.parentDataSet;\r\n\t\tthis.parentDataSet.addObserver(this);\r\n\r\n\t\tluga.data.setDataSource(this.uuid, this);\r\n\r\n\t\tvar pageSize = 10;\r\n\t\tif(options.pageSize !== undefined){\r\n\t\t\tpageSize = options.pageSize;\r\n\t\t}\r\n\r\n\t\tvar currentPage = 1;\r\n\t\tvar currentOffsetStart = 0;\r\n\r\n\t\t/**\r\n\t\t * @return {luga.data.PagedView.context}\r\n\t\t */\r\n\t\tthis.getContext = function(){\r\n\t\t\tvar context = self.parentDataSet.getContext();\r\n\t\t\tcontext.entities = context.entities.slice(self.getCurrentOffsetStart(), self.getCurrentOffsetEnd() + 1);\r\n\t\t\t// Additional fields\r\n\t\t\tcontext.currentPageNumber = self.getCurrentPageIndex();\r\n\t\t\tcontext.currentPageRecordCount = context.entities.length;\r\n\t\t\tcontext.currentOffsetEnd = self.getCurrentOffsetEnd();\r\n\t\t\tcontext.currentOffsetStart = self.getCurrentOffsetStart();\r\n\t\t\tcontext.pageSize = self.getPageSize();\r\n\t\t\tcontext.pageCount = self.getPagesCount();\r\n\t\t\treturn context;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the last record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetEnd = function(){\r\n\t\t\tvar offSet = self.getCurrentOffsetStart() + self.getPageSize() - 1;\r\n\t\t\tif(offSet > self.getRecordsCount()){\r\n\t\t\t\toffSet = self.getRecordsCount();\r\n\t\t\t}\r\n\t\t\treturn offSet;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the zero-based offset of the first record inside the current page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentOffsetStart = function(){\r\n\t\t\treturn currentOffsetStart;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the current page index. Starting at 1\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentPageIndex = function(){\r\n\t\t\treturn currentPage;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the total number of pages required to display all of the data\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPagesCount = function(){\r\n\t\t\treturn parseInt((self.parentDataSet.getRecordsCount() + self.getPageSize() - 1) / self.getPageSize());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return the maximum number of items that can be in a page\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getPageSize = function(){\r\n\t\t\treturn pageSize;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the given page number\r\n\t\t * Fails silently if the given page number is out of range\r\n\t\t * It also change the index of the current row to match the first record in the page\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.goToPage = function(pageNumber){\r\n\t\t\tif(self.isPageInRange(pageNumber) === false){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(pageNumber === self.getCurrentPageIndex()){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrentPage = pageNumber;\r\n\t\t\tcurrentOffsetStart = ((pageNumber - 1) * self.getPageSize());\r\n\r\n\t\t\tself.setCurrentRowIndex(self.getCurrentOffsetStart());\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the next page\r\n\t\t * Fails silently if the current page is the last one\r\n\t\t */\r\n\t\tthis.goToNextPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() + 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Navigate to the previous page\r\n\t\t * Fails silently if the current page is the first one\r\n\t\t */\r\n\t\tthis.goToPrevPage = function(){\r\n\t\t\tself.goToPage(self.getCurrentPageIndex() - 1);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Return true if the given page is within range. False otherwise\r\n\t\t * @param {Number} pageNumber\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPageInRange = function(pageNumber){\r\n\t\t\tif(pageNumber < 1 || pageNumber > self.getPagesCount()){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * To be used for type checking\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isPagedView = function(){\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t/* Proxy methods */\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getCurrentRowIndex = function(){\r\n\t\t\treturn self.parentDataSet.getCurrentRowIndex();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @return {Number}\r\n\t\t */\r\n\t\tthis.getRecordsCount = function(){\r\n\t\t\treturn self.parentDataSet.getRecordsCount();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet .loadData() method, if any\r\n\t\t * @fire dataLoading\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.loadData = function(){\r\n\t\t\tif(self.parentDataSet.loadData !== undefined){\r\n\t\t\t\tself.parentDataSet.loadData();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {String|null} rowId  Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowId = function(rowId){\r\n\t\t\tself.parentDataSet.setCurrentRowId(rowId);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {Number} index  New index. Required\r\n\t\t * @fire currentRowChanged\r\n\t\t * @throw {Exception}\r\n\t\t */\r\n\t\tthis.setCurrentRowIndex = function(index){\r\n\t\t\tself.parentDataSet.setCurrentRowIndex(index);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * @param {null|luga.data.STATE} newState\r\n\t\t * @fire stateChanged\r\n\t\t */\r\n\t\tthis.setState = function(newState){\r\n\t\t\tself.parentDataSet.setState(newState);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Call the parent dataSet\r\n\t\t * Be aware this only sort the data, it does not affects pagination\r\n\t\t * @param {String|Array<String>}  columnNames             Required, either a single column name or an array of names\r\n\t\t * @param {luga.data.sort.ORDER} [sortOrder=\"toggle\"]     Either \"ascending\", \"descending\" or \"toggle\". Optional, default to \"toggle\"\r\n\t\t * @fire preDataSorted\r\n\t\t * @fire dataSorted\r\n\t\t * @fire dataChanged\r\n\t\t */\r\n\t\tthis.sort = function(columnNames, sortOrder){\r\n\t\t\tself.parentDataSet.sort(columnNames, sortOrder);\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.DATA_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.notifyObservers(luga.data.CONST.EVENTS.STATE_CHANGED, {dataSource: this});\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region\");\r\n\r\n\tluga.data.region.CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tDATA_SOURCE_UUID: \"data-lugaregion-datasource-uuid\",\r\n\t\t\tREGION: \"data-lugaregion\",\r\n\t\t\tREGION_TYPE: \"data-lugaregion-type\",\r\n\t\t\tTEMPLATE_ID: \"data-lugaregion-template-id\",\r\n\t\t\tTRAITS: \"data-lugaregion-traits\",\r\n\t\t\tREGION_REFERENCE: \"luga-region-reference\"\r\n\t\t},\r\n\t\tDEFAULT_REGION_TYPE: \"luga.data.region.Handlebars\",\r\n\t\tDEFAULT_TRAITS: [\r\n\t\t\t\"luga.data.region.traits.select\",\r\n\t\t\t\"luga.data.region.traits.setRowId\",\r\n\t\t\t\"luga.data.region.traits.setRowIndex\",\r\n\t\t\t\"luga.data.region.traits.sort\"\r\n\t\t],\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tMISSING_DATA_SOURCE_ATTRIBUTE: \"Missing required data-lugaregion-datasource-uuid attribute inside region\",\r\n\t\t\tMISSING_DATA_SOURCE: \"Unable to find datasource {0}\",\r\n\t\t\tMISSING_REGION_TYPE_FUNCTION: \"Failed to create region. Unable to find a constructor function named: {0}\"\r\n\t\t},\r\n\t\tEVENTS: {\r\n\t\t\tREGION_RENDERED: \"regionRendered\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tREGION: \"*[data-lugaregion='true']\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {Boolean} autoregister  Determine if we call luga.data.region.init() on luga.dom.ready()\r\n\t */\r\n\r\n\t/**\r\n\t * @type {luga.data.region.options}\r\n\t */\r\n\tvar config = {\r\n\t\tautoregister: true\r\n\t};\r\n\r\n\t/**\r\n\t * Change current configuration\r\n\t * @param {luga.data.region.options} options\r\n\t * @return {luga.data.region.options}\r\n\t */\r\n\tluga.data.region.setup = function(options){\r\n\t\tluga.merge(config, options);\r\n\t\treturn config;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, returns the region object associated to it\r\n\t * Returns undefined if the node is not associated to a region\r\n\t * @param {HTMLElement} node\r\n\t * @return {undefined|luga.data.region.Base}\r\n\t */\r\n\tluga.data.region.getReferenceFromNode = function(node){\r\n\t\treturn node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE];\r\n\t};\r\n\r\n\t/**\r\n\t * Given a DOM node, initialize the relevant Region handler\r\n\t * @param {HTMLElement} node\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.init = function(node){\r\n\t\tvar dataSourceId = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID);\r\n\t\tif(dataSourceId === null){\r\n\t\t\tthrow(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE_ATTRIBUTE);\r\n\t\t}\r\n\t\tvar dataSource = luga.data.getDataSource(dataSourceId);\r\n\t\tif(dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [dataSourceId]));\r\n\t\t}\r\n\t\tvar regionType = node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_TYPE);\r\n\t\tif(regionType === null){\r\n\t\t\tregionType = luga.data.region.CONST.DEFAULT_REGION_TYPE;\r\n\t\t}\r\n\t\tvar RegionClass = luga.lookupFunction(regionType);\r\n\t\tif(RegionClass === undefined){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_REGION_TYPE_FUNCTION, [regionType]));\r\n\t\t}\r\n\t\tnew RegionClass({node: node});\r\n\t};\r\n\r\n\t/**\r\n\t * Bootstrap any region contained within the given node\r\n\t * @param {HTMLElement|undefined} [rootNode]   Optional, default to <body>\r\n\t */\r\n\tluga.data.region.initRegions = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = document.querySelector(\"body\");\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(rootNode !== null){\r\n\t\t\tvar nodes = rootNode.querySelectorAll(luga.data.region.CONST.SELECTORS.REGION);\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\tluga.data.region.init(nodes[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.region.utils\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.description\r\n\t *\r\n\t * @property {HTMLElement}                                node   A DOM node containing the region.\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds     DataSource\r\n\t */\r\n\r\n\t/**\r\n\t * Given a region instance, returns an object containing its critical data\r\n\t * @param {luga.data.region.Base} region\r\n\t * @return {luga.data.region.description}\r\n\t */\r\n\tluga.data.region.utils.assembleRegionDescription = function(region){\r\n\t\treturn {\r\n\t\t\tnode: region.config.node,\r\n\t\t\tds: region.dataSource\r\n\t\t};\r\n\t};\r\n\r\n\tluga.dom.ready(function(){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(config.autoregister === true){\r\n\t\t\tluga.data.region.initRegions();\r\n\t\t}\r\n\t});\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.options\r\n\t *\r\n\t * @property {HTMLElement } node                          The DOM node that will contain the region. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet} ds   DataSource. Required if dsUuid is not specified\r\n\t * @property {String} dsUuid                              DataSource's uuid. Can be specified inside the data-lugaregion-datasource attribute too. Required if ds is not specified\r\n\t * @property {Array.<String>} [undefined]  traits         An array of function names that will be called every time the Region is rendered. Optional\r\n\t * @property {String} templateId                          Id of HTML element containing the template. Can be specified inside the data-lugaregion-template attribute too.\r\n\t *                                                        If not available it assumes the node contains the template\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract Region class\r\n\t * Concrete implementations must extend this and implement the .render() method\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @extend luga.Notifier\r\n\t * @fire regionRendered\r\n\t * @listen dataChanged\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Base = function(options){\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_TRAIT: \"luga.data.region invalid trait: {0} is not a function\",\r\n\t\t\t\tMISSING_NODE: \"luga.data.region was unable find the region node\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.node === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.MISSING_NODE);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\tnode: null, // Required\r\n\t\t\t// Either: custom attribute or incoming option\r\n\t\t\tdsUuid: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.DATA_SOURCE_UUID) || null,\r\n\t\t\ttemplateId: options.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TEMPLATE_ID) || null,\r\n\t\t\t// Either: incoming option or null\r\n\t\t\ttraits: options.traits || null,\r\n\t\t\tds: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\r\n\t\t/** @type {luga.data.DataSet|luga.data.DetailSet} */\r\n\t\tthis.dataSource = null;\r\n\t\tif(this.config.ds !== null){\r\n\t\t\t// We've got a direct reference from the options\r\n\t\t\tthis.dataSource = this.config.ds;\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// We've got a dataSource Id\r\n\t\t\tthis.dataSource = luga.data.getDataSource(this.config.dsUuid);\r\n\t\t}\r\n\t\tif(this.dataSource === null){\r\n\t\t\tthrow(luga.string.format(luga.data.region.CONST.ERROR_MESSAGES.MISSING_DATA_SOURCE, [this.config.dsId]));\r\n\t\t}\r\n\t\tthis.dataSource.addObserver(this);\r\n\r\n\t\t/** @type {Array.<String>} */\r\n\t\tthis.traits = luga.data.region.CONST.DEFAULT_TRAITS;\r\n\t\t// Extract traits from custom attribute, if any\r\n\t\tvar attrTraits = this.config.node.getAttribute(luga.data.region.CONST.CUSTOM_ATTRIBUTES.TRAITS);\r\n\t\tif(attrTraits !== null){\r\n\t\t\tthis.traits = this.traits.concat(attrTraits.split(\",\"));\r\n\t\t}\r\n\t\tif(this.config.traits !== null){\r\n\t\t\tthis.traits = this.traits.concat(this.config.traits);\r\n\t\t}\r\n\r\n\t\t// Store reference inside node\r\n\t\tthis.config.node[luga.data.region.CONST.CUSTOM_ATTRIBUTES.REGION_REFERENCE] = this;\r\n\r\n\t\tthis.applyTraits = function(){\r\n\t\t\tvar traitData = {\r\n\t\t\t\tnode: this.config.node,\r\n\t\t\t\tdataSource: this.dataSource\r\n\t\t\t};\r\n\t\t\tfor(var i = 0; i < this.traits.length; i++){\r\n\t\t\t\tvar func = luga.lookupFunction(this.traits[i]);\r\n\t\t\t\tif(func !== undefined){\r\n\t\t\t\t\tfunc(traitData);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(this.CONST.ERROR_MESSAGES.INVALID_TRAIT, [this.traits[i]]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t * @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t// Concrete implementations must overwrite this\r\n\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.currentRowChanged} data\r\n\t\t */\r\n\t\tthis.onCurrentRowChangedHandler = function(data){\r\n\t\t\tself.applyTraits();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.render();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Handlebars Region class\r\n\t * @param {luga.data.Region.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.region.Base\r\n\t * @fire regionRendered\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.region.Handlebars = function(options){\r\n\r\n\t\tluga.extend(luga.data.region.Base, this, [options]);\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.HANDLEBARS_ERROR_MESSAGES = {\r\n\t\t\tMISSING_HANDLEBARS: \"Unable to find Handlebars\",\r\n\t\t\tMISSING_TEMPLATE_FILE: \"luga.data.region.Handlebars was unable to retrieve file: {0} containing an Handlebars template\",\r\n\t\t\tMISSING_TEMPLATE_NODE: \"luga.data.region.Handlebars was unable find an HTML element with id: {0} containing an Handlebars template\"\r\n\t\t};\r\n\r\n\t\tthis.template = \"\";\r\n\r\n\t\t/**\r\n\t\t * @param {HTMLElement} node\r\n\t\t */\r\n\t\tvar fetchTemplate = function(node){\r\n\t\t\t// Inline template\r\n\t\t\tif(self.config.templateId === null){\r\n\t\t\t\tself.template = Handlebars.compile(node.innerHTML);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tvar templateNode = document.getElementById(self.config.templateId);\r\n\t\t\t\tif(templateNode === null){\r\n\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_NODE, [self.config.templateId]));\r\n\t\t\t\t}\r\n\t\t\t\tvar templateSrc = templateNode.getAttribute(\"src\");\r\n\t\t\t\tif(templateSrc === null){\r\n\t\t\t\t\t// Embed template\r\n\t\t\t\t\tself.template = Handlebars.compile(templateNode.innerHTML);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// External template\r\n\t\t\t\t\tvar xhrOptions = {\r\n\t\t\t\t\t\tsuccess: function(response){\r\n\t\t\t\t\t\t\tself.template = Handlebars.compile(response.responseText);\r\n\t\t\t\t\t\t\tself.render();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: function(response){\r\n\t\t\t\t\t\t\tthrow(luga.string.format(self.CONST.HANDLEBARS_ERROR_MESSAGES.MISSING_TEMPLATE_FILE, [templateSrc]));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar xhr = new luga.xhr.Request(xhrOptions);\r\n\t\t\t\t\txhr.send(templateSrc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tthis.generateHtml = function(){\r\n\t\t\treturn this.template(this.dataSource.getContext());\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t @override\r\n\t\t @fire regionRendered\r\n\t\t */\r\n\t\tthis.render = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.template !== \"\"){\r\n\t\t\t\tthis.config.node.innerHTML = this.generateHtml();\r\n\t\t\t\tthis.applyTraits();\r\n\t\t\t\tvar desc = luga.data.region.utils.assembleRegionDescription(this);\r\n\t\t\t\tthis.notifyObservers(luga.data.region.CONST.EVENTS.REGION_RENDERED, desc);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tfetchTemplate(this.config.node);\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.region.traits\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.region.traits.options\r\n\t *\r\n\t * @property {HTMLElement}                            node          A DOM node. Required\r\n\t * @property {luga.data.DataSet|luga.data.DetailSet}  dataSource    DataSource. Required\r\n\t */\r\n\r\n\tvar CONST = {\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tSELECT: \"data-lugaregion-select\",\r\n\t\t\tSET_ROW_ID: \"data-lugaregion-setrowid\",\r\n\t\t\tSET_ROW_INDEX: \"data-lugaregion-setrowindex\",\r\n\t\t\tSORT: \"data-lugaregion-sort\"\r\n\t\t},\r\n\t\tSELECTORS: {\r\n\t\t\tSELECT: \"*[data-lugaregion-select]\",\r\n\t\t\tSET_ROW_ID: \"*[data-lugaregion-setrowid]\",\r\n\t\t\tSET_ROW_INDEX: \"*[data-lugaregion-setrowindex]\",\r\n\t\t\tSORT: \"*[data-lugaregion-sort]\"\r\n\t\t}\r\n\t};\r\n\r\n\tvar removeCssClass = function(nodes, className){\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tnodes[i].classList.remove(className);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-select\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.select = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SELECT);\r\n\t\tif(options.dataSource.getCurrentRowIndex === undefined){\r\n\t\t\t// It's a detailSet, abort\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif(nodes.length > 0){\r\n\t\t\tvar cssClass = nodes[0].getAttribute(CONST.CUSTOM_ATTRIBUTES.SELECT);\r\n\t\t\tnodes[0].classList.remove(cssClass);\r\n\t\t\t// Default to first row\r\n\t\t\tvar index = 0;\r\n\r\n\t\t\tif(options.dataSource.getCurrentRowIndex() === -1){\r\n\t\t\t\t// Remove class from everyone\r\n\t\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tindex = options.dataSource.getCurrentRowIndex();\r\n\t\t\t\t// Apply CSS\r\n\t\t\t\tnodes[index].classList.add(cssClass);\r\n\t\t\t}\r\n\r\n\t\t\t// Attach click event to all nodes\r\n\t\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\t\tvar element = nodes[i];\r\n\t\t\t\taddSelectEvent(element, cssClass, nodes);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar addSelectEvent = function(element, cssClass, nodes){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tremoveCssClass(nodes, cssClass);\r\n\t\t\telement.classList.add(cssClass);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowid\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowId = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_ID);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\tvar rowId = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_ID);\r\n\t\t\taddRowIdEvent(element, rowId, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tvar addRowIdEvent = function(element, rowId, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowId(rowId);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-setrowindex\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.setRowIndex = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SET_ROW_INDEX);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\tvar rowIndex = parseInt(element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SET_ROW_INDEX), 10);\r\n\t\t\taddRowIndexEvent(element, rowIndex, options.dataSource);\r\n\t\t}\r\n\t};\r\n\r\n\tvar addRowIndexEvent = function(element, rowIndex, dataSource){\r\n\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\tevent.preventDefault();\r\n\t\t\tdataSource.setCurrentRowIndex(rowIndex);\r\n\t\t}, false);\r\n\t};\r\n\r\n\t/**\r\n\t * Handles data-lugaregion-sort\r\n\t * @param {luga.data.region.traits.options} options\r\n\t */\r\n\tluga.data.region.traits.sort = function(options){\r\n\t\tvar nodes = options.node.querySelectorAll(CONST.SELECTORS.SORT);\r\n\t\tfor(var i = 0; i < nodes.length; i++){\r\n\t\t\tvar element = nodes[i];\r\n\t\t\telement.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar sortCol = element.getAttribute(CONST.CUSTOM_ATTRIBUTES.SORT);\r\n\t\t\t\toptions.dataSource.sort(sortCol);\r\n\t\t\t}, false);\r\n\t\t}\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.sort\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.sort.ORDER\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.sort.ORDER = {\r\n\t\tASC: \"ascending\",\r\n\t\tDESC: \"descending\",\r\n\t\tTOG: \"toggle\"\r\n\t};\r\n\r\n\tvar CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tUNSUPPORTED_DATA_TYPE: \"luga.data.sort. Unsupported dataType: {0\",\r\n\t\t\tUNSUPPORTED_SORT_ORDER: \"luga.data.sort. Unsupported sortOrder: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed order is supported\r\n\t * @param {String}  sortOrder\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.data.sort.isValidSortOrder = function(sortOrder){\r\n\t\tfor(var key in luga.data.sort.ORDER){\r\n\t\t\tif(luga.data.sort.ORDER[key] === sortOrder){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * Retrieve the relevant sort function matching the given combination of dataType and sortOrder\r\n\t * @param {String}               dataType\r\n\t * @param {luga.data.sort.ORDER} sortOrder\r\n\t * @return {function}\r\n\t */\r\n\tluga.data.sort.getSortStrategy = function(dataType, sortOrder){\r\n\t\tif(luga.data.sort[dataType] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_DATA_TYPE, [dataType]));\r\n\t\t}\r\n\t\tif(luga.data.sort[dataType][sortOrder] === undefined){\r\n\t\t\tthrow(luga.string.format(CONST.ERROR_MESSAGES.UNSUPPORTED_SORT_ORDER, [sortOrder]));\r\n\t\t}\r\n\t\treturn luga.data.sort[dataType][sortOrder];\r\n\t};\r\n\r\n\t/*\r\n\t Lovingly adapted from Spry\r\n\t Very special thanks to Kin Blas https://github.com/jblas\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.sort.date\");\r\n\r\n\tluga.data.sort.date.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dA - dB;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.date.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\tvar dA = luga.lookupProperty(a, prop);\r\n\t\t\tvar dB = luga.lookupProperty(b, prop);\r\n\t\t\tdA = dA ? (new Date(dA)) : 0;\r\n\t\t\tdB = dB ? (new Date(dB)) : 0;\r\n\t\t\treturn dB - dA;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.number\");\r\n\r\n\tluga.data.sort.number.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\treturn a - b;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.number.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\treturn b - a;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.namespace(\"luga.data.sort.string\");\r\n\r\n\tluga.data.sort.string.ascending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? 1 : -1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t};\r\n\t};\r\n\r\n\tluga.data.sort.string.descending = function(prop){\r\n\t\treturn function(a, b){\r\n\t\t\ta = luga.lookupProperty(a, prop);\r\n\t\t\tb = luga.lookupProperty(b, prop);\r\n\t\t\tif(a === undefined || b === undefined){\r\n\t\t\t\treturn (a === b) ? 0 : (a ? -1 : 1);\r\n\t\t\t}\r\n\t\t\tvar tA = a.toString();\r\n\t\t\tvar tB = b.toString();\r\n\t\t\tvar tAlower = tA.toLowerCase();\r\n\t\t\tvar tBlower = tB.toLowerCase();\r\n\t\t\tvar minLen = tA.length > tB.length ? tB.length : tA.length;\r\n\t\t\tfor(var i = 0; i < minLen; i++){\r\n\t\t\t\tvar aLowerChar = tAlower.charAt(i);\r\n\t\t\t\tvar bLowerChar = tBlower.charAt(i);\r\n\t\t\t\tvar aChar = tA.charAt(i);\r\n\t\t\t\tvar bChar = tB.charAt(i);\r\n\t\t\t\tif(aLowerChar > bLowerChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aLowerChar < bLowerChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar > bChar){\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\telse if(aChar < bChar){\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tA.length === tB.length){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\telse if(tA.length > tB.length){\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn 1;\r\n\t\t};\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.PagingBar.options\r\n\t *\r\n\t * @property {luga.data.PagedView}     pagedView  Instance of a pagedView that will be controlled by the widget. Required\r\n\t * @property {Element}                 node       DOM element that will contain the widget. Required\r\n\t * @property {luga.data.PAGING_STYLE}  style      Style to be used for the widget, either \"luga-pagingBarLinks\" or \"luga-pagingBarPages\". Default to \"luga-pagingBarLinks\"\r\n\t * @property {String}                  nextText   Text to be used for \"next\" links. Default to \">\"\r\n\t * @property {String}                  prevText   Text to be used for \"previous\" links. Default to \"<\"\r\n\t * @property {String}                  separator  Text to be used to separate links. Default to \" | \"\r\n\t * @property {Number}                  maxLinks   Maximum number of links to show. Default to 10\r\n\t */\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {String} luga.data.PAGING_STYLE\r\n\t * @enum {String}\r\n\t */\r\n\tluga.data.PAGING_STYLE = {\r\n\t\tLINKS: \"luga-pagingBarLinks\",\r\n\t\tPAGES: \"luga-pagingBarPages\"\r\n\t};\r\n\r\n\t/**\r\n\t * Return true if the passed style is supported\r\n\t * @param {String}  style\r\n\t * @return {Boolean}\r\n\t */\r\n\tvar isValidStyle = function(style){\r\n\t\tfor(var key in luga.data.PAGING_STYLE){\r\n\t\t\tif(luga.data.PAGING_STYLE[key] === style){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * PagingBar widget\r\n\t * Given a pagedView, create a fully fledged pagination bar\r\n\t *\r\n\t * @param {luga.data.widgets.PagingBar.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.data.widgets.PagingBar = function(options){\r\n\r\n\t\tvar CONST = {\r\n\t\t\tCSS_BASE_CLASS: \"luga-pagingBar\",\r\n\t\t\tSAFE_HREF: \"javascript:;\",\r\n\t\t\tLINKS_SEPARATOR: \" - \",\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_PAGED_VIEW_PARAMETER: \"luga.data.widgets.PagingBar: pagedView parameter is required. Must be an instance of luga.data.PagedView\",\r\n\t\t\t\tINVALID_NODE_PARAMETER: \"luga.data.widgets.PagingBar: node parameter is required. Must be a DOM Element\",\r\n\t\t\t\tINVALID_STYLE_PARAMETER: \"luga.data.widgets.PagingBar: style parameter must be of type luga.data.PAGING_STYLE\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif(options.pagedView === undefined || (options.pagedView.isPagedView === undefined || options.pagedView.isPagedView() === false)){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_PAGED_VIEW_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.node === undefined || options.node instanceof Element === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_NODE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tif(options.style !== undefined && isValidStyle(options.style) === false){\r\n\t\t\tthrow(CONST.ERROR_MESSAGES.INVALID_STYLE_PARAMETER);\r\n\t\t}\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.PagedView} */\r\n\t\t\tpagedView: undefined,\r\n\t\t\t/** @type {Element} */\r\n\t\t\tnode: undefined,\r\n\t\t\tstyle: luga.data.PAGING_STYLE.LINKS,\r\n\t\t\tnextText: \">\",\r\n\t\t\tprevText: \"<\",\r\n\t\t\tseparator: \" | \",\r\n\t\t\tmaxLinks: 10\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/**\r\n\t\t * @type {luga.data.widgets.PagingBar}\r\n\t\t */\r\n\t\tvar self = this;\r\n\t\t// Alias/shortcuts\r\n\t\tvar pagedView = self.config.pagedView;\r\n\t\tvar node = self.config.node;\r\n\r\n\t\tpagedView.addObserver(this);\r\n\r\n\t\t// Add CSS\r\n\t\tnode.classList.add(CONST.CSS_BASE_CLASS);\r\n\t\tnode.classList.add(self.config.style);\r\n\r\n\t\tvar render = function(){\r\n\t\t\t// Reset UI\r\n\t\t\tnode.innerHTML = \"\";\r\n\t\t\tvar currentPageIndex = pagedView.getCurrentPageIndex();\r\n\r\n\t\t\tif(pagedView.getPagesCount() > 1){\r\n\t\t\t\trenderPrevLink(self.config.prevText, currentPageIndex);\r\n\t\t\t\trenderMainLinks(self.config.maxLinks, self.config.style);\r\n\t\t\t\trenderNextLink(self.config.nextText, currentPageIndex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar renderPrevLink = function(text, pageIndex){\r\n\r\n\t\t\tvar textNode = document.createTextNode(text);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex - 1);\r\n\r\n\t\t\tif(pageIndex !== 1){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t};\r\n\r\n\t\tvar renderNextLink = function(text, pageIndex){\r\n\t\t\tnode.appendChild(document.createTextNode(\" \"));\r\n\t\t\tvar textNode = document.createTextNode(text);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\taddGoToPageEvent(linkNode, pageIndex + 1);\r\n\r\n\t\t\tif(pageIndex !== pagedView.getPagesCount()){\r\n\t\t\t\tnode.appendChild(linkNode);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tnode.appendChild(textNode);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar renderMainLinks = function(maxLinks, style){\r\n\t\t\tvar pageSize = pagedView.getPageSize();\r\n\t\t\tvar recordsCount = pagedView.getRecordsCount();\r\n\t\t\tvar pagesCount = pagedView.getPagesCount();\r\n\t\t\tvar currentPageIndex = pagedView.getCurrentPageIndex();\r\n\t\t\tvar endIndex = getEndIndex(currentPageIndex, maxLinks, pagesCount);\r\n\r\n\t\t\t// Page numbers are between 1 and n. So the loop start from 1\r\n\t\t\tfor(var i = 1; i < (endIndex + 1); i++){\r\n\r\n\t\t\t\tvar labelText = getLabelText(i, style, pageSize, pagesCount, recordsCount);\r\n\t\t\t\tif(i !== currentPageIndex){\r\n\t\t\t\t\trenderCurrentLink(i, labelText);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// No link on current page\r\n\t\t\t\t\trenderCurrentText(labelText);\r\n\t\t\t\t}\r\n\t\t\t\t// No separator on last entry\r\n\t\t\t\tif(i < endIndex){\r\n\t\t\t\t\trenderSeparator();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar renderCurrentLink = function(i, linkText){\r\n\t\t\tvar textNode = document.createTextNode(linkText);\r\n\t\t\tvar linkNode = document.createElement(\"a\");\r\n\t\t\tlinkNode.appendChild(textNode);\r\n\t\t\tlinkNode.setAttribute(\"href\", CONST.SAFE_HREF);\r\n\t\t\taddGoToPageEvent(linkNode, i);\r\n\t\t\tnode.appendChild(linkNode);\r\n\t\t};\r\n\r\n\t\tvar renderCurrentText = function(labelText){\r\n\t\t\tvar textNode = document.createTextNode(labelText);\r\n\t\t\tvar strongNode = document.createElement(\"strong\");\r\n\t\t\tstrongNode.appendChild(textNode);\r\n\t\t\tnode.appendChild(strongNode);\r\n\t\t};\r\n\r\n\t\tvar renderSeparator = function(){\r\n\t\t\tvar separatorNode = document.createTextNode(self.config.separator);\r\n\t\t\tnode.appendChild(separatorNode);\r\n\t\t};\r\n\r\n\t\tvar addGoToPageEvent = function(linkNode, pageNumber){\r\n\t\t\tlinkNode.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tpagedView.goToPage(pageNumber);\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tvar getEndIndex = function(currentPageIndex, maxLinks, pagesCount){\r\n\t\t\tvar startIndex = parseInt(currentPageIndex - parseInt(maxLinks / 2));\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(startIndex < 1){\r\n\t\t\t\tstartIndex = 1;\r\n\t\t\t}\r\n\t\t\tvar tempPos = startIndex + maxLinks - 1;\r\n\t\t\tvar endIndex = pagesCount;\r\n\t\t\tif(tempPos < pagesCount){\r\n\t\t\t\tendIndex = tempPos;\r\n\t\t\t}\r\n\t\t\treturn endIndex;\r\n\t\t};\r\n\r\n\t\tvar getLabelText = function(i, style, pageSize, pagesCount, recordsCount){\r\n\t\t\tvar labelText = \"\";\r\n\r\n\t\t\tif(style === luga.data.PAGING_STYLE.PAGES){\r\n\t\t\t\tlabelText = i;\r\n\t\t\t}\r\n\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(style === luga.data.PAGING_STYLE.LINKS){\r\n\t\t\t\tvar startText = \"\";\r\n\t\t\t\tvar endText = \"\";\r\n\t\t\t\tif(i !== 1){\r\n\t\t\t\t\tstartText = (pageSize * (i - 1)) + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// First link\r\n\t\t\t\t\tstartText = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif(i < pagesCount){\r\n\t\t\t\t\tendText = startText + pageSize - 1;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Last link\r\n\t\t\t\t\tendText = recordsCount;\r\n\t\t\t\t}\r\n\t\t\t\tlabelText = startText + CONST.LINKS_SEPARATOR + endText;\r\n\t\t\t}\r\n\r\n\t\t\treturn labelText;\r\n\t\t};\r\n\r\n\t\t/* Events Handlers */\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.dataSourceChanged} data\r\n\t\t */\r\n\t\tthis.onDataChangedHandler = function(data){\r\n\t\t\trender();\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.data.widgets\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.widgets.ShowMore.options\r\n\t *\r\n\t * @property {luga.data.DataSet} dataSet   DataSet. Required\r\n\t * @property {String|undefined} paramPath  Path to retrieve url template params from the JSON. Optional. If not specified the whole returned JSON will be used\r\n\t * @property {String} url                  Url to be used by the dataSet to fetch more data. It can contain template placeholders. Required\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract ShowMore class\r\n\t * Concrete implementations must extend this\r\n\t * @param {luga.data.widgets.ShowMore.options} options\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMore = function(options){\r\n\r\n\t\tthis.CONST = {\r\n\t\t\tERROR_MESSAGES: {\r\n\t\t\t\tINVALID_DATASET_PARAMETER: \"luga.data.widgets.ShowMore: dataSet parameter is required\",\r\n\t\t\t\tINVALID_URL_PARAMETER: \"luga.data.widgets.ShowMore: url parameter is required\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMore} */\r\n\t\tvar self = this;\r\n\r\n\t\tif(this.config.dataSet === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_DATASET_PARAMETER);\r\n\t\t}\r\n\t\tif(this.config.url === undefined){\r\n\t\t\tthrow(this.CONST.ERROR_MESSAGES.INVALID_URL_PARAMETER);\r\n\t\t}\r\n\r\n\t\tvar isEnabled = false;\r\n\t\tthis.config.dataSet.addObserver(this);\r\n\r\n\t\tthis.assembleUrl = function(){\r\n\t\t\tvar bindingObj = this.config.dataSet.getRawJson();\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.config.paramPath !== \"\"){\r\n\t\t\t\tbindingObj = luga.lookupProperty(bindingObj, this.config.paramPath);\r\n\t\t\t}\r\n\t\t\treturn luga.string.populate(this.config.url, bindingObj);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.disable = function(){\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @abstract\r\n\t\t */\r\n\t\tthis.enable = function(){\r\n\t\t};\r\n\r\n\t\tthis.fetch = function(){\r\n\t\t\tvar newUrl = this.assembleUrl();\r\n\t\t\tif(newUrl !== this.config.url){\r\n\t\t\t\tthis.config.dataSet.setUrl(newUrl);\r\n\t\t\t\tthis.config.dataSet.loadData();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.isEnabled = function(){\r\n\t\t\treturn isEnabled;\r\n\t\t};\r\n\r\n\t\tthis.updateState = function(){\r\n\t\t\tif(this.config.dataSet.getState() === luga.data.STATE.READY){\r\n\t\t\t\tisEnabled = true;\r\n\t\t\t\tthis.enable();\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tisEnabled = false;\r\n\t\t\t\tthis.disable();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {luga.data.DataSet.stateChanged} data\r\n\t\t */\r\n\t\tthis.onStateChangedHandler = function(data){\r\n\t\t\tself.updateState();\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.updateState();\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.data.ShowMoreButton.options\r\n\t *\r\n\t * @extend luga.data.widgets.ShowMore.options\r\n\t * @property {HTMLElement}  button     Button that will trigger the showMore. Required\r\n\t * @property {String}  disabledClass   Name of CSS class that will be applied to the button while it's disabled. Optional, default to \"disabled\"\r\n\t */\r\n\r\n\t/**\r\n\t * ShowMore button class\r\n\t * @param {luga.data.widgets.ShowMoreButton.options} options\r\n\t * @constructor\r\n\t * @extend luga.data.widgets.ShowMore\r\n\t * @listen stateChanged\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.data.widgets.ShowMoreButton = function(options){\r\n\t\tthis.config = {\r\n\t\t\t/** @type {luga.data.dataSet} */\r\n\t\t\tdataSet: undefined,\r\n\t\t\tparamPath: \"\",\r\n\t\t\turl: undefined,\r\n\t\t\t/** @type {HTMLElement} */\r\n\t\t\tbutton: undefined,\r\n\t\t\tdisabledClass: \"disabled\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.data.widgets.ShowMore, this, [this.config]);\r\n\r\n\t\t/** @type {luga.data.widgets.ShowMoreButton} */\r\n\t\tvar self = this;\r\n\r\n\t\t// The messages below are specific to this implementation\r\n\t\tself.CONST.BUTTON_ERROR_MESSAGES = {\r\n\t\t\tMISSING_BUTTON: \"luga.data.widgets.ShowMoreButton was unable find the button node\"\r\n\t\t};\r\n\r\n\t\tif(self.config.button === null){\r\n\t\t\tthrow(this.CONST.BUTTON_ERROR_MESSAGES.MISSING_BUTTON);\r\n\t\t}\r\n\r\n\t\tthis.attachEvents = function(){\r\n\r\n\t\t\tself.config.button.addEventListener(\"click\", function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tif(self.isEnabled() === true){\r\n\t\t\t\t\tself.fetch();\r\n\t\t\t\t}\r\n\t\t\t}, false);\r\n\r\n\t\t};\r\n\r\n\t\tthis.disable = function(){\r\n\t\t\tself.config.button.classList.add(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\tthis.enable = function(){\r\n\t\t\tself.config.button.classList.remove(this.config.disabledClass);\r\n\t\t};\r\n\r\n\t\t/* Constructor */\r\n\t\tthis.attachEvents();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}