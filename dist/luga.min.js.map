{"version":3,"sources":["luga.min.js","luga.core.js","luga.ajaxform.js","luga.csi.js","luga.validator.js"],"names":["luga","attributesToProperties","node","obj","attributes","undefined","i","length","attr","xml","ATTRIBUTE_PREFIX","name","value","childrenToProperties","childNodes","child","nodeType","isArray","tagName","nodeName","constructor","Array","curValue","push","nodeHasText","getTextValue","childObj","nodeToObject","data","nextSibling","version","CONST","ERROR_MESSAGES","NOTIFIER_ABSTRACT","INVALID_OBSERVER_PARAMETER","INVALID_DATA_PARAMETER","namespace","ns","rootObject","parts","split","window","extend","baseFunc","func","args","apply","lookupFunction","path","reference","lookupProperty","jQuery","isFunction","object","part","shift","merge","target","setProperty","Notifier","this","observers","prefix","suffix","generateMethodName","eventName","str","charAt","toUpperCase","substring","addObserver","observer","type","notifyObservers","method","removeObserver","splice","dom","treeWalker","getInstance","rootNode","filterFunc","filter","acceptNode","NodeFilter","FILTER_SKIP","FILTER_ACCEPT","safeFilter","document","createTreeWalker","SHOW_ELEMENT","form","FIELD_SELECTOR","FAKE_INPUT_TYPES","fieldset","reset","MESSAGES","MISSING_FORM","toHash","demoronize","map","fields","utils","getChildFields","isSuccessfulField","fieldName","fieldValue","fieldType","prop","val","string","toJson","flatData","jsonData","x","toQueryString","j","appendQueryString","encodeURIComponent","fieldNode","isInputField","getFieldGroup","selector","find","each","index","item","replace","RegExp","String","fromCharCode","format","pattern","$","isPlainObject","queryToHash","tokens","decodeURIComponent","propertyPattern","replaceProperty","results","exec","property","test","CSS_CLASSES","MESSAGE","ERROR_MESSAGE","MSG_BOX_ID","generateBoxId","boxId","removeDisplayBox","oldBox","remove","displayMessage","html","displayBox","displayErrorMessage","cssClass","box","addClass","replaceWith","before","MIME_TYPE","DOM_ACTIVEX_NAME","evaluateXPath","retArray","ActiveXObject","selectedNodes","selectNodes","evaluator","XPathEvaluator","result","evaluate","XPathResult","ORDERED_NODE_ITERATOR_TYPE","currentNode","iterateNext","parseFromString","xmlStr","xmlParser","xmlDOMObj","async","loadXML","DOMParser","domDoc","ajaxform","handlers","replaceForm","msg","formNode","textStatus","jqXHR","empty","errorAlert","errorThrown","alert","errorBox","afterValidation","event","preventDefault","sender","Sender","send","FORM_SELECTOR","DEFAULT_METHOD","DEFAULT_TIME_OUT","CUSTOM_ATTRIBUTES","AJAX","ACTION","METHOD","TIME_OUT","SUCCESS","SUCCESS_MSG","ERROR","ERROR_MSG","BEFORE","AFTER","HEADERS","MISSING_FUNCTION","HANDLERS","options","config","action","location","href","timeout","success","error","successmsg","errormsg","after","headers","parseInt","self","handleAfter","callBack","handleBefore","handleError","handleSuccess","formData","ajax","response","url","sendJson","contentType","JSON","stringify","initForms","submit","formHandler","ready","csi","NODE_SELECTOR","URL_ATTRIBUTE","AFTER_ATTRIBUTE","FILE_NOT_FOUND","Include","onSuccess","onError","qXHR","xhrTimeout","load","XHR_TIMEOUT","afterHandler","loadIncludes","includeObj","validator","validators","errorMsg","focusGiven","message","getFocus","htmlStr","bootstrap","ERROR_SELECTOR","ERROR_CLASS","ALERT_SELECTOR","FAILED_UPDATE","removeClass","parent","RULE_PREFIX","DEFAULT_DATE_PATTERN","VALIDATE","BLOCK_SUBMIT","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MISSING_FIELD","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","FORM_ERROR","FormValidator","blocksubmit","parse","dirtyValidators","init","formDom","elements","fieldValidatorFactory","validate","executedValidators","isValid","disableSubmit","buttons","buttonNode","SelectValidator","RadioValidator","inputGroup","CheckboxValidator","TextValidator","BaseFieldValidator","errorclass","flagInvalid","flagValid","removeAttr","required","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","e","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","containsAt","indexOf","containDot","secondFieldNode","datObj","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","lettersonly","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","formValidator","api","validateForm","validateField","fieldValidator","validateFields","validateChildFields"],"mappings":"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","file":"luga.min.js","sourcesContent":[null,"/* globals ActiveXObject */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(jQuery) === \"undefined\"){\r\n\tthrow(\"Unable to find jQuery\");\r\n}\r\n/* istanbul ignore else */\r\nif(typeof(luga) === \"undefined\"){\r\n\tvar luga = {};\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.version = \"0.5.0\";\r\n\r\n\tluga.CONST = {\r\n\t\tERROR_MESSAGES: {\r\n\t\t\tNOTIFIER_ABSTRACT: \"It's forbidden to use luga.Notifier directly, it must be used as a base class instead\",\r\n\t\t\tINVALID_OBSERVER_PARAMETER: \"addObserver(): observer parameter must be an object\",\r\n\t\t\tINVALID_DATA_PARAMETER: \"notifyObserver(): data parameter is required and must be an object\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Creates namespaces to be used for scoping variables and classes so that they are not global.\r\n\t * Specifying the last node of a namespace implicitly creates all other nodes.\r\n\t * Based on Nicholas C. Zakas's code\r\n\t * @param {string} ns           Namespace as string\r\n\t * @param {object} rootObject   Optional root object. Default to window\r\n\t */\r\n\tluga.namespace = function(ns, rootObject){\r\n\t\tvar parts = ns.split(\".\");\r\n\t\tif(rootObject === undefined){\r\n\t\t\trootObject = window;\r\n\t\t}\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tif(rootObject[parts[i]] === undefined){\r\n\t\t\t\trootObject[parts[i]] = {};\r\n\t\t\t}\r\n\t\t\trootObject = rootObject[parts[i]];\r\n\t\t}\r\n\t\treturn rootObject;\r\n\t};\r\n\r\n\t/**\r\n\t * Offers a simple solution for inheritance among classes\r\n\t *\r\n\t * @param {function} baseFunc  Parent constructor function. Required\r\n\t * @param {function} func      Child constructor function. Required\r\n\t * @param {array}    args      An array of arguments that will be passed to the parent's constructor. Optional\r\n\t */\r\n\tluga.extend = function(baseFunc, func, args){\r\n\t\tbaseFunc.apply(func, args);\r\n\t};\r\n\r\n\t/**\r\n\t * Given the name of a function as a string, return the relevant function, if any\r\n\t * Returns undefined, if the reference has not been found\r\n\t * Supports namespaces (if the fully qualified path is passed)\r\n\t * @param {string} path            Fully qualified name of a function\r\n\t * @returns {function|undefined}   The javascript reference to the function, undefined if nothing is fund or if it's not a function\r\n\t */\r\n\tluga.lookupFunction = function(path){\r\n\t\tif(!path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tvar reference = luga.lookupProperty(window, path);\r\n\t\tif(jQuery.isFunction(reference) === true){\r\n\t\t\treturn reference;\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object and a path, returns the property located at the given path\r\n\t * If nothing exists at that location, returns undefined\r\n\t * Supports unlimited nesting levels (if the fully qualified path is passed)\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Dot-delimited string\r\n\t * @returns {*|undefined}\r\n\t */\r\n\tluga.lookupProperty = function(object, path){\r\n\t\t// Either of the two params is invalid\r\n\t\tif(!object || !path){\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\t// Property live at the first level\r\n\t\tif(object[path] !== undefined){\r\n\t\t\treturn object[path];\r\n\t\t}\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\tif(parts.length === 0){\r\n\t\t\t\t\t// We got it\r\n\t\t\t\t\treturn object[part];\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t// Keep looping\r\n\t\t\t\t\tobject = object[part];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn undefined;\r\n\t};\r\n\r\n\t/**\r\n\t * Shallow-merge the contents of two objects together into the first object\r\n\t * It wraps jQuery's extend to make names less ambiguous\r\n\t *\r\n\t * @param {object} target  An object that will receive the new properties\r\n\t * @param {object} obj     An object containing additional properties to merge in\r\n\t */\r\n\tluga.merge = function(target, obj){\r\n\t\tjQuery.extend(target, obj);\r\n\t};\r\n\r\n\t/**\r\n\t * Given an object, a path and a value, set the property located at the given path to the given value\r\n\t * If the path does not exists, it creates it\r\n\t * @param {object} object  Target object\r\n\t * @param {string} path    Fully qualified property name\r\n\t * @param {*}      value\r\n\t */\r\n\tluga.setProperty = function(object, path, value){\r\n\t\tvar parts = path.split(\".\");\r\n\t\twhile(parts.length > 0){\r\n\t\t\tvar part = parts.shift();\r\n\t\t\tif(object[part] !== undefined){\r\n\t\t\t\t// Keep looping\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse if(parts.length > 0){\r\n\t\t\t\t// Create the missing element and keep looping\r\n\t\t\t\tobject[part] = {};\r\n\t\t\t\tobject = object[part];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tobject[part] = value;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Provides the base functionality necessary to maintain a list of observers and send notifications to them.\r\n\t * It's forbidden to use this class directly, it can only be used as a base class.\r\n\t * The Notifier class does not define any notification messages, so it is up to the developer to define the notifications sent via the Notifier.\r\n\t * @throws\r\n\t */\r\n\tluga.Notifier = function(){\r\n\t\tif(this.constructor === luga.Notifier){\r\n\t\t\tthrow(luga.CONST.ERROR_MESSAGES.NOTIFIER_ABSTRACT);\r\n\t\t}\r\n\t\tthis.observers = [];\r\n\t\tvar prefix = \"on\";\r\n\t\tvar suffix = \"Handler\";\r\n\r\n\t\t// Turns \"complete\" into \"onComplete\"\r\n\t\tvar generateMethodName = function(eventName){\r\n\t\t\tvar str = prefix;\r\n\t\t\tstr += eventName.charAt(0).toUpperCase();\r\n\t\t\tstr += eventName.substring(1);\r\n\t\t\tstr += suffix;\r\n\t\t\treturn str;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Adds an observer object to the list of observers.\r\n\t\t * Observer objects should implement a method that matches a naming convention for the events they are interested in.\r\n\t\t * For an event named \"complete\" they must implement a method named: \"onCompleteHandler\"\r\n\t\t * The interface for this methods is as follows:\r\n\t\t * observer.onCompleteHandler = function(data){};\r\n\t\t * @param  {object} observer  Observer object\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.addObserver = function(observer){\r\n\t\t\tif(jQuery.type(observer) !== \"object\"){\r\n\t\t\t\tthrow(luga.CONST.ERROR_MESSAGES.INVALID_OBSERVER_PARAMETER);\r\n\t\t\t}\r\n\t\t\tthis.observers.push(observer);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Sends a notification to all interested observers registered with the notifier.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {string}  eventName  Name of the event\r\n\t\t * @param {object}  data       Object containing data to be passed from the point of notification to all interested observers.\r\n\t\t *                             If there is no relevant data to pass, use an empty object.\r\n\t\t * @throws\r\n\t\t */\r\n\t\tthis.notifyObservers = function(eventName, data){\r\n\t\t\tif(jQuery.type(data) !== \"object\"){\r\n\t\t\t\tthrow(luga.CONST.ERROR_MESSAGES.INVALID_DATA_PARAMETER);\r\n\t\t\t}\r\n\t\t\tvar method = generateMethodName(eventName);\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tvar observer = this.observers[i];\r\n\t\t\t\tif(observer[method] && jQuery.isFunction(observer[method])){\r\n\t\t\t\t\tobserver[method](data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Removes the given observer object.\r\n\t\t *\r\n\t\t * @method\r\n\t\t * @param {Object} observer\r\n\t\t */\r\n\t\tthis.removeObserver = function(observer){\r\n\t\t\tfor(var i = 0; i < this.observers.length; i++){\r\n\t\t\t\tif(this.observers[i] === observer){\r\n\t\t\t\t\tthis.observers.splice(i, 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* DOM */\r\n\r\n\tluga.namespace(\"luga.dom.treeWalker\");\r\n\r\n\t/**\r\n\t * Static factory to create a cross-browser DOM TreeWalker\r\n\t * https://developer.mozilla.org/en/docs/Web/API/TreeWalker\r\n\t *\r\n\t * @param {Node}         rootNode    Start node. Required\r\n\t * @param {function}     filterFunc  Optional filter function. If specified only nodes matching the filter will be accepted\r\n\t *                                   The function will be invoked with this signature: filterFunc(node). Must return true|false\r\n\t * @returns {TreeWalker}\r\n\t */\r\n\tluga.dom.treeWalker.getInstance = function(rootNode, filterFunc){\r\n\r\n\t\tvar filter = {\r\n\t\t\tacceptNode: function(node){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(filterFunc !== undefined){\r\n\t\t\t\t\tif(filterFunc(node) === false){\r\n\t\t\t\t\t\treturn NodeFilter.FILTER_SKIP;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// http://stackoverflow.com/questions/5982648/recommendations-for-working-around-ie9-treewalker-filter-bug\r\n\t\t// A true W3C-compliant nodeFilter object isn't passed, and instead a \"safe\" one _based_ off of the real one.\r\n\t\tvar safeFilter = filter.acceptNode;\r\n\t\tsafeFilter.acceptNode = filter.acceptNode;\r\n\t\treturn document.createTreeWalker(rootNode, NodeFilter.SHOW_ELEMENT, safeFilter, false);\r\n\t};\r\n\r\n\t/* Form */\r\n\r\n\tluga.namespace(\"luga.form\");\r\n\r\n\tluga.form.CONST = {\r\n\t\tFIELD_SELECTOR: \"input,select,textarea\",\r\n\t\tFAKE_INPUT_TYPES: {\r\n\t\t\tfieldset: true,\r\n\t\t\treset: true\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"Unable to load form\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a JavaScript object containing name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * Values of multiple checked checkboxes and multiple select are included as a single entry, with array value\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {object}              A JavaScript object containing name/value pairs\r\n\t * @throws\r\n\t */\r\n\tluga.form.toHash = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar map = {};\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = null;\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tfieldValue = jQuery(fields[i]).val();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(fieldValue !== null){\r\n\t\t\t\t\tif(demoronize === true){\r\n\t\t\t\t\t\tfieldValue = luga.string.demoronize(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(jQuery.isArray(map[fieldName]) === true){\r\n\t\t\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a form tag or another element wrapping input fields, serialize their value into JSON data\r\n\t * If fields names contains dots, their are handled as nested properties\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t * @param {jquery} rootNode  jQuery object wrapping the form fields\r\n\t * @returns {json}\r\n\t */\r\n\tluga.form.toJson = function(rootNode){\r\n\t\tvar flatData = luga.form.toHash(rootNode);\r\n\t\tvar jsonData = {};\r\n\t\tfor(var x in flatData){\r\n\t\t\tluga.setProperty(jsonData, x, flatData[x]);\r\n\t\t}\r\n\t\treturn jsonData;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns a URI encoded string of name/value pairs from fields contained inside a given root node\r\n\t * Only fields considered successful are returned:\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}   rootNode     jQuery object wrapping the root node\r\n\t * @param {boolean}  demoronize   If set to true, MS Word's special chars are replaced with plausible substitutes. Default to false\r\n\t * @returns {string}               A URI encoded string\r\n\t * @throws\r\n\t */\r\n\tluga.form.toQueryString = function(rootNode, demoronize){\r\n\r\n\t\tif(rootNode.length === 0){\r\n\t\t\tthrow(luga.form.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tvar str = \"\";\r\n\t\tvar fields = luga.form.utils.getChildFields(rootNode);\r\n\t\tfor(var i = 0; i < fields.length; i++){\r\n\t\t\tif(luga.form.utils.isSuccessfulField(fields[i]) === true){\r\n\t\t\t\tvar fieldName = jQuery(fields[i]).attr(\"name\");\r\n\t\t\t\tvar fieldValue = jQuery(fields[i]).val();\r\n\t\t\t\tvar fieldType = jQuery(fields[i]).prop(\"type\");\r\n\t\t\t\tswitch(fieldType){\r\n\r\n\t\t\t\t\tcase \"select-multiple\":\r\n\t\t\t\t\t\tfor(var j = 0; j < fieldValue.length; j++){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue[j], demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase \"checkbox\":\r\n\t\t\t\t\tcase \"radio\":\r\n\t\t\t\t\t\tif(jQuery(fields[i]).prop(\"checked\") === true){\r\n\t\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tstr = appendQueryString(str, fieldName, fieldValue, demoronize);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tvar appendQueryString = function(str, fieldName, fieldValue, demoronize){\r\n\t\tif(str !== \"\"){\r\n\t\t\tstr += \"&\";\r\n\t\t}\r\n\t\tstr += encodeURIComponent(fieldName);\r\n\t\tstr += \"=\";\r\n\t\tif(demoronize === true){\r\n\t\t\tstr += encodeURIComponent(luga.string.demoronize(fieldValue));\r\n\t\t}\r\n\t\telse{\r\n\t\t\tstr += encodeURIComponent(fieldValue);\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.form.utils\");\r\n\r\n\t/**\r\n\t * Returns true if the given field is successful, false otherwise\r\n\t * http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.2\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isSuccessfulField = function(fieldNode){\r\n\t\tif(luga.form.utils.isInputField(fieldNode) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).prop(\"disabled\") === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(jQuery(fieldNode).attr(\"name\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the passed node is a form field that we care about\r\n\t *\r\n\t * @param {jquery}  fieldNode\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.form.utils.isInputField = function(fieldNode){\r\n\t\tif(jQuery(fieldNode).prop(\"type\") === undefined){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// It belongs to the kind of nodes that are considered form fields, but we don't care about\r\n\t\tif(luga.form.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop(\"type\")] === true){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * Extracts group of fields that share the same name from a given root node\r\n\t * Or the whole document if the second argument is not passed\r\n\t *\r\n\t * @param {string}  name       Name of the field. Mandatory\r\n\t * @param {jquery}  rootNode   Root node, optional, default to document\r\n\t * @returns {jquery}\r\n\t */\r\n\tluga.form.utils.getFieldGroup = function(name, rootNode){\r\n\t\tvar selector = \"input[name=\" + name + \"]\";\r\n\t\treturn jQuery(selector, rootNode);\r\n\t};\r\n\r\n\t/**\r\n\t * Returns an array of input fields contained inside a given root node\r\n\t *\r\n\t * @param {jquery}  rootNode   Root node\r\n\t * @returns {Array.<jquery>}\r\n\t */\r\n\tluga.form.utils.getChildFields = function(rootNode){\r\n\t\tvar fields = [];\r\n\t\tjQuery(rootNode).find(luga.form.CONST.FIELD_SELECTOR).each(function(index, item){\r\n\t\t\tif(luga.form.utils.isInputField(item)){\r\n\t\t\t\tfields.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t};\r\n\r\n\t/* Utilities */\r\n\r\n\tluga.namespace(\"luga.string\");\r\n\r\n\r\n\t/**\r\n\t * Replace MS Word's non-ISO characters with plausible substitutes\r\n\t *\r\n\t * @param {string} str   String containing MS Word's garbage\r\n\t * @returns {string}      The de-moronized string\r\n\t */\r\n\tluga.string.demoronize = function(str){\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(710), \"g\"), \"^\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(732), \"g\"), \"~\");\r\n\t\t// Evil \"smarty\" quotes\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8216), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8217), \"g\"), \"'\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8220), \"g\"), \"\\\"\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8221), \"g\"), \"\\\"\");\r\n\t\t// More garbage\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8211), \"g\"), \"-\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8212), \"g\"), \"--\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8218), \"g\"), \",\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8222), \"g\"), \",,\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8226), \"g\"), \"*\");\r\n\t\tstr = str.replace(new RegExp(String.fromCharCode(8230), \"g\"), \"...\");\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string containing placeholders, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument (either an object or an array)\r\n\t * Loosely based on the .NET implementation: http://msdn.microsoft.com/en-us/library/system.string.format.aspx\r\n\t *\r\n\t * Example passing strings inside an array:\r\n\t * luga.string.format(\"My name is {0} {1}\", [\"Ciccio\", \"Pasticcio\"]);\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example passing strings inside an object:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param  {string}  str                   String containing placeholders\r\n\t * @param  {object|array.<string>} args    Either an array of strings or an objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.format = function(str, args){\r\n\t\tvar pattern = null;\r\n\t\tif($.isArray(args) === true){\r\n\t\t\tfor(var i = 0; i < args.length; i++){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + i + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif($.isPlainObject(args) === true){\r\n\t\t\tfor(var x in args){\r\n\t\t\t\tpattern = new RegExp(\"\\\\{\" + x + \"\\\\}\", \"g\");\r\n\t\t\t\tstr = str.replace(pattern, args[x]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\t/**\r\n\t * Given a string in querystring format, return a JavaScript object containing name/value pairs\r\n\t * @param {string} str  The querystring\r\n\t * @returns {object}\r\n\t */\r\n\tluga.string.queryToHash = function(str){\r\n\t\tvar map = {};\r\n\t\tif(str.charAt(0) === \"?\"){\r\n\t\t\tstr = str.substring(1);\r\n\t\t}\r\n\t\tif(str.length === 0){\r\n\t\t\treturn map;\r\n\t\t}\r\n\t\tvar parts = str.split(\"&\");\r\n\r\n\t\tfor(var i = 0; i < parts.length; i++){\r\n\t\t\tvar tokens = parts[i].split(\"=\");\r\n\t\t\tvar fieldName = decodeURIComponent(tokens[0]);\r\n\t\t\tvar fieldValue = \"\";\r\n\t\t\tif(tokens.length === 2){\r\n\t\t\t\tfieldValue = decodeURIComponent(tokens[1]);\r\n\t\t\t}\r\n\t\t\tif(map[fieldName] === undefined){\r\n\t\t\t\tmap[fieldName] = fieldValue;\r\n\t\t\t}\r\n\t\t\telse if(jQuery.isArray(map[fieldName]) === true){\r\n\t\t\t\tmap[fieldName].push(fieldValue);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tmap[fieldName] = [map[fieldName], fieldValue];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn map;\r\n\t};\r\n\r\n\tvar propertyPattern = new RegExp(\"\\\\{([^}]*)}\", \"g\");\r\n\r\n\t/**\r\n\t * Given a string containing placeholders in {key} format, it assembles a new string\r\n\t * replacing the placeholders with the strings contained inside the second argument keys\r\n\t * Unlike luga.string.format, placeholders can match nested properties too. But it's slower\r\n\t *\r\n\t * Example:\r\n\t * luga.string.format(\"My name is {firstName} {lastName}\", {firstName: \"Ciccio\", lastName: \"Pasticcio\"});\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * Example with nested properties:\r\n\t * var nestedObj = { type: \"people\", person: { firstName: \"Ciccio\", lastName: \"Pasticcio\" } };\r\n\t * luga.string.replaceProperty(\"My name is {person.firstName} {person.lastName}\", nestedObj)\r\n\t * => \"My name is Ciccio Pasticcio\"\r\n\t *\r\n\t * @param   {string} str   String containing placeholders\r\n\t * @param   {object} obj   An objects containing name/value pairs in string format\r\n\t * @returns {string} The newly assembled string\r\n\t */\r\n\tluga.string.replaceProperty = function(str, obj){\r\n\t\tif($.isPlainObject(obj) === true){\r\n\t\t\tvar results;\r\n\t\t\twhile((results = propertyPattern.exec(str)) !== null){\r\n\t\t\t\tvar property = luga.lookupProperty(obj, results[1]);\r\n\t\t\t\tif(property !== undefined){\r\n\t\t\t\t\tvar pattern = new RegExp(results[0], \"g\");\r\n\t\t\t\t\tstr = str.replace(pattern, property);\r\n\t\t\t\t\t// Keep searching\r\n\t\t\t\t\tpropertyPattern.test(str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn str;\r\n\t};\r\n\r\n\tluga.namespace(\"luga.utils\");\r\n\r\n\tluga.utils.CONST = {\r\n\t\tCSS_CLASSES: {\r\n\t\t\tMESSAGE: \"luga-message\",\r\n\t\t\tERROR_MESSAGE: \"luga-error-message\"\r\n\t\t},\r\n\t\tMSG_BOX_ID: \"lugaMessageBox\"\r\n\t};\r\n\r\n\t/**\r\n\t * Private helper function\r\n\t * Generate node's id\r\n\t */\r\n\tvar generateBoxId = function(node){\r\n\t\tvar boxId = luga.utils.CONST.MSG_BOX_ID;\r\n\t\tif(node.attr(\"id\") === undefined){\r\n\t\t\tboxId += node.attr(\"id\");\r\n\t\t}\r\n\t\telse if(node.attr(\"name\") !== undefined){\r\n\t\t\tboxId += node.attr(\"name\");\r\n\t\t}\r\n\t\treturn boxId;\r\n\t};\r\n\r\n\t/**\r\n\t * Remove a message box (if any) associated with a given node\r\n\t * @param {jquery}  node   Target node\r\n\t */\r\n\tluga.utils.removeDisplayBox = function(node){\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If an error display is already there, get rid of it\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.remove();\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display a message box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display an error box above a given node\r\n\t * @param {jquery}  node   Target node\r\n\t * @param {string}  html   HTML/Text code to inject\r\n\t */\r\n\tluga.utils.displayErrorMessage = function(node, html){\r\n\t\treturn luga.utils.displayBox(node, html, luga.utils.CONST.CSS_CLASSES.ERROR_MESSAGE);\r\n\t};\r\n\r\n\t/**\r\n\t * Display a box with a message associated with a given node\r\n\t * Overwrite this method if you want to change the way luga.utils.displayMessage and luga.utils.displayErrorMessage behaves\r\n\t * @param {jquery}  node      Target node\r\n\t * @param {string}  html      HTML/Text code to inject\r\n\t * @param {string}  cssClass  CSS class attached to the box. Default to \"luga_message\"\r\n\t */\r\n\tluga.utils.displayBox = function(node, html, cssClass){\r\n\t\tif(cssClass === undefined){\r\n\t\t\tcssClass = luga.utils.CONST.CSS_CLASSES.MESSAGE;\r\n\t\t}\r\n\t\tvar boxId = generateBoxId(jQuery(node));\r\n\t\tvar box = jQuery(\"<div></div>\");\r\n\t\tbox.attr(\"id\", boxId);\r\n\t\tbox.addClass(cssClass);\r\n\t\tbox.html(html);\r\n\t\tvar oldBox = jQuery(\"#\" + boxId);\r\n\t\t// If a box display is already there, replace it, if not, we create one from scratch\r\n\t\tif(oldBox.length > 0){\r\n\t\t\toldBox.replaceWith(box);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tjQuery(node).before(box);\r\n\t\t}\r\n\t\treturn box;\r\n\t};\r\n\r\n\t/* XML */\r\n\r\n\tluga.namespace(\"luga.xml\");\r\n\r\n\tluga.xml.MIME_TYPE = \"application/xml\";\r\n\tluga.xml.ATTRIBUTE_PREFIX = \"_\";\r\n\tluga.xml.DOM_ACTIVEX_NAME = \"MSXML2.DOMDocument.4.0\";\r\n\r\n\t/**\r\n\t * Given a DOM node, evaluate an XPath expression against it\r\n\t * Results are returned as an array of nodes. An empty array is returned in case there is no match\r\n\t * @param {Node} node\r\n\t * @param {string} path\r\n\t * @returns {Array<Node>}\r\n\t */\r\n\tluga.xml.evaluateXPath = function(node, path){\r\n\t\tvar retArray = [];\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar selectedNodes = node.selectNodes(path);\r\n\t\t\t// Extract the nodes out of the nodeList returned by selectNodes and put them into an array\r\n\t\t\t// We could directly use the nodeList returned by selectNodes, but this would cause inconsistencies across browsers\r\n\t\t\tfor(var i = 0; i < selectedNodes.length; i++){\r\n\t\t\t\tretArray.push(selectedNodes[i]);\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tvar evaluator = new XPathEvaluator();\r\n\t\t\tvar result = evaluator.evaluate(path, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);\r\n\t\t\tvar currentNode = result.iterateNext();\r\n\t\t\t// Iterate and populate the array\r\n\t\t\twhile(currentNode !== null){\r\n\t\t\t\tretArray.push(currentNode);\r\n\t\t\t\tcurrentNode = result.iterateNext();\r\n\t\t\t}\r\n\t\t\treturn retArray;\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Convert an XML node into a JavaScript object\r\n\t * @param {Node} node\r\n\t * @returns {object}\r\n\t */\r\n\tluga.xml.nodeToObject = function(node){\r\n\t\tvar obj = {};\r\n\t\tattributesToProperties(node, obj);\r\n\t\tchildrenToProperties(node, obj);\r\n\t\treturn obj;\r\n\t};\r\n\r\n\t/**\r\n\t * Map attributes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction attributesToProperties(node, obj){\r\n\t\tif((node.attributes === null) || (node.attributes === undefined)){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(var i = 0; i < node.attributes.length; i++){\r\n\t\t\tvar attr = node.attributes[i];\r\n\t\t\tobj[luga.xml.ATTRIBUTE_PREFIX + attr.name] = attr.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Map child nodes to properties\r\n\t * @param {Node}   node\r\n\t * @param {object} obj\r\n\t */\r\n\tfunction childrenToProperties(node, obj){\r\n\t\tfor(var i = 0; i < node.childNodes.length; i++){\r\n\t\t\tvar child = node.childNodes[i];\r\n\r\n\t\t\tif(child.nodeType === 1 /* Node.ELEMENT_NODE */){\r\n\t\t\t\tvar isArray = false;\r\n\t\t\t\tvar tagName = child.nodeName;\r\n\r\n\t\t\t\tif(obj[tagName] !== undefined){\r\n\t\t\t\t\t// If the property exists already, turn it into an array\r\n\t\t\t\t\tif(obj[tagName].constructor !== Array){\r\n\t\t\t\t\t\tvar curValue = obj[tagName];\r\n\t\t\t\t\t\tobj[tagName] = [];\r\n\t\t\t\t\t\tobj[tagName].push(curValue);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisArray = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(nodeHasText(child) === true){\r\n\t\t\t\t\t// This may potentially override an existing property\r\n\t\t\t\t\tobj[child.nodeName] = getTextValue(child);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tvar childObj = luga.xml.nodeToObject(child);\r\n\t\t\t\t\tif(isArray === true){\r\n\t\t\t\t\t\tobj[tagName].push(childObj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tobj[tagName] = childObj;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extract text out of a TEXT or CDATA node\r\n\t * @param {Node} node\r\n\t * @returns {string}\r\n\t */\r\n\tfunction getTextValue(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\t/* istanbul ignore else */\r\n\t\tif((child.nodeType === 3) /* TEXT_NODE */ || (child.nodeType === 4) /* CDATA_SECTION_NODE */){\r\n\t\t\treturn child.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Return true if a node contains value, false otherwise\r\n\t * @param {Node}   node\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction nodeHasText(node){\r\n\t\tvar child = node.childNodes[0];\r\n\t\tif((child !== null) && (child.nextSibling === null) && (child.nodeType === 3 /* Node.TEXT_NODE */ || child.nodeType === 4 /* CDATA_SECTION_NODE */)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Create a DOM Document out of a string\r\n\t * @param {string} xmlStr\r\n\t * @returns {Document}\r\n\t */\r\n\tluga.xml.parseFromString = function(xmlStr){\r\n\t\tvar xmlParser;\r\n\t\t/* istanbul ignore if IE-only */\r\n\t\tif(window.ActiveXObject !== undefined){\r\n\t\t\tvar xmlDOMObj = new ActiveXObject(luga.xml.DOM_ACTIVEX_NAME);\r\n\t\t\txmlDOMObj.async = false;\r\n\t\t\txmlDOMObj.loadXML(xmlStr);\r\n\t\t\treturn xmlDOMObj;\r\n\t\t}\r\n\t\telse{\r\n\t\t\txmlParser = new DOMParser();\r\n\t\t\tvar domDoc = xmlParser.parseFromString(xmlStr, luga.xml.MIME_TYPE);\r\n\t\t\treturn domDoc;\r\n\t\t}\r\n\t};\r\n\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.ajaxform\");\r\n\tluga.ajaxform.version = \"0.7.5\";\r\n\r\n\t/* Success and error handlers */\r\n\tluga.namespace(\"luga.ajaxform.handlers\");\r\n\r\n\t/**\r\n\t * Replace form with message\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.replaceForm = function(msg, formNode, textStatus, jqXHR){\r\n\t\tjQuery(formNode).empty();\r\n\t\tjQuery(formNode).html(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display error message inside alert\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorAlert = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\talert(msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {string}   msg          Message to display in the GUI\r\n\t * @param {jquery}   formNode     jQuery object wrapping the form\r\n\t * @param {string}   textStatus   HTTP status\r\n\t * @param {string}   errorThrown  Error message from jQuery\r\n\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t */\r\n\tluga.ajaxform.handlers.errorBox = function(msg, formNode, textStatus, errorThrown, jqXHR){\r\n\t\t// Clean-up any existing box\r\n\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\tluga.utils.displayErrorMessage(formNode, msg);\r\n\t};\r\n\r\n\t/**\r\n\t * Utility function to be used as after handler by Luga Validator\r\n\t *\r\n\t * @param {jquery}       formNode  jQuery object wrapping the form\r\n\t * @param {jquery.Event} event     jQuery object wrapping the submit event\r\n\t */\r\n\tluga.ajaxform.handlers.afterValidation = function(formNode, event){\r\n\t\tevent.preventDefault();\r\n\t\tvar sender = new luga.ajaxform.Sender({\r\n\t\t\tformNode: formNode\r\n\t\t});\r\n\t\tsender.send();\r\n\t};\r\n\r\n\tluga.ajaxform.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugajax-form='true']\",\r\n\t\tDEFAULT_METHOD: \"GET\",\r\n\t\tDEFAULT_TIME_OUT: 30000, // ms\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tAJAX: \"data-lugajax-form\",\r\n\t\t\tACTION: \"data-lugajax-action\",\r\n\t\t\tMETHOD: \"data-lugajax-method\",\r\n\t\t\tTIME_OUT: \"data-lugajax-timeout\",\r\n\t\t\tSUCCESS: \"data-lugajax-success\",\r\n\t\t\tSUCCESS_MSG: \"data-lugajax-successmsg\",\r\n\t\t\tERROR: \"data-lugajax-error\",\r\n\t\t\tERROR_MSG: \"data-lugajax-errormsg\",\r\n\t\t\tBEFORE: \"data-lugajax-before\",\r\n\t\t\tAFTER: \"data-lugajax-after\",\r\n\t\t\tHEADERS: \"data-lugajax-headers\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tSUCCESS: \"Thanks for submitting the form\",\r\n\t\t\tERROR: \"Failed to submit the form\",\r\n\t\t\tMISSING_FORM: \"luga.ajaxform was unable to load form\",\r\n\t\t\tMISSING_FUNCTION: \"luga.ajaxform was unable to find a function named: {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tSUCCESS: \"luga.ajaxform.handlers.replaceForm\",\r\n\t\t\tERROR: \"luga.ajaxform.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.ajaxform.Sender.options\r\n\t *\r\n\t * @property {jquery} formNode     Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string} action       URL to where the form will be send. Default to the current URL\r\n\t * @property {string} method       HTTP method to be used. Default to GET\r\n\t * @property {number} timeout      Timeout to be used during the HTTP call (milliseconds). Default to 30000\r\n\t * @property {string} success      Name of the function to be invoked if the form is successfully submitted. Default to luga.ajaxform.handlers.replaceForm\r\n\t * @property {string} error        Name of the function to be invoked if the HTTP call failed. Default to luga.ajaxform.handlers.errorAlert\r\n\t * @property {string} successmsg   Message that will be displayed to the user if the form is successfully submitted. Default to \"Thanks for submitting the form\"\r\n\t * @property {string} errormsg     Message that will be displayed to the user if the HTTP call failed. Default to \"Failed to submit the form\"\r\n\t * @property {string} before       Name of the function to be invoked before the form is send. Default to null\r\n\t * @property {string} after        Name of the function to be invoked after the form is send. Default to null\r\n\t * @property {object} headers      A set of name/value pairs to be used as custom HTTP headers. Available only with JavaScript API\r\n\t */\r\n\r\n\t/**\r\n\t * Form handler. Invoke its sender() method to serialize the form and send its contents using XHR\r\n\t * @param options {luga.ajaxform.Sender.options}\r\n\t * @constructor\r\n\t * @throws\r\n\t */\r\n\tluga.ajaxform.Sender = function(options){\r\n\t\t// Ensure it's a jQuery object\r\n\t\toptions.formNode = jQuery(options.formNode);\r\n\t\tthis.config = {\r\n\t\t\tformNode: null, // Required\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or current URL\r\n\t\t\taction: options.formNode.attr(\"action\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ACTION) || document.location.href,\r\n\t\t\t// Either: form attribute, custom attribute, incoming option or default\r\n\t\t\tmethod: options.formNode.attr(\"method\") || options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.METHOD) || luga.ajaxform.CONST.DEFAULT_METHOD,\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\ttimeout: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.TIME_OUT) || luga.ajaxform.CONST.DEFAULT_TIME_OUT,\r\n\t\t\tsuccess: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS) || luga.ajaxform.CONST.HANDLERS.SUCCESS,\r\n\t\t\terror: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.ajaxform.CONST.HANDLERS.ERROR,\r\n\t\t\tsuccessmsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.SUCCESS_MSG) || luga.ajaxform.CONST.MESSAGES.SUCCESS,\r\n\t\t\terrormsg: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.ERROR_MSG) || luga.ajaxform.CONST.MESSAGES.ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: options.formNode.attr(luga.ajaxform.CONST.CUSTOM_ATTRIBUTES.AFTER) || null,\r\n\t\t\theaders: null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.config.timeout = parseInt(this.config.timeout, 10);\r\n\t\tvar self = this;\r\n\r\n\t\tif(self.config.formNode.length === 0){\r\n\t\t\tthrow(luga.ajaxform.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleAfter = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleBefore = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack === undefined){\r\n\t\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode]);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleError = function(textStatus, jqXHR, errorThrown){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.errormsg, self.config.formNode, textStatus, errorThrown, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar handleSuccess = function(textStatus, jqXHR){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.success);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\tthrow(luga.string.format(luga.ajaxform.CONST.MESSAGES.MISSING_FUNCTION, [self.config.success]));\r\n\t\t\t}\r\n\t\t\tcallBack.apply(null, [self.config.successmsg, self.config.formNode, textStatus, jqXHR]);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Perform the following actions:\r\n\t\t * 1) Invoke the before handler, if any\r\n\t\t * 2) Make the HTTP call, sending along the serialized form's content\r\n\t\t * 3) Invoke either the success or error handler\r\n\t\t * 4) Invoke the after handler, if any\r\n\t\t */\r\n\t\tthis.send = function(){\r\n\r\n\t\t\tvar formData = luga.form.toQueryString(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tdata: formData,\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t/*\r\n\t\t AS above, just send  data as raw JSON\r\n\t\t */\r\n\t\tthis.sendJson = function(){\r\n\r\n\t\t\tvar formData = luga.form.toJson(self.config.formNode, true);\r\n\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\thandleBefore();\r\n\t\t\t}\r\n\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\tcontentType: \"application/json\",\r\n\t\t\t\tdata: JSON.stringify(formData),\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\thandleError(textStatus, jqXHR, errorThrown);\r\n\t\t\t\t},\r\n\t\t\t\tmethod: self.config.method,\r\n\t\t\t\theaders: self.config.headers,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\thandleSuccess(textStatus, jqXHR);\r\n\t\t\t\t},\r\n\t\t\t\ttimeout: self.config.timeout,\r\n\t\t\t\turl: self.config.action\r\n\t\t\t});\r\n\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\thandleAfter();\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Attach form handlers to onSubmit events\r\n\t */\r\n\tluga.ajaxform.initForms = function(){\r\n\t\tjQuery(luga.ajaxform.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tformNode.submit(function(event){\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\tvar formHandler = new luga.ajaxform.Sender({\r\n\t\t\t\t\tformNode: formNode\r\n\t\t\t\t});\r\n\t\t\t\tformHandler.send();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.ajaxform.initForms();\r\n\t});\r\n\r\n}());","/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.csi\");\r\n\r\n\tluga.csi.version = \"1.1.2\";\r\n\r\n\tluga.csi.CONST = {\r\n\t\tNODE_SELECTOR: \"div[data-lugacsi]\",\r\n\t\tURL_ATTRIBUTE: \"data-lugacsi\",\r\n\t\tAFTER_ATTRIBUTE: \"data-lugacsi-after\",\r\n\t\tMESSAGES: {\r\n\t\t\tFILE_NOT_FOUND: \"luga.csi failed to retrieve text from: {0}\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.csi.Include.options\r\n\t *\r\n\t * @property {jquery}   rootNode     Root node for widget (DOM reference). Required\r\n\t * @property {string}   url          Url to be included. Optional. Default to the value of the \"data-lugacsi\" attribute inside rootNode\r\n\t * @property {function} success      Function that will be invoked once the url is successfully fetched. Optional, default to the internal \"onSuccess\" method\r\n\t * @property {function} after        Function that will be invoked once the include is successfully performed.\r\n\t *                                   It will be called with the handler(rootNode, url, response) signature. Optional, it can be set using the \"data-lugacsi-after\" attribute\r\n\t * @property {function} error        Function that will be invoked if the url request fails. Optional, default to the internal \"onError\" method\r\n\t * @property {int}      xhrTimeout   Timeout for XHR call (ms). Optional. Default to 5000 ms\r\n\t */\r\n\r\n\t/**\r\n\t * Client-side Include widget\r\n\t *\r\n\t * @param {luga.csi.Include.options} options\r\n\t * @constructor\r\n\t */\r\n\tluga.csi.Include = function(options){\r\n\r\n\t\tvar onSuccess = function(response, textStatus, jqXHR){\r\n\t\t\tjQuery(config.rootNode).html(response);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @param {object}   jqXHR        jQuery wrapper around XMLHttpRequest\r\n\t\t * @param {string}   textStatus   HTTP status\r\n\t\t * @param {string}   errorThrown\r\n\t\t * @throws\r\n\t\t */\r\n\t\tvar onError = function(qXHR, textStatus, errorThrown){\r\n\t\t\tthrow(luga.string.format(luga.csi.CONST.MESSAGES.FILE_NOT_FOUND, [config.url]));\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\t\t\turl: jQuery(options.rootNode).attr(luga.csi.CONST.URL_ATTRIBUTE),\r\n\t\t\tafter: jQuery(options.rootNode).attr(luga.csi.CONST.AFTER_ATTRIBUTE),\r\n\t\t\tsuccess: onSuccess,\r\n\t\t\terror: onError,\r\n\t\t\txhrTimeout: 5000\r\n\t\t};\r\n\t\tluga.merge(config, options);\r\n\r\n\t\tthis.load = function(){\r\n\t\t\tjQuery.ajax({\r\n\t\t\t\turl: config.url,\r\n\t\t\t\ttimeout: config.XHR_TIMEOUT,\r\n\t\t\t\tsuccess: function(response, textStatus, jqXHR){\r\n\t\t\t\t\tconfig.success.apply(null, [response, textStatus, jqXHR]);\r\n\t\t\t\t\tvar afterHandler = luga.lookupFunction(config.after);\r\n\t\t\t\t\tif(afterHandler !== undefined){\r\n\t\t\t\t\t\tafterHandler.apply(null, [config.rootNode, config.url, response]);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\terror: function(jqXHR, textStatus, errorThrown){\r\n\t\t\t\t\tconfig.error.apply(null, [jqXHR, textStatus, errorThrown]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * Invoke this to programmatically load CSI inside the current document\r\n\t */\r\n\tluga.csi.loadIncludes = function(){\r\n\t\tjQuery(luga.csi.CONST.NODE_SELECTOR).each(function(index, item){\r\n\t\t\tvar includeObj = new luga.csi.Include({rootNode: item});\r\n\t\t\tincludeObj.load();\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.csi.loadIncludes();\r\n\t});\r\n\r\n}());","/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\tluga.validator.version = \"0.9.2\";\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructs\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t */\r\n\tluga.validator.initForms = function(){\r\n\t\tjQuery(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() === true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(null, []);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}