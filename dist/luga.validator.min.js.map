{"version":3,"sources":["luga.validator.js"],"names":["luga","namespace","validator","handlers","errorAlert","formNode","validators","errorMsg","focusGiven","i","length","message","getFocus","alert","errorBox","htmlStr","name","utils","displayErrorMessage","removeDisplayBox","bootstrap","jQuery","find","removeClass","remove","fieldNode","node","parent","addClass","before","string","format","CONST","FORM_SELECTOR","RULE_PREFIX","DEFAULT_DATE_PATTERN","CUSTOM_ATTRIBUTES","VALIDATE","ERROR","BEFORE","AFTER","BLOCK_SUBMIT","MESSAGE","ERROR_CLASS","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MESSAGES","MISSING_FORM","MISSING_FIELD","MISSING_FUNCTION","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","HANDLERS","FORM_ERROR","FormValidator","options","this","config","blocksubmit","attr","error","after","merge","JSON","parse","self","dirtyValidators","init","formDom","elements","form","isInputField","push","fieldValidatorFactory","getInstance","validate","event","executedValidators","undefined","isValid","preventDefault","disableSubmit","buttons","each","index","item","buttonNode","val","callBack","lookupFunction","apply","prop","SelectValidator","RadioValidator","inputGroup","getFieldGroup","CheckboxValidator","TextValidator","BaseFieldValidator","constructor","errorclass","flagInvalid","flagValid","removeAttr","required","pattern","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","extend","e","type","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","parseInt","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","fieldValue","containsAt","indexOf","containDot","secondFieldNode","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","test","lettersonly","RegExp","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","split","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","initForms","rootNode","submit","api","validateForm","formValidator","validateField","fieldValidator","validateFields","fields","j","validateChildFields","getChildFields","document","ready"],"mappings":";;;;;AAGA,GAAA,oBAAA,KACA,KAAA,+BAFA,WACA,aAEAA,KAAAC,UAAA,kBAIAD,KAAAC,UAAA,2BAQAD,KAAAE,UAAAC,SAAAC,WAAA,SAAAC,SAAAC,YAGA,IAFA,IAAAC,SAAA,GACAC,YAAA,EACAC,EAAA,EAAAA,EAAAH,WAAAI,OAAAD,IAEAF,UAAAD,WAAAG,GAAAE,QAAA,MAGA,IAAAH,YAAAF,WAAAG,GAAA,WACAH,WAAAG,GAAAG,WACAJ,YAAA,GAIA,KAAAD,UACAM,MAAAN,WAUAP,KAAAE,UAAAC,SAAAW,SAAA,SAAAT,SAAAC,YAEA,GAAA,IAAAA,WAAAI,OAAA,CAOA,IAHA,IAAAF,YAAA,EACAO,QAAA,OAEAN,EAAA,EAAAA,EAAAH,WAAAI,OAAAD,IACAM,SAAA,WAAAT,WAAAG,GAAAO,KAAA,WAAAV,WAAAG,GAAAE,QAAA,SAEA,IAAAH,YAAAF,WAAAG,GAAA,WACAH,WAAAG,GAAAG,WACAJ,YAAA,GAGAO,SAAA,QACAf,KAAAiB,MAAAC,oBAAAb,SAAAU,cAfAf,KAAAiB,MAAAE,iBAAAd,WAwBAL,KAAAE,UAAAC,SAAAiB,UAAA,SAAAf,SAAAC,YAUAe,OAAAhB,UAAAiB,KATA,cASAC,YARA,aASAF,OAAAhB,UAAAiB,KARA,iBAQAE,SAGA,IADA,IAAAhB,YAAA,EACAC,EAAA,EAAAA,EAAAH,WAAAI,OAAAD,IAAA,CACA,IAAAgB,UAAAJ,OAAAf,WAAAG,GAAAiB,MAEAD,UAAAE,SAAAC,SAfA,aAiBAH,UAAAI,OAAAR,OAAArB,KAAA8B,OAAAC,OAdA,+IAcAzB,WAAAG,GAAAE,aAGA,IAAAH,YAAAF,WAAAG,GAAA,WACAH,WAAAG,GAAAG,WACAJ,YAAA,KAKAR,KAAAE,UAAA8B,OACAC,cAAA,oCACAC,YAAA,sBACAC,qBAAA,aACAC,mBACAC,SAAA,8BACAC,MAAA,2BACAC,OAAA,4BACAC,MAAA,2BACAC,aAAA,iCACAC,QAAA,6BACAC,YAAA,gCACAC,SAAA,8BACAC,QAAA,6BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,WAAA,+BACAC,aAAA,iCACAC,SAAA,6BACAC,SAAA,6BACAC,SAAA,6BACAC,YAAA,gCACAC,YAAA,gCACAC,cAAA,kCACAC,cAAA,kCACAC,iBAAA,oCAEAC,UACAC,aAAA,yCACAC,cAAA,0CACAC,iBAAA,0DACAC,wBAAA,yDACAC,yBAAA,yDACAC,wBAAA,gCACAC,kBAAA,iDACAC,wBAAA,sDACAC,uBAAA,qEAEAC,UACAC,WAAA,uCAwBAtE,KAAAE,UAAAqE,cAAA,SAAAC,SAEAC,KAAAC,QAEAC,YAAAtD,OAAAmD,QAAAnE,UAAAuE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAK,eAAA,OACAoC,MAAAxD,OAAAmD,QAAAnE,UAAAuE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAE,QAAAtC,KAAAE,UAAA8B,MAAAqC,SAAAC,WAEAzC,OAAAR,OAAAmD,QAAAnE,UAAAuE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAG,SAAA,KACAuC,MAAAzD,OAAAmD,QAAAnE,UAAAuE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAI,QAAA,MAEAxC,KAAA+E,MAAAN,KAAAC,OAAAF,SAEAC,KAAAC,OAAAC,YAAAK,KAAAC,MAAAR,KAAAC,OAAAC,aAGA,IAAAO,KAAAT,KAQA,GANAS,KAAA5E,cAEA4E,KAAAC,mBAEAD,KAAAR,OAAArE,SAAAgB,OAAA6D,KAAAR,OAAArE,UAEA,IAAAgB,OAAA6D,KAAAR,OAAArE,UAAAK,OACA,MAAAV,KAAAE,UAAA8B,MAAA2B,SAAA,aAGAc,KAAAW,KAAA,WACAF,KAAA5E,cACA4E,KAAAC,mBAEA,IADA,IAAAE,QAAAH,KAAAR,OAAArE,SAAA,GACAI,EAAA,EAAAA,EAAA4E,QAAAC,SAAA5E,OAAAD,KAEA,IAAAT,KAAAuF,KAAAtE,MAAAuE,aAAAH,QAAAC,SAAA7E,KACAyE,KAAA5E,WAAAmF,KAAAzF,KAAAE,UAAAwF,sBAAAC,aACAlE,UAAA4D,QAAAC,SAAA7E,GACAJ,SAAA6E,KAAAR,OAAArE,aAaAoE,KAAAmB,SAAA,SAAAC,OACAX,KAAAE,OACAF,KAAArD,OAAAgE,OAGA,IADA,IAAAC,sBACArF,EAAA,EAAAA,EAAAyE,KAAA5E,WAAAI,OAAAD,IACA,QAAAsF,IAAAb,KAAA5E,WAAAG,SAAAsF,IAAAb,KAAA5E,WAAAG,GAAAmF,SAAA,CACA,QAAAG,IAAAD,mBAAAZ,KAAA5E,WAAAG,GAAAO,MAEA,UAEA,IAAAkE,KAAA5E,WAAAG,GAAAmF,YACAV,KAAAC,gBAAAM,KAAAP,KAAA5E,WAAAG,IAEAqF,mBAAAZ,KAAA5E,WAAAG,GAAAO,OAAA,EAgBA,OAbA,IAAAkE,KAAAc,WACAd,KAAAL,aACAkB,IAAAF,OACAA,MAAAI,oBAIA,IAAAxB,KAAAC,OAAAC,aAEAO,KAAAgB,gBAEAhB,KAAAJ,MAAAe,QAEAX,KAAAC,iBAGAV,KAAAyB,cAAA,WACA,IAAAC,QAAA9E,OAAA,qBAAA6D,KAAAR,OAAArE,UACAgB,OAAA8E,SAAAC,KAAA,SAAAC,MAAAC,MACA,IAAAC,WAAAlF,OAAAiF,WACAP,IAAAQ,WAAA3B,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAsB,mBACA6C,WAAAC,IAAAD,WAAA3B,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAsB,sBASAe,KAAAuB,QAAA,WACA,OAAA,IAAAd,KAAAC,gBAAAzE,QAGA+D,KAAA5C,OAAA,SAAAgE,OACA,GAAA,OAAAX,KAAAR,OAAA7C,OAAA,CACA,IAAA4E,SAAAzG,KAAA0G,eAAAxB,KAAAR,OAAA7C,QACA,QAAAkE,IAAAU,SAIA,MAAAzG,KAAA8B,OAAAC,OAAA/B,KAAAE,UAAA8B,MAAA2B,SAAAG,kBAAAoB,KAAAR,OAAA7C,SAHA4E,SAAAE,MAAA,MAAAzB,KAAAR,OAAArE,SAAAwF,UAQApB,KAAAI,MAAA,WACA,IAAA4B,SAAAzG,KAAA0G,eAAAxB,KAAAR,OAAAG,OACA,QAAAkB,IAAAU,SAIA,MAAAzG,KAAA8B,OAAAC,OAAA/B,KAAAE,UAAA8B,MAAA2B,SAAAG,kBAAAoB,KAAAR,OAAAG,QAHA4B,SAAAE,MAAA,MAAAzB,KAAAR,OAAArE,SAAA6E,KAAAC,mBAOAV,KAAAK,MAAA,SAAAe,OACA,GAAA,OAAAX,KAAAR,OAAAI,MAAA,CACA,IAAA2B,SAAAzG,KAAA0G,eAAAxB,KAAAR,OAAAI,OACA,QAAAiB,IAAAU,SAIA,MAAAzG,KAAA8B,OAAAC,OAAA/B,KAAAE,UAAA8B,MAAA2B,SAAAG,kBAAAoB,KAAAR,OAAAI,QAHA2B,SAAAE,MAAA,MAAAzB,KAAAR,OAAArE,SAAAwF,WAUA7F,KAAAC,UAAA,wCAoBAD,KAAAE,UAAAwF,sBAAAC,YAAA,SAAAnB,SAEAC,KAAAC,UACA1E,KAAA+E,MAAAN,KAAAC,OAAAF,SAGA,IAAA,IAAAxE,KAAAuF,KAAAtE,MAAAuE,aAFAf,KAEAC,OAAAjD,WACA,OAAA,KAIA,OAFAJ,OALAoD,KAKAC,OAAAjD,WAAAmF,KAAA,SAIA,IAAA,kBAGA,IAAA,aACA,OAAA,IAAA5G,KAAAE,UAAA2G,gBAAApC,KAAAC,QAEA,IAAA,QACA,QAAAqB,IAAA1E,OAAAoD,KAAAC,OAAAjD,WAAAmD,KAAA,QACA,OAAA,IAAA5E,KAAAE,UAAA4G,gBACAC,WAAA/G,KAAAuF,KAAAtE,MAAA+F,cAAA3F,OAAAoD,KAAAC,OAAAjD,WAAAmD,KAAA,QAAAH,KAAAC,OAAArE,YAGA,MAEA,IAAA,WACA,QAAA0F,IAAA1E,OAAAoD,KAAAC,OAAAjD,WAAAmD,KAAA,QACA,OAAA,IAAA5E,KAAAE,UAAA+G,mBACAF,WAAA/G,KAAAuF,KAAAtE,MAAA+F,cAAA3F,OAAAoD,KAAAC,OAAAjD,WAAAmD,KAAA,QAAAH,KAAAC,OAAArE,YAGA,MAEA,QACA,OAAA,IAAAL,KAAAE,UAAAgH,cAAAzC,KAAAC,UAuBA1E,KAAAE,UAAAiH,mBAAA,SAAA3C,SAEA,GAAAC,KAAA2C,cAAApH,KAAAE,UAAAiH,mBACA,MAAAnH,KAAAE,UAAA8B,MAAA2B,SAAA,wBAIAc,KAAAC,QACA/D,QAAAU,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAM,UAAA,GACA2E,WAAAhG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAO,cAAA,IAEA3C,KAAA+E,MAAAN,KAAAC,OAAAF,SAEAC,KAAA/C,KAAAL,OAAAmD,QAAA/C,WACAgD,KAAA9D,QAAA8D,KAAAC,OAAA/D,QACA8D,KAAAzD,KAAA,QAEA+E,IAAAtB,KAAA/C,KAAAkD,KAAA,QACAH,KAAAzD,KAAAyD,KAAA/C,KAAAkD,KAAA,aAEAmB,IAAAtB,KAAA/C,KAAAkD,KAAA,QACAH,KAAAzD,KAAAyD,KAAA/C,KAAAkD,KAAA,OASAH,KAAAuB,QAAA,aAGAvB,KAAA6C,YAAA,WACA7C,KAAA/C,KAAAE,SAAA6C,KAAAC,OAAA2C,YAEA5C,KAAA/C,KAAAkD,KAAA,QAAAH,KAAA9D,UAGA8D,KAAA8C,UAAA,WACA9C,KAAA/C,KAAAH,YAAAkD,KAAAC,OAAA2C,YACA5C,KAAA/C,KAAA8F,WAAA,UAOA/C,KAAAmB,SAAA,WAEA,OAAA,IAAAnB,KAAA/C,KAAAkF,KAAA,aACAnC,KAAA8C,aACA,IAEA,IAAA9C,KAAAuB,WACAvB,KAAA6C,eACA,IAGA7C,KAAA8C,aACA,KAkCAvH,KAAAE,UAAAgH,cAAA,SAAA1C,SAmBA,GAhBAC,KAAAC,QACA+C,SAAApG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAQ,UACA8E,QAAArG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAS,SACA8E,UAAAtG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAU,YACA8E,UAAAvG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAW,YACA8E,UAAAxG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAY,YACA8E,UAAAzG,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAa,YACA8E,YAAA1G,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAc,eAAAlD,KAAAE,UAAA8B,MAAAG,qBACA6F,QAAA3G,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAe,UACA8E,QAAA5G,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAgB,UACA8E,QAAA7G,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAiB,WAGArD,KAAA+E,MAAAN,KAAAC,OAAAF,SACAxE,KAAAmI,OAAAnI,KAAAE,UAAAiH,mBAAA1C,MAAAA,KAAAC,cAEAqB,IAAAtB,KAAAC,OAAA+C,SACA,IAEAhD,KAAAC,OAAA+C,SAAAzC,KAAAC,MAAAR,KAAAC,OAAA+C,UAEA,MAAAW,IAMA,IAAAlD,KAAAT,KAGA,GADAS,KAAAxD,KAAAL,OAAAmD,QAAA/C,WACA,IAAAyD,KAAAxD,KAAAhB,OACA,MAAAV,KAAAE,UAAA8B,MAAA2B,SAAA,cAEAuB,KAAAmD,KAAA,OAGA5D,KAAA7D,SAAA,WAEA,IACAsE,KAAAxD,KAAA4G,QACApD,KAAAxD,KAAA6G,SAEA,MAAAH,MAOA3D,KAAA+D,QAAA,WACA,MAAA,KAAAtD,KAAAxD,KAAA8E,OAMA/B,KAAAgE,WAAA,WACA,IAAAC,YAAAjE,KAAAC,OAAA+C,SACA,IAAA,IAAAiB,YACA,OAAA,EAEA,IAAA,IAAAA,YACA,OAAA,EAGA,IAAAC,kBAAA3I,KAAA0G,eAAAgC,aACA,QAAA3C,IAAA4C,kBACA,OAAAA,kBAAAhC,MAAA,MAAAzB,KAAAxD,OAGA,MAAA1B,KAAA8B,OAAAC,OAAA/B,KAAAE,UAAA8B,MAAA2B,SAAAG,kBAAA4E,eAUAjE,KAAAuB,QAAA,WACA,GAAAd,KAAAsD,UACA,OAAA,IAAAtD,KAAAuD,aASA,IAAA,IAAAG,QAAA5I,KAAAE,UAAA2I,MAEA,QAAA9C,IAAAb,KAAAxD,KAAAkD,KAAA5E,KAAAE,UAAA8B,MAAAE,YAAA0G,QAEA,IAAA5I,KAAAE,UAAA2I,MAAAD,MAAAjC,MAAA,MAAAzB,KAAAxD,KAAAwD,OACA,OAAA,EAKA,OAAA,IAsBAlF,KAAAE,UAAA2G,gBAAA,SAAArC,SAGAC,KAAAC,QACAoE,aAAAzH,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAoB,eACAuF,aAAA1H,OAAAmD,QAAA/C,WAAAmD,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAqB,gBAGAzD,KAAA+E,MAAAN,KAAAC,OAAAF,SACAxE,KAAAmI,OAAAnI,KAAAE,UAAAiH,mBAAA1C,MAAAA,KAAAC,SAGA,IAAAQ,KAAAT,KAGA,GAFAS,KAAAmD,KAAA,SACAnD,KAAAxD,KAAAL,OAAAmD,QAAA/C,WACA,IAAAyD,KAAAxD,KAAAhB,OACA,MAAAV,KAAAE,UAAA8B,MAAA2B,SAAA,cAIA,QAAAoC,IAAAb,KAAAR,OAAAoE,eAAAzH,OAAA2H,UAAA9D,KAAAR,OAAAoE,cACA,MAAA9I,KAAAE,UAAA8B,MAAA2B,SAAA,wBAKA,IAAAsF,aAAA/D,KAAAxD,KAAAkF,KAAA,kBACA,IAAAqC,eACAA,aAAA,GAEAA,aAAAC,SAAAD,aAAA,IAQAxE,KAAAuB,QAAA,WAEA,OAAAiD,eAAAC,SAAAhE,KAAAR,OAAAoE,aAAA,KAIA5D,KAAAxD,KAAA8E,QAAAtB,KAAAR,OAAAqE,eA4BA/I,KAAAE,UAAAiJ,mBAAA,SAAA3E,SAEA,GAAAC,KAAA2C,cAAApH,KAAAE,UAAAiJ,mBACA,MAAAnJ,KAAAE,UAAA8B,MAAA2B,SAAA,yBAGAc,KAAAC,UACA1E,KAAA+E,MAAAN,KAAAC,OAAAF,SACAC,KAAAsC,WAAAtC,KAAAC,OAAAqC,WACAtC,KAAAzD,KAAAK,OAAAoD,KAAAC,OAAAqC,YAAAnC,KAAA,QACAH,KAAA9D,QAAA,GACA8D,KAAA4C,WAAA,GAGA,IAAA,IAAA5G,EAAA,EAAAA,EAAAgE,KAAAsC,WAAArG,OAAAD,IAAA,CACA,IAAA2I,MAAA/H,OAAAoD,KAAAsC,WAAAtG,SACAsF,IAAAqD,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAM,WACA+B,KAAA9D,QAAAyI,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAM,eAEAqD,IAAAqD,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAO,eACA8B,KAAA4C,WAAA+B,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAO,cAUA8B,KAAAuB,QAAA,aAGAvB,KAAA6C,YAAA,WAEA,GAAA,KAAA7C,KAAA4C,WACA,IAAA,IAAA5G,EAAA,EAAAA,EAAAgE,KAAAsC,WAAArG,OAAAD,IAAA,CACA,IAAA2I,MAAA/H,OAAAoD,KAAAsC,WAAAtG,IACA2I,MAAAxH,SAAA6C,KAAA4C,YACA+B,MAAAxE,KAAA,QAAAH,KAAA9D,WAKA8D,KAAA8C,UAAA,WACA,GAAA,KAAA9C,KAAA4C,WACA,IAAA,IAAA5G,EAAA,EAAAA,EAAAgE,KAAAsC,WAAArG,OAAAD,IAAA,CACA,IAAA2I,MAAA/H,OAAAoD,KAAAsC,WAAAtG,IACA2I,MAAA7H,YAAAkD,KAAA4C,YACA+B,MAAA5B,WAAA,WASA/C,KAAAmB,SAAA,WACA,OAAA,IAAAnB,KAAAuB,WACAvB,KAAA8C,aACA,IAGA9C,KAAA6C,eACA,KAsBAtH,KAAAE,UAAA4G,eAAA,SAAAtC,SAEAC,KAAAC,UACA1E,KAAA+E,MAAAN,KAAAC,OAAAF,SACAxE,KAAAmI,OAAAnI,KAAAE,UAAAiJ,mBAAA1E,MAAAA,KAAAC,SACAD,KAAA4D,KAAA,QAMA5D,KAAAgE,WAAA,WAIA,IAHA,IAAAY,cAAA,EACAC,WAAA7E,KAAAsC,WAEAtG,EAAA,EAAAA,EAAA6I,WAAA5I,OAAAD,IAAA,CACA,IAAA2I,MAAA/H,OAAAiI,WAAA7I,KACA,IAAA2I,MAAAxC,KAAA,aACAwC,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAQ,YACAyG,aAAAD,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAQ,WAIA,OAAAyG,cASA5E,KAAAuB,QAAA,WACA,GAAA,SAAAvB,KAAAgE,aAAA,CAEA,IADA,IAAAa,WAAA7E,KAAAsC,WACAtG,EAAA,EAAAA,EAAA6I,WAAA5I,OAAAD,IAAA,CAGA,IAAA,IAFAY,OAAAiI,WAAA7I,IAEAmG,KAAA,WACA,OAAA,EAGA,OAAA,EAEA,OAAA,IAsBA5G,KAAAE,UAAA+G,kBAAA,SAAAzC,SAEAC,KAAAC,UACA1E,KAAA+E,MAAAN,KAAAC,OAAAF,SACAxE,KAAAmI,OAAAnI,KAAAE,UAAAiJ,mBAAA1E,MAAAA,KAAAC,SACAD,KAAA4D,KAAA,WACA5D,KAAA8E,WAAA,EACA9E,KAAA+E,WAAA/E,KAAAC,OAAAqC,WAAArG,OAGA,IAAA,IAAAD,EAAA,EAAAA,EAAAgE,KAAAsC,WAAArG,OAAAD,IAAA,CACA,IAAA2I,MAAA/H,OAAAoD,KAAAsC,WAAAtG,KACA,IAAA2I,MAAAxC,KAAA,mBACAb,IAAAqD,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAkB,eACAmB,KAAA8E,WAAAH,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAkB,mBAEAyC,IAAAqD,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAmB,eACAkB,KAAA+E,WAAAJ,MAAAxE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAmB,eAUAkB,KAAAuB,QAAA,WAGA,IAFA,IAAAyD,aAAA,EACAH,WAAA7E,KAAAsC,WACAtG,EAAA,EAAAA,EAAA6I,WAAA5I,OAAAD,IAAA,CAEA,IAAA2I,MAAA/H,OAAAoD,KAAAsC,WAAAtG,KACA,IAAA2I,MAAAxC,KAAA,cACA,IAAAwC,MAAAxC,KAAA,YACA6C,eAIA,OAAAA,cAAAhF,KAAA8E,YAAAE,cAAAhF,KAAA+E,aAOAxJ,KAAAC,UAAA,wBAOAD,KAAAE,UAAA2I,MAAAa,MAAA,SAAAjI,UAAAvB,WACA,IAAAyJ,WAAAlI,UAAA+E,MACAoD,YAAA,IAAAD,WAAAE,QAAA,KACAC,YAAA,IAAAH,WAAAE,QAAA,KACA,OAAA,IAAAD,aAAA,IAAAE,YAYA9J,KAAAE,UAAA2I,MAAAX,QAAA,SAAAzG,UAAAvB,WACA,IAAA6J,gBAAA1I,OAAA,IAAAnB,UAAAwE,OAAAwD,SACA,GAAA,IAAA6B,gBAAArJ,OACA,MAAAV,KAAA8B,OAAAC,OAAA/B,KAAAE,UAAA8B,MAAA2B,SAAAS,wBAAAlE,UAAAwE,OAAAwD,UAEA,OAAAzG,UAAA+E,QAAAuD,gBAAAvD,OAQAxG,KAAAE,UAAA2I,MAAAd,YAAA,SAAAtG,UAAAvB,WAEA,OAAA,OADAF,KAAAE,UAAA8J,aAAAvI,UAAA+E,MAAAtG,UAAAwE,OAAAqD,cAYA/H,KAAAE,UAAA2I,MAAAZ,QAAA,SAAAxG,UAAAvB,WACA,IAAAwH,QAAAxH,UAAAwE,OAAAqD,YACAkC,UAAAjK,KAAAE,UAAA8J,aAAAvI,UAAA+E,MAAAkB,SACAwC,QAAAlK,KAAAE,UAAA8J,aAAA9J,UAAAwE,OAAAuD,QAAAP,SACA,OAAA,OAAAuC,WAAA,OAAAC,SACAD,WAAAC,SAUAlK,KAAAE,UAAA2I,MAAAb,QAAA,SAAAvG,UAAAvB,WACA,IAAAwH,QAAAxH,UAAAwE,OAAAqD,YACAkC,UAAAjK,KAAAE,UAAA8J,aAAAvI,UAAA+E,MAAAkB,SACAyC,QAAAnK,KAAAE,UAAA8J,aAAA9J,UAAAwE,OAAAsD,QAAAN,SACA,OAAA,OAAAuC,WAAA,OAAAE,SACAF,WAAAE,SAUAnK,KAAAE,UAAA2I,MAAAjB,UAAA,SAAAnG,UAAAvB,WACA,QAAAuB,UAAA+E,MAAA9F,OAAAR,UAAAwE,OAAAkD,YAWA5H,KAAAE,UAAA2I,MAAAlB,UAAA,SAAAlG,UAAAvB,WACA,QAAAuB,UAAA+E,MAAA9F,OAAAR,UAAAwE,OAAAiD,YAWA3H,KAAAE,UAAA2I,MAAAf,UAAA,SAAArG,UAAAvB,WACA,OAAA,IAAAmB,OAAA2H,UAAAvH,UAAA+E,QAGA4D,WAAA3I,UAAA+E,QAAA4D,WAAAlK,UAAAwE,OAAAoD,YAWA9H,KAAAE,UAAA2I,MAAAhB,UAAA,SAAApG,UAAAvB,WACA,OAAA,IAAAmB,OAAA2H,UAAAvH,UAAA+E,QAGA4D,WAAA3I,UAAA+E,QAAA4D,WAAAlK,UAAAwE,OAAAmD,YAYA7H,KAAAE,UAAA2I,MAAAnB,QAAA,SAAAjG,UAAAvB,WACA,IAAAmK,UAAArK,KAAAE,UAAAoK,SAAApK,UAAAwE,OAAAgD,SACA,QAAA3B,IAAAsE,UACA,OAAAA,UAAAE,KAAA9I,UAAA+E,OAIA,MAAAxG,KAAA8B,OAAAC,OAAA/B,KAAAE,UAAA8B,MAAA2B,SAAAO,mBAAAhE,UAAAwE,OAAAgD,WAMA1H,KAAAC,UAAA,2BAEAD,KAAAE,UAAAoK,SAAAE,YAAA,IAAAC,OAAA,eACAzK,KAAAE,UAAAoK,SAAAI,aAAA,IAAAD,OAAA,UACAzK,KAAAE,UAAAoK,SAAAK,QAAA,IAAAF,OAAA,mBACAzK,KAAAE,UAAAoK,SAAAM,gBAAA,IAAAH,OAAA,aACAzK,KAAAE,UAAAoK,SAAAO,OAAA,IAAAJ,OAAA,uDACAzK,KAAAE,UAAAoK,SAAAQ,aAAA,IAAAL,OAAA,6BACAzK,KAAAE,UAAAoK,SAAAS,aAAA,IAAAN,OAAA,kCACAzK,KAAAE,UAAAoK,SAAAU,aAAA,IAAAP,OAAA,6BACAzK,KAAAE,UAAAoK,SAAAW,SAAA,IAAAR,OAAA,qBACAzK,KAAAE,UAAAoK,SAAAY,KAAA,IAAAT,OAAA,mCAIAzK,KAAAC,UAAA,4BAaAD,KAAAE,UAAAiL,kBAAA,SAAAC,IAAAC,KAAAC,MAAAC,IAAAC,WACA,IAAAC,WAMA,OALAA,QAAAL,IAAA,IAAAX,OAAAW,KACAK,QAAAC,EAAAL,KACAI,QAAAE,EAAAL,MACAG,QAAAG,EAAAL,IACAE,QAAAI,EAAAL,UACAC,SAUAzL,KAAAE,UAAA8J,aAAA,SAAA8B,QAAAC,aACA,IAAAC,YAAAhM,KAAAE,UAAA+L,UAAAF,aACA,QAAAhG,IAAAiG,YAAA,CAGA,IAAAA,YAAAZ,IAAAb,KAAAuB,SACA,OAAA,KAKA,IAAAI,SAAAJ,QAAAK,MAAAH,YAAAH,GAEAO,SAAA,IAAAC,KAAAH,SAAAF,YAAAN,GAAAQ,SAAAF,YAAAL,GAAA,EAAAO,SAAAF,YAAAJ,IAEAU,YAAAF,SAAAG,gBAAArD,SAAAgD,SAAAF,YAAAN,GAAA,IACAc,aAAAJ,SAAAK,aAAAvD,SAAAgD,SAAAF,YAAAL,GAAA,EAAA,IACAe,WAAAN,SAAAO,YAAAzD,SAAAgD,SAAAF,YAAAJ,GAAA,IACA,OAAA,IAAAU,cAAA,IAAAE,eAAA,IAAAE,WACAN,SAEA,KAEA,OAAA,MAGApM,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,0CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,cAAAjM,KAAAE,UAAAiL,kBAAA,yCAAA,EAAA,EAAA,EAAA,KACAnL,KAAAE,UAAA+L,UAAA,YAAAjM,KAAAE,UAAAiL,kBAAA,2CAAA,EAAA,EAAA,EAAA,KAMAnL,KAAAE,UAAA0M,UAAA,SAAAC,eACA9G,IAAA8G,WACAA,SAAAxL,OAAA,SAEAwL,SAAAvL,KAAAtB,KAAAE,UAAA8B,MAAAC,eAAAmE,KAAA,SAAAC,MAAAC,MACA,IAAAjG,SAAAgB,OAAAiF,MAEA,SAAAjG,SAAAuE,KAAA5E,KAAAE,UAAA8B,MAAAI,kBAAAC,WACAhC,SAAAyM,OAAA,SAAAjH,OACA,IAAA7F,KAAAE,UAAAqE,eACAlE,SAAAA,WAEAuF,SAAAC,YAQA7F,KAAAC,UAAA,sBAeAD,KAAAE,UAAA6M,IAAAC,aAAA,SAAAxI,SACA,IAAAyI,cAAA,IAAAjN,KAAAE,UAAAqE,cAAAC,SAEA,OADAyI,cAAArH,WACAqH,cAAAjH,WAiBAhG,KAAAE,UAAA6M,IAAAG,cAAA,SAAA1I,SACA,IAAA,IAAAxE,KAAAuF,KAAAtE,MAAAuE,aAAAhB,QAAA/C,WACA,MAAAzB,KAAAE,UAAA8B,MAAA2B,SAAA,6BAGAoC,IAAAvB,QAAAK,QACAL,QAAAK,MAAA7E,KAAAE,UAAA8B,MAAAqC,SAAAC,YAEA,IAAAa,mBACAgI,eAAAnN,KAAAE,UAAAwF,sBAAAC,YAAAnB,SAEA,GADA2I,eAAAvH,SAAA,OACA,IAAAuH,eAAAnH,UAAA,CACA,IAAAS,SAAAzG,KAAA0G,eAAAlC,QAAAK,OACAM,gBAAAM,KAAA0H,gBACA1G,SAAAjC,QAAA/C,UAAA0D,iBAEA,OAAAgI,eAAAnH,WAgBAhG,KAAAE,UAAA6M,IAAAK,eAAA,SAAA5I,SAEAA,QAAAK,QACAL,QAAAK,MAAA7E,KAAAE,UAAA8B,MAAAqC,SAAAC,YAMA,IAJA,IAAAhE,cACAwF,sBACAX,mBAEA1E,EAAA,EAAAA,EAAA+D,QAAA6I,OAAA3M,OAAAD,KAEA,IAAAT,KAAAuF,KAAAtE,MAAAuE,aAAAhB,QAAA6I,OAAA5M,KACAH,WAAAmF,KAAAzF,KAAAE,UAAAwF,sBAAAC,aACAlE,UAAA+C,QAAA6I,OAAA5M,MAIA,IAAA,IAAA6M,EAAA,EAAAA,EAAAhN,WAAAI,OAAA4M,IAEA,GAAAhN,WAAAgN,IAAAhN,WAAAgN,GAAA1H,SAAA,CACA,QAAAG,IAAAD,mBAAAxF,WAAAgN,GAAAtM,MAEA,UAEA,IAAAV,WAAAgN,GAAA1H,YACAT,gBAAAM,KAAAnF,WAAAgN,IAEAxH,mBAAAxF,WAAAgN,GAAAtM,OAAA,EAGAmE,gBAAAzE,OAAA,GACAV,KAAA0G,eAAAlC,QAAAK,OACA8B,MAAA,MAAAnC,QAAAnE,SAAA8E,kBAEA,OAAA,IAAAA,gBAAAzE,QAgBAV,KAAAE,UAAA6M,IAAAQ,oBAAA,SAAA/I,SACA,IAAA6I,OAAArN,KAAAuF,KAAAtE,MAAAuM,eAAAhJ,QAAAqI,UACA,OAAA7M,KAAAE,UAAA6M,IAAAK,gBACAC,OAAAA,OACAxI,MAAAL,QAAAK,SAIAxD,OAAAoM,UAAAC,MAAA,WACA1N,KAAAE,UAAA0M,cAjuCA","file":"luga.validator.min.js","sourcesContent":["/*! \nLuga Validator 0.9.7 2018-02-10T14:54:16.349Z\nCopyright 2013-2018 Massimo Foti (massimo@massimocorner.com)\nLicensed under the Apache License, Version 2.0 | http://www.apache.org/licenses/LICENSE-2.0\n */\n/* globals alert */\r\n\r\n/* istanbul ignore if */\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jQuery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {Array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jQuery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {String}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {String}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {String}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {Boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructor\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {Array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {Object} event\r\n\t\t * @return {Array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery|undefined} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                          Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jQuery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @return {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {String} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {String} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {String} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {String} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {String} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {String} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {String} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {String} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {String} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {String} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt === true){\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(requiredAtt === false){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\tif(functionReference !== undefined){\r\n\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jQuery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {String|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {String} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {String} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// No need to care about other rules\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructor\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseGroupValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t/* istanbul ignore next */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jQuery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {Number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {Number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {String} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {String} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructor\r\n\t * @extend luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {jQuery} fieldNode\r\n\t * @param {luga.validator.FormValidator} validator\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param {regexp} rex\r\n\t * @param {Number} year\r\n\t * @param {Number} month\r\n\t * @param {Number} day\r\n\t * @param {String} separator\r\n\t *\r\n\t * @return {Object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {String}   dateStr\r\n\t * @param {String}   dateSpecKey\r\n\t * @return {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t * @param {jQuery} [rootNode=jQuery(\"body\")]  Optional, default to jQuery(\"body\")\r\n\t */\r\n\tluga.validator.initForms = function(rootNode){\r\n\t\tif(rootNode === undefined){\r\n\t\t\trootNode = jQuery(\"body\");\r\n\t\t}\r\n\t\trootNode.find(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jQuery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tformValidator.validate();\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options} options\r\n\t * @return {Boolean}\r\n\t * @throw {Exception}\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\t/* istanbul ignore else */\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() !== true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\tcallBack(options.fieldNode, dirtyValidators);\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jQuery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\t/* istanbul ignore else */\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = {};\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {Object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jQuery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options} options\r\n\t * @return {Boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}