{"version":3,"sources":["luga.validator.min.js","luga.validator.js"],"names":["luga","namespace","validator","version","handlers","errorAlert","formNode","validators","errorMsg","focusGiven","i","length","message","getFocus","alert","errorBox","utils","removeDisplayBox","htmlStr","name","displayErrorMessage","bootstrap","ERROR_SELECTOR","ERROR_CLASS","ALERT_SELECTOR","FAILED_UPDATE","jQuery","find","removeClass","remove","fieldNode","node","parent","addClass","before","string","format","CONST","FORM_SELECTOR","RULE_PREFIX","DEFAULT_DATE_PATTERN","CUSTOM_ATTRIBUTES","VALIDATE","ERROR","BEFORE","AFTER","BLOCK_SUBMIT","MESSAGE","REQUIRED","PATTERN","MIN_LENGTH","MAX_LENGTH","MIN_NUMBER","MAX_NUMBER","DATE_PATTERN","MIN_DATE","MAX_DATE","EQUAL_TO","MIN_CHECKED","MAX_CHECKED","INVALID_INDEX","INVALID_VALUE","DISABLED_MESSAGE","MESSAGES","MISSING_FORM","MISSING_FIELD","MISSING_FUNCTION","BASE_VALIDATOR_ABSTRACT","GROUP_VALIDATOR_ABSTRACT","FIELD_CANT_BE_VALIDATED","PATTERN_NOT_FOUND","INVALID_INDEX_PARAMETER","MISSING_EQUAL_TO_FIELD","HANDLERS","FORM_ERROR","FormValidator","options","this","config","blocksubmit","attr","error","after","merge","JSON","parse","self","dirtyValidators","init","formDom","elements","form","isInputField","push","fieldValidatorFactory","getInstance","validate","event","executedValidators","undefined","isValid","preventDefault","disableSubmit","buttons","each","index","item","buttonNode","val","callBack","lookupFunction","apply","fieldType","prop","SelectValidator","RadioValidator","inputGroup","getFieldGroup","CheckboxValidator","TextValidator","BaseFieldValidator","constructor","errorclass","flagInvalid","flagValid","removeAttr","required","pattern","minlength","maxlength","minnumber","maxnumber","datepattern","mindate","maxdate","equalto","extend","e","type","focus","select","isEmpty","isRequired","requiredAtt","functionReference","rule","rules","invalidindex","invalidvalue","isNumeric","currentIndex","parseInt","BaseGroupValidator","field","requiredFlag","fieldGroup","minchecked","maxchecked","checkCounter","email","fieldValue","containsAt","indexOf","containDot","secondFieldNode","datObj","dateStrToObj","valueDate","maxDate","minDate","parseFloat","regExpObj","patterns","test","lettersonly","RegExp","alphanumeric","integer","positiveinteger","number","filepath_pdf","filepath_jpg","filepath_zip","filepath","time","createDateSpecObj","rex","year","month","day","separator","infoObj","y","m","d","s","dateStr","dateSpecKey","dateSpecObj","dateSpecs","dateBits","split","testDate","Date","yearMatches","getFullYear","monthMatches","getMonth","dayMatches","getDate","initForms","submit","formValidator","api","validateForm","validateField","fieldValidator","validateFields","fields","j","validateChildFields","getChildFields","rootNode","document","ready"],"mappings":"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","file":"luga.validator.min.js","sourcesContent":[null,"/* globals alert */\r\n\r\nif(typeof(luga) === \"undefined\"){\r\n\tthrow(\"Unable to find Luga JS Core\");\r\n}\r\n\r\n(function(){\r\n\t\"use strict\";\r\n\r\n\tluga.namespace(\"luga.validator\");\r\n\r\n\tluga.validator.version = \"0.9.12\";\r\n\r\n\t/* Validation handlers */\r\n\r\n\tluga.namespace(\"luga.validator.handlers\");\r\n\r\n\t/**\r\n\t * Display error messages inside alert\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorAlert = function(formNode, validators){\r\n\t\tvar errorMsg = \"\";\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\t// Append to the error string\r\n\t\t\terrorMsg += validators[i].message + \"\\n\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(errorMsg !== \"\"){\r\n\t\t\talert(errorMsg);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Display errors inside a box above the form\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.errorBox = function(formNode, validators){\r\n\t\t// Clean-up any existing box\r\n\t\tif(validators.length === 0){\r\n\t\t\tluga.utils.removeDisplayBox(formNode);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tvar focusGiven = false;\r\n\t\tvar htmlStr = \"<ul>\";\r\n\t\t// Create a <ul> for each error\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\thtmlStr += \"<li><em>\" + validators[i].name + \": </em> \" + validators[i].message + \"</li>\";\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\thtmlStr += \"</ul>\";\r\n\t\tluga.utils.displayErrorMessage(formNode, htmlStr);\r\n\t};\r\n\r\n\t/**\r\n\t * Use Bootstrap validation states to display errors\r\n\t *\r\n\t * @param {jquery}                                      formNode      jQuery object wrapping the form\r\n\t * @param {array.<luga.validator.BaseFieldValidator>}   validators    Array of field validators\r\n\t */\r\n\tluga.validator.handlers.bootstrap = function(formNode, validators){\r\n\t\tvar ERROR_SELECTOR = \".has-error\";\r\n\t\tvar ERROR_CLASS = \"has-error\";\r\n\t\tvar ALERT_SELECTOR = \".alert-danger\";\r\n\r\n\t\tvar FAILED_UPDATE = \"<div class=\\\"alert alert-danger\\\" role=\\\"alert\\\">\" +\r\n\t\t\t\"<span style=\\\"padding-right:10px\\\" class=\\\"glyphicon glyphicon-exclamation-sign\\\">\" +\r\n\t\t\t\"</span>{0}</div>\";\r\n\r\n\t\t// Reset all fields in the form\r\n\t\tjQuery(formNode).find(ERROR_SELECTOR).removeClass(ERROR_CLASS);\r\n\t\tjQuery(formNode).find(ALERT_SELECTOR).remove();\r\n\r\n\t\tvar focusGiven = false;\r\n\t\tfor(var i = 0; i < validators.length; i++){\r\n\t\t\tvar fieldNode = jQuery(validators[i].node);\r\n\t\t\t// Attach Bootstrap CSS to parent node\r\n\t\t\tfieldNode.parent().addClass(ERROR_CLASS);\r\n\t\t\t// Display alert message\r\n\t\t\tfieldNode.before(jQuery(luga.string.format(FAILED_UPDATE, [validators[i].message])));\r\n\t\t\t// Give focus to the first invalid text field\r\n\t\t\tif((focusGiven === false) && (validators[i].getFocus)){\r\n\t\t\t\tvalidators[i].getFocus();\r\n\t\t\t\tfocusGiven = true;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tluga.validator.CONST = {\r\n\t\tFORM_SELECTOR: \"form[data-lugavalidator-validate]\",\r\n\t\tRULE_PREFIX: \"data-lugavalidator-\",\r\n\t\tDEFAULT_DATE_PATTERN: \"YYYY-MM-DD\",\r\n\t\tCUSTOM_ATTRIBUTES: {\r\n\t\t\tVALIDATE: \"data-lugavalidator-validate\",\r\n\t\t\tERROR: \"data-lugavalidator-error\",\r\n\t\t\tBEFORE: \"data-lugavalidator-before\",\r\n\t\t\tAFTER: \"data-lugavalidator-after\",\r\n\t\t\tBLOCK_SUBMIT: \"data-lugavalidator-blocksubmit\",\r\n\t\t\tMESSAGE: \"data-lugavalidator-message\",\r\n\t\t\tERROR_CLASS: \"data-lugavalidator-errorclass\",\r\n\t\t\tREQUIRED: \"data-lugavalidator-required\",\r\n\t\t\tPATTERN: \"data-lugavalidator-pattern\",\r\n\t\t\tMIN_LENGTH: \"data-lugavalidator-minlength\",\r\n\t\t\tMAX_LENGTH: \"data-lugavalidator-maxlength\",\r\n\t\t\tMIN_NUMBER: \"data-lugavalidator-minnumber\",\r\n\t\t\tMAX_NUMBER: \"data-lugavalidator-maxnumber\",\r\n\t\t\tDATE_PATTERN: \"data-lugavalidator-datepattern\",\r\n\t\t\tMIN_DATE: \"data-lugavalidator-mindate\",\r\n\t\t\tMAX_DATE: \"data-lugavalidator-maxdate\",\r\n\t\t\tEQUAL_TO: \"data-lugavalidator-equalto\",\r\n\t\t\tMIN_CHECKED: \"data-lugavalidator-minchecked\",\r\n\t\t\tMAX_CHECKED: \"data-lugavalidator-maxchecked\",\r\n\t\t\tINVALID_INDEX: \"data-lugavalidator-invalidindex\",\r\n\t\t\tINVALID_VALUE: \"data-lugavalidator-invalidvalue\",\r\n\t\t\tDISABLED_MESSAGE: \"data-lugavalidator-disabledlabel\"\r\n\t\t},\r\n\t\tMESSAGES: {\r\n\t\t\tMISSING_FORM: \"luga.validator was unable to load form\",\r\n\t\t\tMISSING_FIELD: \"luga.validator was unable to load field\",\r\n\t\t\tMISSING_FUNCTION: \"luga.validator was unable to find a function named: {0}\",\r\n\t\t\tBASE_VALIDATOR_ABSTRACT: \"luga.validator.BaseFieldValidator is an abstract class\",\r\n\t\t\tGROUP_VALIDATOR_ABSTRACT: \"luga.validator.BaseGroupValidator is an abstract class\",\r\n\t\t\tFIELD_CANT_BE_VALIDATED: \"This field can't be validated\",\r\n\t\t\tPATTERN_NOT_FOUND: \"luga.validator failed to retrieve pattern: {0}\",\r\n\t\t\tINVALID_INDEX_PARAMETER: \"data-lugavalidator-invalidindex accept only numbers\",\r\n\t\t\tMISSING_EQUAL_TO_FIELD: \"data-lugavalidator-equalto was unable to find field with id = {0}\"\r\n\t\t},\r\n\t\tHANDLERS: {\r\n\t\t\tFORM_ERROR: \"luga.validator.handlers.errorAlert\"\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.FormValidator.options\r\n\t *\r\n\t * @property {jquery}  formNode      Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {string}  error         Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t * @property {string}  before        Name of the function to be invoked before validation is performed. Default to null\r\n\t * @property {string}  after         Name of the function to be invoked after validation is performed. Default to null\r\n\t * @property {boolean} blocksubmit   Disable submit buttons if the form isn't valid\r\n\t *                                   This prevents multiple submits but also prevents the value of the submit buttons from being passed as part of the HTTP request\r\n\t *                                   Set this options to false to keep the submit buttons enabled\r\n\t */\r\n\r\n\t/**\r\n\t * Form validator class\r\n\t *\r\n\t * @constructs\r\n\t * @param {luga.validator.FormValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.FormValidator = function(options){\r\n\t\t/** @type {luga.validator.FormValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\t// Either: custom attribute, incoming option or default\r\n\t\t\tblocksubmit: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT) || \"true\",\r\n\t\t\terror: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR) || luga.validator.CONST.HANDLERS.FORM_ERROR,\r\n\t\t\t// Either: custom attribute, incoming option or null\r\n\t\t\tbefore: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE) || null,\r\n\t\t\tafter: jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER) || null\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\t\t// Hack to ensure it's a boolean\r\n\t\tthis.config.blocksubmit = JSON.parse(this.config.blocksubmit);\r\n\r\n\t\t/** @type {luga.validator.FormValidator} */\r\n\t\tvar self = this;\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.validators = [];\r\n\t\t/** @type {array.<luga.validator.BaseFieldValidator>} */\r\n\t\tself.dirtyValidators = [];\r\n\t\t// Ensure it's a jQuery object\r\n\t\tself.config.formNode = jQuery(self.config.formNode);\r\n\r\n\t\tif(jQuery(self.config.formNode).length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FORM);\r\n\t\t}\r\n\r\n\t\tthis.init = function(){\r\n\t\t\tself.validators = [];\r\n\t\t\tself.dirtyValidators = [];\r\n\t\t\tvar formDom = self.config.formNode[0];\r\n\t\t\tfor(var i = 0; i < formDom.elements.length; i++){\r\n\t\t\t\tif(luga.form.utils.isInputField(formDom.elements[i]) === true){\r\n\t\t\t\t\tself.validators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\t\tfieldNode: formDom.elements[i],\r\n\t\t\t\t\t\tformNode: self.config.formNode\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Execute all field validators. Returns an array of field validators that are in invalid state\r\n\t\t * The returned array is empty if there are no errors\r\n\t\t *\r\n\t\t * @param   {object} event\r\n\t\t * @returns {array.<luga.validator.BaseFieldValidator>}\r\n\t\t */\r\n\t\tthis.validate = function(event){\r\n\t\t\tself.init();\r\n\t\t\tself.before(event);\r\n\t\t\t// Keep track of already validated fields (to skip already validated checkboxes or radios)\r\n\t\t\tvar executedValidators = {};\r\n\t\t\tfor(var i = 0; i < self.validators.length; i++){\r\n\t\t\t\tif((self.validators[i] !== undefined) && (self.validators[i].validate !== undefined)){\r\n\t\t\t\t\tif(executedValidators[self.validators[i].name] !== undefined){\r\n\t\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(self.validators[i].validate() === true){\r\n\t\t\t\t\t\tself.dirtyValidators.push(self.validators[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\texecutedValidators[self.validators[i].name] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(self.isValid() === false){\r\n\t\t\t\tself.error();\r\n\t\t\t\tif(event !== undefined){\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(this.config.blocksubmit === true){\r\n\t\t\t\t\t// Disable submit buttons to avoid multiple submits\r\n\t\t\t\t\tself.disableSubmit();\r\n\t\t\t\t}\r\n\t\t\t\tself.after(event);\r\n\t\t\t}\r\n\t\t\treturn self.dirtyValidators;\r\n\t\t};\r\n\r\n\t\tthis.disableSubmit = function(){\r\n\t\t\tvar buttons = jQuery(\"input[type=submit]\", self.config.formNode);\r\n\t\t\tjQuery(buttons).each(function(index, item){\r\n\t\t\t\tvar buttonNode = jQuery(item);\r\n\t\t\t\tif(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE) !== undefined){\r\n\t\t\t\t\tbuttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE));\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns truue if the form is valid, false otherwise\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\treturn self.dirtyValidators.length === 0;\r\n\t\t};\r\n\r\n\t\tthis.before = function(event){\r\n\t\t\tif(self.config.before !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.before);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.before]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.error = function(){\r\n\t\t\tvar callBack = luga.lookupFunction(self.config.error);\r\n\t\t\tif(callBack !== undefined){\r\n\t\t\t\tcallBack.apply(null, [self.config.formNode, self.dirtyValidators]);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.error]));\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.after = function(event){\r\n\t\t\tif(self.config.after !== null){\r\n\t\t\t\tvar callBack = luga.lookupFunction(self.config.after);\r\n\t\t\t\tif(callBack !== undefined){\r\n\t\t\t\t\tcallBack.apply(null, [self.config.formNode, event]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [self.config.after]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tluga.namespace(\"luga.validator.fieldValidatorFactory\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.fieldValidatorFactory.getInstance.options\r\n\t *\r\n\t * @property {jquery} formNode    Either a jQuery object wrapping the form or the naked DOM object\r\n\t *                                Required in case of radio and checkboxes (that are validated as group), optional in all other cases\r\n\r\n\t * @property {jquery} fieldNode   Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Field validator factory. Use this to instantiate a field validator without worrying about the specific implementation\r\n\t *\r\n\t * @param {luga.validator.fieldValidatorFactory.getInstance.options} options\r\n\t * @returns {luga.validator.BaseFieldValidator|luga.validator.BaseGroupValidator}\r\n\t */\r\n\tluga.validator.fieldValidatorFactory.getInstance = function(options){\r\n\t\t/** @type {luga.validator.fieldValidatorFactory.getInstance.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tvar self = this;\r\n\t\t// Abort if the field isn't suitable to validation\r\n\t\tif(luga.form.utils.isInputField(self.config.fieldNode) === false){\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvar fieldType = jQuery(self.config.fieldNode).prop(\"type\");\r\n\t\t// Get relevant validator based on field type\r\n\t\tswitch(fieldType){\r\n\r\n\t\t\tcase \"select-multiple\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"select-one\":\r\n\t\t\t\treturn new luga.validator.SelectValidator(this.config);\r\n\r\n\t\t\tcase \"radio\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.RadioValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"checkbox\":\r\n\t\t\t\tif(jQuery(this.config.fieldNode).attr(\"name\") !== undefined){\r\n\t\t\t\t\treturn new luga.validator.CheckboxValidator({\r\n\t\t\t\t\t\tinputGroup: luga.form.utils.getFieldGroup(jQuery(this.config.fieldNode).attr(\"name\"), this.config.formNode)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn new luga.validator.TextValidator(this.config);\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseFieldValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string} message        Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass     CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract field validator class. To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseFieldValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tmessage: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) || \"\",\r\n\t\t\terrorclass: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) || \"\"\r\n\t\t};\r\n\t\tluga.merge(this.config, options);\r\n\r\n\t\tthis.node = jQuery(options.fieldNode);\r\n\t\tthis.message = this.config.message;\r\n\t\tthis.name = \"\";\r\n\r\n\t\tif(this.node.attr(\"name\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"name\");\r\n\t\t}\r\n\t\telse if(this.node.attr(\"id\") !== undefined){\r\n\t\t\tthis.name = this.node.attr(\"id\");\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Return true if the field is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tthis.node.addClass(this.config.errorclass);\r\n\t\t\t// Set the title attribute in order to show a tooltip\r\n\t\t\tthis.node.attr(\"title\", this.message);\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tthis.node.removeClass(this.config.errorclass);\r\n\t\t\tthis.node.removeAttr(\"title\");\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\t// Disabled fields are always valid\r\n\t\t\tif(this.node.prop(\"disabled\") === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.isValid() === false){\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.TextValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode               Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {boolean|function} required      Set it to true to flag the field as required.\r\n\t *                                            In case you need conditional validation, set it to the name of a custom function that will handle the condition.\r\n\t *                                            Can also be set using the \"data-lugavalidator-required\" attribute. Optional\r\n\t * @property {string} pattern                 Validation pattern to be applied, either built-in or custom.\r\n\t *                                            Can also be set using the \"data-lugavalidator-pattern\" attribute. Optional\r\n\t * @property {string} minlength               Enforce a minimum text length. Can also be set using the \"data-lugavalidator-minlength\" attribute. Optional\r\n\t * @property {string} maxlength               Enforce a maximum text length. Can also be set using the \"data-lugavalidator-maxlength\" attribute. Optional\r\n\t * @property {string} minnumber               Enforce a minimum numeric value. Can also be set using the \"data-lugavalidator-minnumber\" attribute. Optional\r\n\t * @property {string} maxnumber               Enforce a maximum numeric value. Can also be set using the \"data-lugavalidator-maxnumber\" attribute. Optional\r\n\t * @property {string} datepattern             Date format pattern to be applied, either built-in or custom. Can also be set using the \"data-lugavalidator-datepattern\" attribute. Optional\r\n\t * @property {string} mindate                 Enforce a minimum date. Can also be set using the \"data-lugavalidator-mindate\" attribute. Optional\r\n\t * @property {string} maxdate                 Enforce a maximum date. Can also be set using the \"data-lugavalidator-maxdate\" attribute. Optional\r\n\t * @property {string} equalto                 Id of another field who's values will be compared for equality. Can also be set using the \"data-lugavalidator-equalto\" attribute. Optional\r\n\t * @property {string} message                 Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass              CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Text field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.TextValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.TextValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.TextValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\trequired: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),\r\n\t\t\tpattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),\r\n\t\t\tminlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),\r\n\t\t\tmaxlength: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),\r\n\t\t\tminnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),\r\n\t\t\tmaxnumber: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),\r\n\t\t\tdatepattern: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN) || luga.validator.CONST.DEFAULT_DATE_PATTERN,\r\n\t\t\tmindate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),\r\n\t\t\tmaxdate: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),\r\n\t\t\tequalto: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\tif(this.config.required !== undefined){\r\n\t\t\ttry{\r\n\t\t\t\t// Hack to ensure it's a boolean\r\n\t\t\t\tthis.config.required = JSON.parse(this.config.required);\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t\t// Unable to convert into a booolean. It must be a string referencing a function\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/** @type {luga.validator.TextValidator} */\r\n\t\tvar self = this;\r\n\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\t\tself.type = \"text\";\r\n\r\n\t\t// Put focus and cursor inside the field\r\n\t\tthis.getFocus = function(){\r\n\t\t\t// This try block is required to solve an obscure issue with IE and hidden fields\r\n\t\t\ttry{\r\n\t\t\t\tself.node.focus();\r\n\t\t\t\tself.node.select();\r\n\t\t\t}\r\n\t\t\tcatch(e){\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isEmpty = function(){\r\n\t\t\treturn self.node.val() === \"\";\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredAtt = this.config.required;\r\n\t\t\tif(requiredAtt){\r\n\t\t\t\tif(requiredAtt === true){\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t\tif(requiredAtt === false){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t// It's a conditional validation. Invoke the relevant function if available\r\n\t\t\t\tvar functionReference = luga.lookupFunction(requiredAtt);\r\n\t\t\t\tif(functionReference !== undefined){\r\n\t\t\t\t\treturn functionReference.apply(null, [self.node]);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [requiredAtt]));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(self.isEmpty()){\r\n\t\t\t\tif(self.isRequired() === true){\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t// It's empty. Loop over all the available rules\r\n\t\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.SelectValidator.options\r\n\t *\r\n\t * @property {jquery} fieldNode              Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {string|number} invalidindex    Prevents selection of an entry on a given position (zero based). Can also be set using the \"data-lugavalidator-invalidindex\" attribute. Optional\r\n\t * @property {string} invalidvalue           Prevents selection of an entry with a given value. Can also be set using the \"data-lugavalidator-invalidvalue\" attribute. Optional\r\n\t * @property {string} message                Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass             CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Select field validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseFieldValidator\r\n\t * @param {luga.validator.SelectValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.SelectValidator = function(options){\r\n\r\n\t\t/** @type {luga.validator.SelectValidator.options} */\r\n\t\tthis.config = {\r\n\t\t\tinvalidindex: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),\r\n\t\t\tinvalidvalue: jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)\r\n\t\t};\r\n\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseFieldValidator, this, [this.config]);\r\n\r\n\t\t/** @type {luga.validator.SelectValidator} */\r\n\t\tvar self = this;\r\n\t\tself.type = \"select\";\r\n\t\tself.node = jQuery(options.fieldNode);\r\n\t\tif(self.node.length === 0){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.MISSING_FIELD);\r\n\t\t}\r\n\r\n\t\t// Ensure invalidindex is numeric\r\n\t\tif((self.config.invalidindex !== undefined) && (!jQuery.isNumeric(self.config.invalidindex))){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.INVALID_INDEX_PARAMETER);\r\n\t\t}\r\n\r\n\t\t// Whenever a \"size\" attribute is available, the browser reports -1 as selectedIndex\r\n\t\t// Fix this weirdness\r\n\t\tvar currentIndex = self.node.prop(\"selectedIndex\");\r\n\t\tif(currentIndex === -1){\r\n\t\t\tcurrentIndex = 0;\r\n\t\t}\r\n\t\tcurrentIndex = parseInt(currentIndex, 10);\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\t// Check for index\r\n\t\t\tif(currentIndex === parseInt(self.config.invalidindex, 10)){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Check for value\r\n\t\t\tif(self.node.val() === self.config.invalidvalue){\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// Loop over all the available rules\r\n\t\t\tfor(var rule in luga.validator.rules){\r\n\t\t\t\t// Check if the current rule is required for the field\r\n\t\t\t\tif(self.node.attr(luga.validator.CONST.RULE_PREFIX + rule) !== undefined){\r\n\t\t\t\t\t// Invoke the rule\r\n\t\t\t\t\tif(luga.validator.rules[rule].apply(null, [self.node, self]) === false){\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.BaseGroupValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t *\r\n\t * Additional options can be used, but are specific to different kind of input fields.\r\n\t * Check their implementation for details\r\n\t */\r\n\r\n\t/**\r\n\t * Abstract validator class for grouped fields (checkboxes, radio buttons). To be extended for different kind of fields\r\n\t *\r\n\t * @constructs\r\n\t * @abstract\r\n\t * @param {luga.validator.BaseFieldValidator.options} options\r\n\t * @throws\r\n\t */\r\n\tluga.validator.BaseGroupValidator = function(options){\r\n\r\n\t\tif(this.constructor === luga.validator.BaseFieldValidator){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT);\r\n\t\t}\r\n\t\t/** @type {luga.validator.BaseFieldValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tthis.inputGroup = this.config.inputGroup;\r\n\t\tthis.name = jQuery(this.config.inputGroup).attr(\"name\");\r\n\t\tthis.message = \"\";\r\n\t\tthis.errorclass = \"\";\r\n\r\n\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE) !== undefined){\r\n\t\t\t\tthis.message = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE);\r\n\t\t\t}\r\n\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS) !== undefined){\r\n\t\t\t\tthis.errorclass = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field group is valid. False otherwise\r\n\t\t * @abstract\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t};\r\n\r\n\t\tthis.flagInvalid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.addClass(this.errorclass);\r\n\t\t\t\t\tfield.attr(\"title\", this.message);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.flagValid = function(){\r\n\t\t\tif(this.errorclass !== \"\"){\r\n\t\t\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\t\tfield.removeClass(this.errorclass);\r\n\t\t\t\t\tfield.removeAttr(\"title\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Be careful, this method returns a boolean but also has side-effects\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.validate = function(){\r\n\t\t\tif(this.isValid() === true){\r\n\t\t\t\tthis.flagValid();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.flagInvalid();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.RadioValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Radio button group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.RadioValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.RadioValidator = function(options){\r\n\t\t/** @type {luga.validator.RadioValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"radio\";\r\n\r\n\t\t/**\r\n\t\t * Return true if the field group is required\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isRequired = function(){\r\n\t\t\tvar requiredFlag = false;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t// Since fields from the same group can have conflicting attribute values, the last one win\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)){\r\n\t\t\t\t\t\trequiredFlag = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn requiredFlag;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * Be careful, this method contains multiple exit points!!!\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tif(this.isRequired() === \"true\"){\r\n\t\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t\tvar field = jQuery(fieldGroup[i]);\r\n\t\t\t\t\t// As long as only one is checked, we are fine\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.CheckboxValidator.options\r\n\t *\r\n\t * @property {jquery} inputGroup      A jQuery object wrapping input fields that share the same name. Use luga.form.utils.getFieldGroup() to obtain it. Required\r\n\t * @property {number} minchecked      Specify a minimum number of boxes that can be checked in a group. Set it to 1 to allow only one choice. Optional\r\n\t * @property {number} maxchecked      Specify a maximum number of boxes that can be checked within a group. Optional\r\n\t * @property {string} message         Error message. Can also be set using the \"data-lugavalidator-message\" attribute. Optional\r\n\t * @property {string} errorclass      CSS class to apply for invalid state. Can also be set using the \"data-lugavalidator-errorclass\" attribute. Optional\r\n\t */\r\n\r\n\t/**\r\n\t * Checkboxes group validator class\r\n\t *\r\n\t * @constructs\r\n\t * @extends luga.validator.BaseGroupValidator\r\n\t * @param {luga.validator.CheckboxValidator.options} options\r\n\t *\r\n\t */\r\n\tluga.validator.CheckboxValidator = function(options){\r\n\t\t/** @type {luga.validator.CheckboxValidator.options} */\r\n\t\tthis.config = {};\r\n\t\tluga.merge(this.config, options);\r\n\t\tluga.extend(luga.validator.BaseGroupValidator, this, [this.config]);\r\n\t\tthis.type = \"checkbox\";\r\n\t\tthis.minchecked = 0;\r\n\t\tthis.maxchecked = this.config.inputGroup.length;\r\n\r\n\t\t// Since checkboxes from the same group can have conflicting attribute values, the last one win\r\n\t\tfor(var i = 0; i < this.inputGroup.length; i++){\r\n\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.minchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t\tif(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED) !== undefined){\r\n\t\t\t\t\tthis.maxchecked = field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Returns true if the field satisfy the rules associated with it. False otherwise\r\n\t\t * @override\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\tthis.isValid = function(){\r\n\t\t\tvar checkCounter = 0;\r\n\t\t\tvar fieldGroup = this.inputGroup;\r\n\t\t\tfor(var i = 0; i < fieldGroup.length; i++){\r\n\t\t\t\t// For each checked box, increase the counter\r\n\t\t\t\tvar field = jQuery(this.inputGroup[i]);\r\n\t\t\t\tif(field.prop(\"disabled\") === false){\r\n\t\t\t\t\tif(field.prop(\"checked\") === true){\r\n\t\t\t\t\t\tcheckCounter++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn ((checkCounter >= this.minchecked) && (checkCounter <= this.maxchecked));\r\n\t\t};\r\n\r\n\t};\r\n\r\n\t/* Rules */\r\n\r\n\tluga.namespace(\"luga.validator.rules\");\r\n\r\n\tluga.validator.rules.email = function(fieldNode, validator){\r\n\t\tvar fieldValue = fieldNode.val();\r\n\t\tvar containsAt = (fieldValue.indexOf(\"@\") !== -1);\r\n\t\tvar containDot = (fieldValue.indexOf(\".\") !== -1);\r\n\t\tif((containsAt === true) && (containDot === true)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.equalto = function(fieldNode, validator){\r\n\t\tvar secondFieldNode = jQuery(\"#\" + validator.config.equalto);\r\n\t\tif(secondFieldNode.length === 0){\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD, [validator.config.equalto]));\r\n\t\t}\r\n\t\treturn (fieldNode.val() === secondFieldNode.val());\r\n\t};\r\n\r\n\tluga.validator.rules.datepattern = function(fieldNode, validator){\r\n\t\tvar datObj = luga.validator.dateStrToObj(fieldNode.val(), validator.config.datepattern);\r\n\t\tif(datObj !== null){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxdate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar maxDate = luga.validator.dateStrToObj(validator.config.maxdate, pattern);\r\n\t\tif((valueDate !== null) && (maxDate !== null)){\r\n\t\t\treturn valueDate <= maxDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.mindate = function(fieldNode, validator){\r\n\t\tvar pattern = validator.config.datepattern;\r\n\t\tvar valueDate = luga.validator.dateStrToObj(fieldNode.val(), pattern);\r\n\t\tvar minDate = luga.validator.dateStrToObj(validator.config.mindate, pattern);\r\n\t\tif((valueDate !== null) && (minDate !== null)){\r\n\t\t\treturn valueDate >= minDate;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.maxlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length > validator.config.maxlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.minlength = function(fieldNode, validator){\r\n\t\tif(fieldNode.val().length < validator.config.minlength){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t};\r\n\r\n\tluga.validator.rules.maxnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) <= parseFloat(validator.config.maxnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\tluga.validator.rules.minnumber = function(fieldNode, validator){\r\n\t\tif(jQuery.isNumeric(fieldNode.val()) === false){\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif(parseFloat(fieldNode.val()) >= parseFloat(validator.config.minnumber)){\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t};\r\n\r\n\t/**\r\n\t * @throws\r\n\t */\r\n\tluga.validator.rules.pattern = function(fieldNode, validator){\r\n\t\tvar regExpObj = luga.validator.patterns[validator.config.pattern];\r\n\t\tif(regExpObj !== undefined){\r\n\t\t\treturn regExpObj.test(fieldNode.val());\r\n\t\t}\r\n\t\telse{\r\n\t\t\t// The pattern is missing\r\n\t\t\tthrow(luga.string.format(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND, [validator.config.pattern]));\r\n\t\t}\r\n\t};\r\n\r\n\t/* Patterns */\r\n\r\n\tluga.namespace(\"luga.validator.patterns\");\r\n\r\n\tluga.validator.patterns.lettersonly = new RegExp(\"^[a-zA-Z]*$\");\r\n\tluga.validator.patterns.alphanumeric = new RegExp(\"^\\\\w*$\");\r\n\tluga.validator.patterns.integer = new RegExp(\"^-?[1-9][0-9]*$\");\r\n\tluga.validator.patterns.positiveinteger = new RegExp(\"^\\\\d\\\\d*$\");\r\n\tluga.validator.patterns.number = new RegExp(\"^-?(\\\\d\\\\d*\\\\.\\\\d*$)|(^-?\\\\d\\\\d*$)|(^-?\\\\.\\\\d\\\\d*$)\");\r\n\tluga.validator.patterns.filepath_pdf = new RegExp(\"[\\\\w_]*\\\\.([pP][dD][fF])$\");\r\n\tluga.validator.patterns.filepath_jpg = new RegExp(\"[\\\\w_]*\\\\.([jJ][pP][eE]?[gG])$\");\r\n\tluga.validator.patterns.filepath_zip = new RegExp(\"[\\\\w_]*\\\\.([zZ][iI][pP])$\");\r\n\tluga.validator.patterns.filepath = new RegExp(\"[\\\\w_]*\\\\.\\\\w{3}$\");\r\n\tluga.validator.patterns.time = new RegExp(\"([0-1][0-9]|2[0-3]):[0-5][0-9]$\");\r\n\r\n\t/* Date specifications */\r\n\r\n\tluga.namespace(\"luga.validator.dateSpecs\");\r\n\r\n\t/**\r\n\t * Create an object that stores date validation's info\r\n\t *\r\n\t * @param rex       {regexp}\r\n\t * @param year      {number}\r\n\t * @param month     {number}\r\n\t * @param day       {number}\r\n\t * @param separator {string}\r\n\t *\r\n\t * @returns {object}\r\n\t */\r\n\tluga.validator.createDateSpecObj = function(rex, year, month, day, separator){\r\n\t\tvar infoObj = {};\r\n\t\tinfoObj.rex = new RegExp(rex);\r\n\t\tinfoObj.y = year;\r\n\t\tinfoObj.m = month;\r\n\t\tinfoObj.d = day;\r\n\t\tinfoObj.s = separator;\r\n\t\treturn infoObj;\r\n\t};\r\n\r\n\t/**\r\n\t * Create a Date object out of a string, based on a given date spec key\r\n\t *\r\n\t * @param {string}   dateStr\r\n\t * @param {string}   dateSpecKey\r\n\t * @returns {date|*}\r\n\t */\r\n\tluga.validator.dateStrToObj = function(dateStr, dateSpecKey){\r\n\t\tvar dateSpecObj = luga.validator.dateSpecs[dateSpecKey];\r\n\t\tif(dateSpecObj !== undefined){\r\n\r\n\t\t\t// If it doesn't matches the RegExp, abort\r\n\t\t\tif(!dateSpecObj.rex.test(dateStr)){\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t\t// String's value matches the pattern, check if it's a valida date\r\n\t\t\t// Split the date into 3 different bits using the separator\r\n\t\t\tvar dateBits = dateStr.split(dateSpecObj.s);\r\n\t\t\t// First try to create a new date out of the bits\r\n\t\t\tvar testDate = new Date(dateBits[dateSpecObj.y], (dateBits[dateSpecObj.m] - 1), dateBits[dateSpecObj.d]);\r\n\t\t\t// Make sure values match after conversion\r\n\t\t\tvar yearMatches = (testDate.getFullYear() === parseInt(dateBits[dateSpecObj.y], 10));\r\n\t\t\tvar monthMatches = (testDate.getMonth() === parseInt(dateBits[dateSpecObj.m] - 1, 10));\r\n\t\t\tvar dayMatches = (testDate.getDate() === parseInt(dateBits[dateSpecObj.d], 10));\r\n\t\t\tif((yearMatches === true) && (monthMatches === true) && (dayMatches === true)){\r\n\t\t\t\treturn testDate;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn null;\r\n\t};\r\n\r\n\tluga.validator.dateSpecs[\"YYYY-MM-DD\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1][0-9])-([0-3][0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"YYYY-M-D\"] = luga.validator.createDateSpecObj(\"^([0-9]{4})-([0-1]?[0-9])-([0-3]?[0-9])$\", 0, 1, 2, \"-\");\r\n\tluga.validator.dateSpecs[\"MM.DD.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9]).([0-3][0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"M.D.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9]).([0-3]?[0-9]).([0-9]{4})$\", 2, 0, 1, \".\");\r\n\tluga.validator.dateSpecs[\"MM/DD/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1][0-9])\\/([0-3][0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"M/D/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])\\/([0-3]?[0-9])\\/([0-9]{4})$\", 2, 0, 1, \"/\");\r\n\tluga.validator.dateSpecs[\"MM-DD-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-21][0-9])-([0-3][0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"M-D-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-1]?[0-9])-([0-3]?[0-9])-([0-9]{4})$\", 2, 0, 1, \"-\");\r\n\tluga.validator.dateSpecs[\"DD.MM.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9]).([0-1][0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"D.M.YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9]).([0-1]?[0-9]).([0-9]{4})$\", 2, 1, 0, \".\");\r\n\tluga.validator.dateSpecs[\"DD/MM/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])\\/([0-1][0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"D/M/YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])\\/([0-1]?[0-9])\\/([0-9]{4})$\", 2, 1, 0, \"/\");\r\n\tluga.validator.dateSpecs[\"DD-MM-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3][0-9])-([0-1][0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\tluga.validator.dateSpecs[\"D-M-YYYY\"] = luga.validator.createDateSpecObj(\"^([0-3]?[0-9])-([0-1]?[0-9])-([0-9]{4})$\", 2, 1, 0, \"-\");\r\n\r\n\t/**\r\n\t * Attach form validators to any suitable form inside the document\r\n\t */\r\n\tluga.validator.initForms = function(){\r\n\t\tjQuery(luga.validator.CONST.FORM_SELECTOR).each(function(index, item){\r\n\t\t\tvar formNode = jQuery(item);\r\n\t\t\tif(formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE) === \"true\"){\r\n\t\t\t\tformNode.submit(function(event){\r\n\t\t\t\t\tvar formValidator = new luga.validator.FormValidator({\r\n\t\t\t\t\t\tformNode: formNode\r\n\t\t\t\t\t});\r\n\t\t\t\t\tformValidator.validate(event);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/* API */\r\n\r\n\tluga.namespace(\"luga.validator.api\");\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateForm.options\r\n\t *\r\n\t * @property {jquery} formNode       Either a jQuery object wrapping the form or the naked DOM object. Required\r\n\t * @property {function} error        Name of the function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a form\r\n\t * @param {luga.validator.api.validateForm.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateForm = function(options){\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar formValidator = new luga.validator.FormValidator(options);\r\n\t\tvar dirtyValidators = formValidator.validate();\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn formValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fieldNode      Either a jQuery object wrapping the field or the naked DOM object. Required\r\n\t * @property {function} error        Function to be invoked to handle/display validation messages.\r\n\t *                                   Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a field\r\n\t * @param {luga.validator.api.validateField.options}\r\n\t * @returns {boolean}\r\n\t * @throws\r\n\t */\r\n\tluga.validator.api.validateField = function(options){\r\n\t\tif(luga.form.utils.isInputField(options.fieldNode) === false){\r\n\t\t\tthrow(luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED);\r\n\t\t}\r\n\t\tif(options.error === undefined){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar dirtyValidators = [];\r\n\t\tvar fieldValidator = new luga.validator.fieldValidatorFactory.getInstance(options);\r\n\t\tfieldValidator.validate(null);\r\n\t\tif(fieldValidator.isValid() === true){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdirtyValidators.push(fieldValidator);\r\n\t\t\t\tcallBack(null, []);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn fieldValidator.isValid();\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateField.options\r\n\t *\r\n\t * @property {jquery} fields      A jQuery object wrapping the collection of fields. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate a collection of fields\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateFields = function(options){\r\n\t\tif(!options.error){\r\n\t\t\toptions.error = luga.validator.CONST.HANDLERS.FORM_ERROR;\r\n\t\t}\r\n\t\tvar validators = [];\r\n\t\tvar executedValidators = [];\r\n\t\tvar dirtyValidators = [];\r\n\r\n\t\tfor(var i = 0; i < options.fields.length; i++){\r\n\t\t\tif(luga.form.utils.isInputField(options.fields[i]) === true){\r\n\t\t\t\tvalidators.push(luga.validator.fieldValidatorFactory.getInstance({\r\n\t\t\t\t\tfieldNode: options.fields[i]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var j = 0; j < validators.length; j++){\r\n\t\t\tif(validators[j] && validators[j].validate){\r\n\t\t\t\tif(executedValidators[validators[j].name] !== undefined){\r\n\t\t\t\t\t// Already validated checkbox or radio, skip it\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(validators[j].validate() === true){\r\n\t\t\t\t\tdirtyValidators.push(validators[j]);\r\n\t\t\t\t}\r\n\t\t\t\texecutedValidators[validators[j].name] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(dirtyValidators.length > 0){\r\n\t\t\tvar callBack = luga.lookupFunction(options.error);\r\n\t\t\tif(callBack === undefined){\r\n\t\t\t\talert(luga.string.format(luga.validator.CONST.MESSAGES.MISSING_FUNCTION, [options.error]));\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tcallBack.apply(null, [options.formNode, dirtyValidators]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dirtyValidators.length === 0;\r\n\t};\r\n\r\n\t/**\r\n\t * @typedef {object} luga.validator.api.validateFields.options\r\n\t *\r\n\t * @property {jquery} rootNode    A jQuery object wrapping the root node. Required\r\n\t * @property {function} error     Function to be invoked to handle/display validation messages.\r\n\t *                                Default to luga.validator.errorAlert\r\n\t */\r\n\r\n\t/**\r\n\t * Programmatically validate all fields contained inside a given node\r\n\t * @param {luga.validator.api.validateFields.options}\r\n\t * @returns {boolean}\r\n\t */\r\n\tluga.validator.api.validateChildFields = function(options){\r\n\t\tvar fields = luga.form.utils.getChildFields(options.rootNode);\r\n\t\treturn luga.validator.api.validateFields({\r\n\t\t\tfields: fields,\r\n\t\t\terror: options.error\r\n\t\t});\r\n\t};\r\n\r\n\tjQuery(document).ready(function(){\r\n\t\tluga.validator.initForms();\r\n\t});\r\n\r\n}());"],"sourceRoot":"."}