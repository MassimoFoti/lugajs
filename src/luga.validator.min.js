/*! luga-js 0.8 compiled: 2013-12-03 20:12 */
if("undefined"==typeof luga)throw"Unable to find luga.js";!function(){"use strict";luga.namespace("luga.validator"),luga.validator.version=.8,luga.validator.CONST={FORM_SELECTOR:"form[data-luga-validate]",CHILD_SELECTOR:"input,select,textarea",RULE_PREFIX:"data-luga-",DEFAULT_DATE_PATTERN:"YYYY-MM-DD",CUSTOM_ATTRIBUTES:{VALIDATE:"data-luga-validate",ERROR:"data-luga-error",BEFORE:"data-luga-before",AFTER:"data-luga-after",BLOCK_SUBMIT:"data-luga-blocksubmit",MESSAGE:"data-luga-message",ERROR_CLASS:"data-luga-errorclass",REQUIRED:"data-luga-required",PATTERN:"data-luga-pattern",MIN_LENGTH:"data-luga-minlength",MAX_LENGTH:"data-luga-maxlength",MIN_NUMBER:"data-luga-minnumber",MAX_NUMBER:"data-luga-maxnumber",DATE_PATTERN:"data-luga-datepattern",MIN_DATE:"data-luga-mindate",MAX_DATE:"data-luga-maxdate",EQUAL_TO:"data-luga-equalto",MIN_CHECKED:"data-luga-minchecked",MAX_CHECKED:"data-luga-maxchecked",INVALID_INDEX:"data-luga-invalidindex",INVALID_VALUE:"data-luga-invalidvalue",DISABLED_MESSAGE:"data-luga-disabledlabel"},MESSAGES:{FORM_MISSING:"luga.validator was unable to load form",MISSING_FUNCTION:"luga.validator was unable to find a function named: {0}",BASE_VALIDATOR_ABSTRACT:"luga.validator.BaseFieldValidator is an abstract class",GROUP_VALIDATOR_ABSTRACT:"luga.validator.BaseGroupValidator is an abstract class",FIELD_CANT_BE_VALIDATED:"This field can't be validated",PATTERN_NOT_FOUND:"luga.validator failed to retrieve pattern: {0}",INVALID_INDEX_NOT_NUMERIC:"data-luga-invalidindex accept only numbers",MISSING_EQUAL_TO_FIELD:"data-luga-equalto was unable to find field with id = {0}"},FAKE_INPUT_TYPES:{fieldset:!0,reset:!0,button:!0,submit:!0},HANDLERS:{FORM_ERROR:luga.validationHandlers.errorAlert}},luga.validator.FormValidator=function(options){this.config={blocksubmit:jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BLOCK_SUBMIT)||"true",error:jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR)||luga.validator.CONST.HANDLERS.FORM_ERROR,before:jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.BEFORE)||null,after:jQuery(options.formNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.AFTER)||null},luga.merge(this.config,options);var self=this;if(self.validators=[],self.dirtyValidators=[],self.config.formNode=jQuery(self.config.formNode),0===jQuery(self.config.formNode).length)throw luga.validator.CONST.MESSAGES.FORM_MISSING;this.init=function(){self.validators=[],self.dirtyValidators=[];for(var formDom=self.config.formNode[0],i=0;i<formDom.elements.length;i++)luga.validator.utils.isInputField(formDom.elements[i])&&self.validators.push(luga.validator.FieldValidatorGetInstance({fieldNode:formDom.elements[i],formNode:self.config.formNode}))},this.validate=function(event){self.init(),self.before();for(var executedValidators={},i=0;i<self.validators.length;i++)if(self.validators[i]&&self.validators[i].validate){if(executedValidators[self.validators[i].name])continue;self.validators[i].validate()&&self.dirtyValidators.push(self.validators[i]),executedValidators[self.validators[i].name]=!0}return self.isValid()?("true"===this.config.blocksubmit&&self.disableSubmit(),self.after()):(self.error(),event&&event.preventDefault()),self.dirtyValidators},this.disableSubmit=function(){var buttons=jQuery("input[type=submit]",self.config.formNode);jQuery(buttons).each(function(index,item){var buttonNode=jQuery(item);buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE)&&buttonNode.val(buttonNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DISABLED_MESSAGE))})},this.isValid=function(){return 0===self.dirtyValidators.length},this.before=function(){var callBack=luga.utils.stringToFunction(self.config.before);callBack?callBack.apply(null,[self.config.formNode[0]]):self.config.before&&alert(luga.utils.formatString(luga.validator.CONST.MESSAGES.MISSING_FUNCTION,[self.config.before]))},this.error=function(){var callBack=luga.utils.stringToFunction(self.config.error);callBack?callBack.apply(null,[self.config.formNode[0],self.dirtyValidators]):self.config.error&&alert(luga.utils.formatString(luga.validator.CONST.MESSAGES.MISSING_FUNCTION,[self.config.error]))},this.after=function(){var callBack=luga.utils.stringToFunction(self.config.after);callBack?callBack.apply(null,[self.config.formNode[0]]):self.config.after&&alert(luga.utils.formatString(luga.validator.CONST.MESSAGES.MISSING_FUNCTION,[self.config.after]))}},luga.validator.FieldValidatorGetInstance=function(options){this.config={},luga.merge(this.config,options);var self=this;if(!luga.validator.utils.isInputField(self.config.fieldNode))return null;var fieldType=jQuery(self.config.fieldNode).prop("type");switch(fieldType){case"select-multiple":return new luga.validator.SelectValidator(this.config);case"select-one":return new luga.validator.SelectValidator(this.config);case"radio":if(jQuery(this.config.fieldNode).attr("name"))return new luga.validator.RadioValidator({inputGroup:luga.validator.utils.getFieldGroup(jQuery(this.config.fieldNode).attr("name"),this.config.formNode)});break;case"checkbox":if(jQuery(this.config.fieldNode).attr("name"))return new luga.validator.CheckboxValidator({inputGroup:luga.validator.utils.getFieldGroup(jQuery(this.config.fieldNode).attr("name"),this.config.formNode)});break;default:return new luga.validator.TextValidator(this.config)}},luga.validator.BaseFieldValidator=function(options){if(this.constructor===luga.validator.BaseFieldValidator)throw luga.validator.CONST.MESSAGES.BASE_VALIDATOR_ABSTRACT;this.config={message:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE)||"",errorclass:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS)||""},luga.merge(this.config,options),this.node=jQuery(options.fieldNode),this.message=this.config.message,this.name="",this.node.attr("name")?this.name=this.node.attr("name"):this.node.attr("id")&&(this.name=this.node.attr("id")),this.isValid=function(){},this.flagInvalid=function(){this.node.addClass(this.config.errorclass),this.node.attr("title",this.message)},this.flagValid=function(){this.node.removeClass(this.config.errorclass),this.node.removeAttr("title")},this.validate=function(){return this.node.prop("disabled")?(this.flagValid(),!1):this.isValid()?(this.flagValid(),!1):(this.flagInvalid(),!0)}},luga.validator.TextValidator=function(options){this.config={required:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED),pattern:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.PATTERN),minlength:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_LENGTH),maxlength:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_LENGTH),minnumber:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_NUMBER),maxnumber:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_NUMBER),datepattern:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.DATE_PATTERN)||luga.validator.CONST.DEFAULT_DATE_PATTERN,mindate:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_DATE),maxdate:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_DATE),equalto:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.EQUAL_TO)},luga.merge(this.config,options),luga.extend(luga.validator.BaseFieldValidator,this,[this.config]);var self=this;self.node=jQuery(options.fieldNode),self.type="text",this.getFocus=function(){try{self.node.focus(),self.node.select()}catch(e){}},this.isEmpty=function(){return""===self.node.val()},this.isRequired=function(){var requiredAtt=this.config.required;if(requiredAtt){if("true"===requiredAtt)return!0;if("false"===requiredAtt)return!1;var functionReference=luga.utils.stringToFunction(requiredAtt);if(functionReference)return functionReference.apply(null,[self.node])}return!1},this.isValid=function(){if(self.isEmpty())return self.isRequired()?!1:!0;for(var rule in luga.validator.rules)if(self.node.attr(luga.validator.CONST.RULE_PREFIX+rule)&&!luga.validator.rules[rule].apply(null,[self.node,self]))return!1;return!0}},luga.validator.SelectValidator=function(options){this.config={invalidindex:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_INDEX),invalidvalue:jQuery(options.fieldNode).attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.INVALID_VALUE)},luga.merge(this.config,options),luga.extend(luga.validator.BaseFieldValidator,this,[this.config]);var self=this;if(self.type="select",self.node=jQuery(options.fieldNode),void 0!==self.config.invalidindex&&!jQuery.isNumeric(self.config.invalidindex))throw luga.validator.CONST.MESSAGES.INVALID_INDEX_NOT_NUMERIC;var currentIndex=self.node.prop("selectedIndex");-1===currentIndex&&(currentIndex=0),currentIndex=parseInt(currentIndex,10),this.isValid=function(){if(currentIndex===parseInt(self.config.invalidindex,10))return!1;if(self.node.val()===self.config.invalidvalue)return!1;for(var rule in luga.validator.rules)if(self.node.attr(luga.validator.CONST.RULE_PREFIX+rule)&&!luga.validator.rules[rule].apply(null,[self.node,self]))return!1;return!0}},luga.validator.BaseGroupValidator=function(options){if(this.constructor===luga.validator.BaseFieldValidator)throw luga.validator.CONST.MESSAGES.GROUP_VALIDATOR_ABSTRACT;this.config={},luga.merge(this.config,options),this.inputGroup=this.config.inputGroup,this.name=jQuery(this.config.inputGroup).attr("name"),this.message="",this.errorclass="";for(var i=0;i<this.inputGroup.length;i++){var field=jQuery(this.inputGroup[i]);field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE)&&(this.message=field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MESSAGE)),field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS)&&(this.errorclass=field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.ERROR_CLASS))}this.isValid=function(){},this.flagInvalid=function(){if(""!==this.errorclass)for(var i=0;i<this.inputGroup.length;i++){var field=jQuery(this.inputGroup[i]);field.addClass(this.errorclass),field.attr("title",this.message)}},this.flagValid=function(){if(""!==this.errorclass)for(var i=0;i<this.inputGroup.length;i++){var field=jQuery(this.inputGroup[i]);field.removeClass(this.errorclass),field.removeAttr("title")}},this.validate=function(){return this.isValid()?(this.flagValid(),!1):(this.flagInvalid(),!0)}},luga.validator.RadioValidator=function(options){this.config={},luga.merge(this.config,options),luga.extend(luga.validator.BaseGroupValidator,this,[this.config]),this.type="radio";this.isRequired=function(){for(var requiredFlag=!1,fieldGroup=this.inputGroup,i=0;i<fieldGroup.length;i++){var field=jQuery(fieldGroup[i]);field.prop("disabled")===!1&&field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED)&&(requiredFlag=field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.REQUIRED))}return requiredFlag},this.isValid=function(){if("true"===this.isRequired()){for(var fieldGroup=this.inputGroup,i=0;i<fieldGroup.length;i++){var field=jQuery(fieldGroup[i]);if(field.prop("checked")===!0)return!0}return!1}return!0}},luga.validator.CheckboxValidator=function(options){this.config={},luga.merge(this.config,options),luga.extend(luga.validator.BaseGroupValidator,this,[this.config]),this.type="checkbox",this.minchecked=0,this.maxchecked=this.config.inputGroup.length;for(var i=0;i<this.inputGroup.length;i++){var field=jQuery(this.inputGroup[i]);field.prop("disabled")===!1&&(field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED)&&(this.minchecked=field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MIN_CHECKED)),field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED)&&(this.maxchecked=field.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.MAX_CHECKED)))}this.isValid=function(){for(var checkCounter=0,fieldGroup=this.inputGroup,i=0;i<fieldGroup.length;i++){var field=jQuery(this.inputGroup[i]);field.prop("disabled")===!1&&field.prop("checked")===!0&&checkCounter++}return checkCounter>=this.minchecked&&checkCounter<=this.maxchecked}},luga.namespace("luga.validator.rules"),luga.validator.rules.email=function(fieldNode){var fieldValue=fieldNode.val(),containsAt=-1!==fieldValue.indexOf("@"),containDot=-1!==fieldValue.indexOf(".");return containsAt&&containDot?!0:!1},luga.validator.rules.equalto=function(fieldNode,validator){var secondFieldNode=jQuery("#"+validator.config.equalto);if(0===secondFieldNode.length)throw luga.utils.formatString(luga.validator.CONST.MESSAGES.MISSING_EQUAL_TO_FIELD,[validator.config.equalto]);return fieldNode.val()===secondFieldNode.val()},luga.validator.rules.datepattern=function(fieldNode,validator){var datObj=luga.validator.dateStrToObj(fieldNode.val(),validator.config.datepattern);return datObj?!0:!1},luga.validator.rules.maxdate=function(fieldNode,validator){var pattern=validator.config.datepattern,valueDate=luga.validator.dateStrToObj(fieldNode.val(),pattern),maxDate=luga.validator.dateStrToObj(validator.config.maxdate,pattern);return valueDate&&maxDate?maxDate>=valueDate:!1},luga.validator.rules.mindate=function(fieldNode,validator){var pattern=validator.config.datepattern,valueDate=luga.validator.dateStrToObj(fieldNode.val(),pattern),minDate=luga.validator.dateStrToObj(validator.config.mindate,pattern);return valueDate&&minDate?valueDate>=minDate:!1},luga.validator.rules.maxlength=function(fieldNode,validator){return fieldNode.val().length>validator.config.maxlength?!1:!0},luga.validator.rules.minlength=function(fieldNode,validator){return fieldNode.val().length<validator.config.minlength?!1:!0},luga.validator.rules.maxnumber=function(fieldNode,validator){return jQuery.isNumeric(fieldNode.val())?parseFloat(fieldNode.val())<=parseFloat(validator.config.maxnumber)?!0:!1:!1},luga.validator.rules.minnumber=function(fieldNode,validator){return jQuery.isNumeric(fieldNode.val())?parseFloat(fieldNode.val())>=parseFloat(validator.config.minnumber)?!0:!1:!1},luga.validator.rules.pattern=function(fieldNode,validator){var regExpObj=luga.validator.patterns[validator.config.pattern];if(regExpObj)return regExpObj.test(fieldNode.val());throw luga.utils.formatString(luga.validator.CONST.MESSAGES.PATTERN_NOT_FOUND,[validator.config.pattern])},luga.namespace("luga.validator.patterns"),luga.validator.patterns.lettersonly=new RegExp("^[a-zA-Z]*$"),luga.validator.patterns.alphanumeric=new RegExp("^\\w*$"),luga.validator.patterns.integer=new RegExp("^-?\\d\\d*$"),luga.validator.patterns.positiveinteger=new RegExp("^\\d\\d*$"),luga.validator.patterns.number=new RegExp("^-?(\\d\\d*\\.\\d*$)|(^-?\\d\\d*$)|(^-?\\.\\d\\d*$)"),luga.validator.patterns.filepath_pdf=new RegExp("[\\w_]*\\.([pP][dD][fF])$"),luga.validator.patterns.filepath_jpg=new RegExp("[\\w_]*\\.([jJ][pP][eE]?[gG])$"),luga.validator.patterns.filepath_zip=new RegExp("[\\w_]*\\.([zZ][iI][pP])$"),luga.validator.patterns.filepath=new RegExp("[\\w_]*\\.\\w{3}$"),luga.namespace("luga.validator.dateSpecs"),luga.validator.createDateSpecObj=function(rex,year,month,day,separator){var infoObj={};return infoObj.rex=new RegExp(rex),infoObj.y=year,infoObj.m=month,infoObj.d=day,infoObj.s=separator,infoObj},luga.validator.dateStrToObj=function(dateStr,dateSpecName){var dateSpecObj=luga.validator.dateSpecs[dateSpecName];if(dateSpecObj){if(!dateSpecObj.rex.test(dateStr))return null;var dateBits=dateStr.split(dateSpecObj.s),testDate=new Date(dateBits[dateSpecObj.y],dateBits[dateSpecObj.m]-1,dateBits[dateSpecObj.d]),yearMatches=testDate.getFullYear()===parseInt(dateBits[dateSpecObj.y],10),monthMatches=testDate.getMonth()===parseInt(dateBits[dateSpecObj.m]-1,10),dayMatches=testDate.getDate()===parseInt(dateBits[dateSpecObj.d],10);return yearMatches&&monthMatches&&dayMatches?testDate:null}return null},luga.validator.dateSpecs["YYYY-MM-DD"]=luga.validator.createDateSpecObj("^([0-9]{4})\\-([0-1][0-9])\\-([0-3][0-9])$",0,1,2,"-"),luga.validator.dateSpecs["YYYY-M-D"]=luga.validator.createDateSpecObj("^([0-9]{4})\\-([0-1]?[0-9])\\-([0-3]?[0-9])$",0,1,2,"-"),luga.validator.dateSpecs["MM.DD.YYYY"]=luga.validator.createDateSpecObj("^([0-1][0-9])\\.([0-3][0-9])\\.([0-9]{4})$",2,0,1,"."),luga.validator.dateSpecs["M.D.YYYY"]=luga.validator.createDateSpecObj("^([0-1]?[0-9])\\.([0-3]?[0-9])\\.([0-9]{4})$",2,0,1,"."),luga.validator.dateSpecs["MM/DD/YYYY"]=luga.validator.createDateSpecObj("^([0-1][0-9])/([0-3][0-9])/([0-9]{4})$",2,0,1,"/"),luga.validator.dateSpecs["M/D/YYYY"]=luga.validator.createDateSpecObj("^([0-1]?[0-9])/([0-3]?[0-9])/([0-9]{4})$",2,0,1,"/"),luga.validator.dateSpecs["MM-DD-YYYY"]=luga.validator.createDateSpecObj("^([0-21][0-9])\\-([0-3][0-9])\\-([0-9]{4})$",2,0,1,"-"),luga.validator.dateSpecs["M-D-YYYY"]=luga.validator.createDateSpecObj("^([0-1]?[0-9])\\-([0-3]?[0-9])\\-([0-9]{4})$",2,0,1,"-"),luga.validator.dateSpecs["DD.MM.YYYY"]=luga.validator.createDateSpecObj("^([0-3][0-9])\\.([0-1][0-9])\\.([0-9]{4})$",2,1,0,"."),luga.validator.dateSpecs["D.M.YYYY"]=luga.validator.createDateSpecObj("^([0-3]?[0-9])\\.([0-1]?[0-9])\\.([0-9]{4})$",2,1,0,"."),luga.validator.dateSpecs["DD/MM/YYYY"]=luga.validator.createDateSpecObj("^([0-3][0-9])/([0-1][0-9])/([0-9]{4})$",2,1,0,"/"),luga.validator.dateSpecs["D/M/YYYY"]=luga.validator.createDateSpecObj("^([0-3]?[0-9])/([0-1]?[0-9])/([0-9]{4})$",2,1,0,"/"),luga.validator.dateSpecs["DD-MM-YYYY"]=luga.validator.createDateSpecObj("^([0-3][0-9])\\-([0-1][0-9])\\-([0-9]{4})$",2,1,0,"-"),luga.validator.dateSpecs["D-M-YYYY"]=luga.validator.createDateSpecObj("^([0-3]?[0-9])\\-([0-1]?[0-9])\\-([0-9]{4})$",2,1,0,"-"),luga.namespace("luga.validator.utils"),luga.validator.utils.isInputField=function(fieldNode){return jQuery(fieldNode).prop("type")?luga.validator.CONST.FAKE_INPUT_TYPES[jQuery(fieldNode).prop("type")]===!0?!1:!0:!1},luga.validator.utils.getFieldGroup=function(name,formNode){var selector="input[name="+name+"]";return jQuery(selector,formNode)},luga.validator.utils.getChildFields=function(rootNode){var fields=[];return jQuery(rootNode).find(luga.validator.CONST.CHILD_SELECTOR).each(function(index,item){luga.validator.utils.isInputField(item)&&fields.push(item)}),fields},luga.validator.initForms=function(){jQuery(luga.validator.CONST.FORM_SELECTOR).each(function(index,item){var formNode=jQuery(item);"true"===formNode.attr(luga.validator.CONST.CUSTOM_ATTRIBUTES.VALIDATE)&&formNode.submit(function(event){var formValidator=new luga.validator.FormValidator({formNode:formNode});formValidator.validate(event)})})},luga.namespace("luga.validator.api"),luga.validator.api.validateForm=function(options){options.error||(options.error=luga.validator.CONST.HANDLERS.FORM_ERROR);var formValidator=new luga.validator.FormValidator(options),dirtyValidators=formValidator.validate(null);return dirtyValidators.length>0&&options.error.apply(null,[options.formNode,dirtyValidators]),formValidator.isValid()},luga.validator.api.validateField=function(options){if(!luga.validator.utils.isInputField(options.fieldNode))throw luga.validator.CONST.MESSAGES.FIELD_CANT_BE_VALIDATED;options.error||(options.error=luga.validator.CONST.HANDLERS.FORM_ERROR);var fieldValidator=new luga.validator.FieldValidatorGetInstance(options);return fieldValidator.validate(null),fieldValidator.isValid()||options.error.apply(null,[null,[fieldValidator]]),fieldValidator.isValid()},luga.validator.api.validateFields=function(options){options.error||(options.error=luga.validator.CONST.HANDLERS.FORM_ERROR);for(var validators=[],executedValidators=[],dirtyValidators=[],i=0;i<options.fields.length;i++)luga.validator.utils.isInputField(options.fields[i])&&validators.push(luga.validator.FieldValidatorGetInstance({fieldNode:options.fields[i]}));for(var i=0;i<validators.length;i++)if(validators[i]&&validators[i].validate){if(executedValidators[validators[i].name])continue;validators[i].validate()&&dirtyValidators.push(validators[i]),executedValidators[validators[i].name]=!0}return dirtyValidators.length>0&&options.error.apply(null,[null,dirtyValidators]),0===dirtyValidators.length},luga.validator.api.validateChildFields=function(options){var fields=luga.validator.utils.getChildFields(options.rootNode);return luga.validator.api.validateFields({fields:fields,error:options.error})},jQuery(document).ready(function(){luga.validator.initForms()})}();