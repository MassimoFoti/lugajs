<div class="panel panel-default">
	<div class="panel-heading">About luga.Notifier</div>
	<div class="panel-body">
		<p>
			luga.Notifier is part of <a href="../dist/luga.common.min.js">Luga Common</a>, and plays a critical
			role in other Luga libraries.
			It's loosely based on the <a href="https://en.wikipedia.org/wiki/Observer_pattern">observer/notifier</a>
			design pattern, with some peculiar touches,
			favouring <a href="https://en.wikipedia.org/wiki/Convention_over_configuration">convention over
			configuration</a>.
		</p>

		<p>
			luga.Notifier provides the base functionality necessary to maintain a list of observers and send
			notifications to them.
			It's an abstract class, so it's forbidden to use this class directly (it throws an exception if you do), it
			can only be used as a base class.
			The Notifier class does not define any notification messages, so it is up to the developer to define the
			notifications.
		</p>

		<p>
			There are two kinds of observers:
		<ul class="luga-docs-list">
			<li>
				<strong>"event"</strong> observers are registered once for each event they want to listen to.
				The event/method mapping is explicit and defined at the time the observer is registered
			</li>
			<li>
				<strong>"generic"</strong> observers are registered once and can listen to multiple events.
				The event/method mapping is based on a naming convention
			</li>
		</ul>
		</p>
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">"Event" observers in action</div>
	<div class="panel-body">
		<p>
			Let's dig straight into some samples, using uber-simplified code:
		</p>

		<pre><code class="line-numbers language-javascript">const NotifierClass = function(){
	luga.extend(luga.Notifier, this); // Inherit from luga.Notifier
};

const EventObserverClass = function(){
	// Just two placeholders, empty methods
	this.firstHandler = function(data){
		alert(data.message);
	};
	this.secondHandler = function(){};
};

notifierObj = new NotifierClass();
observerObj = new EventObserverClass();

// Register the observer
notifierObj.addObserver(observerObj, "complete", "firstHandler");

// Now notifierObj can propagate events and observerObj may listen to them:

notifierObj.notifyObservers("complete", { message: "I did the job" });
// => alert("I did the job")

notifierObj.notifyObservers("restart", { message: "I am staring over" });
// => Nothing happens here, since no observer is listening to the "restart" event</code></pre>

		<p>
			We have full granular control here.
			For example, two methods of the same object can listen to the same event (something not possible with "generic" observers)
		</p>

	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">"Generic" observers in action</div>
	<div class="panel-body">
		<p>
			Less thigs to worry about here, but we must follow the naming convention:
		</p>

		<pre><code class="line-numbers language-javascript">const NotifierClass = function(){
	luga.extend(luga.Notifier, this); // Inherit from luga.Notifier
};

const GenericObserverClass = function(){
	// Just two placeholders, empty methods
	this.onCompleteHandler = function(data){
		alert(data.message);
	};
	this.onSomethingHandler = function(){};
};

notifierObj = new NotifierClass();
observerObj = new GenericObserverClass();

// Register the observer
notifierObj.addObserver(observerObj);

// Now notifierObj can propagate events and observerObj may listen to them:

notifierObj.notifyObservers("complete", { message: "I did the job" });
// => alert("I did the job")

notifierObj.notifyObservers("restart", { message: "I am staring over" });
// => Nothing happens here, since observerObj.onRestartHandler() does not exists</code></pre>

		<p>
			Once you call notifyObservers("complete", { message: "I did the job" }), the notifier will loop over its
			observers, looking for objects that implement an "onCompleteHandler" method
		</p>

		<p>
			It's critical to note the naming convention here, for a <strong>"complete"</strong> event, there must be a
			matching <strong>"onCompleteHandler"</strong> method.
			If a method matching the naming convention is found, it gets executed, passing the notification data as its
			single argument.
			If the observer does not implements a matching method, nothing happens
		</p>

	</div>
</div>

<div class="alert alert-info" role="alert">
	<strong>Heads up!</strong><br>
	You may be surprised to realize that luga.Notifier does not allows you to register function to events.
	Well, this is a conscious decision, people tend to register anonymous functions,
	usually resulting in code that is coupled and almost impossible to test.
	This practice is totally forbidden here
</div>

<div class="panel panel-default">
	<div class="panel-heading">luga.Notifier API</div>
	<div class="panel-body">
		<p>
			luga.Notifier is a very compact class, exposing just three public methods.
			You can find the complete API here.
		</p>
	</div>
</div>

<div class="panel panel-default">
	<div id="addObserver" class="panel-heading luga-docs-api-heading">.addObserver(observer, [eventName], [methodName])</div>
	<div class="panel-body">
		<p>
			Adds an observer object to the list of observers.
			This method is overloaded. You can either invoke it with one or three arguments.
		</p>
		<p>
			If you only pass one argument, the given object will be registered as "generic" observer.
			"Generic" observer objects should implement a method that matches a naming convention for the events they are interested in.
			For an event named "complete" they must implement a method named: "onCompleteHandler"
		</p>
		<p>
			If you pass three arguments, the first is the object that will be registered as "event" observer.
			The second argument is the event name.
			The third argument is the method of the object that will be invoked once the given event is triggered
		</p>

	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>observer</td>
			<td>
				{Object}
			</td>
			<td>
				Observer object. Required
			</td>
		</tr>
		<tr>
			<td>eventName</td>
			<td>
				{string}
			</td>
			<td>
				Event name. Optional. Required for "event" observers
			</td>
		</tr>
		<tr>
			<td>methodName</td>
			<td>
				{string}
			</td>
			<td>
				Method name. Optional. Required for "event" observers
			</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div id="notifyObservers" class="panel-heading luga-docs-api-heading">.notifyObservers(eventName, payload)</div>
	<div class="panel-body">
		<p>
			Sends a notification to all interested observers registered with the notifier.
		</p>

	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>eventName</td>
			<td>
				{string}
			</td>
			<td>
				Name of the event. Required
			</td>
		</tr>
		<tr>
			<td>payload</td>
			<td>
				{Object}
			</td>
			<td>
				Object containing data to be passed from the point of notification to all interested observers.
				If there is no relevant data to pass, use an empty object. Required
			</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div id="removeObserver" class="panel-heading luga-docs-api-heading">.removeObserver(observer, [eventName], [methodName])</div>
	<div class="panel-body">
		<p>
			Removes the given observer object. The notifier will stop broadcasting notifications to it.
			This method is overloaded. You can either invoke it with one or three arguments
		</p>
		<p>
			If you only pass one argument, the given observer will be removed as "generic" observer
		</p>
		<p>
			If you pass three arguments, the given observer will be removed as "event" observer associated with the given event and method
		</p>
		<p>
			Fails silently if the given object was not registered
		</p>

	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>observer</td>
			<td>
				{Object}
			</td>
			<td>
				Observer object. Required
			</td>
		</tr>
		<tr>
			<td>eventName</td>
			<td>
				{string}
			</td>
			<td>
				Event name. Optional. Required for "event" observers
			</td>
		</tr>
		<tr>
			<td>methodName</td>
			<td>
				{string}
			</td>
			<td>
				Method name. Optional. Required for "event" observers
			</td>
		</tr>
	</table>
</div>