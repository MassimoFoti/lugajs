<div class="panel panel-default">
	<div id="demoronize" class="panel-heading luga-docs-api-heading">luga.string.demoronize(str)</div>
	<div class="panel-body">
		Replace MS Word's non-ISO characters with plausible substitutes
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>str</td>
			<td>
				{String}
			</td>
			<td>
				Incoming string
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="format" class="panel-heading luga-docs-api-heading">luga.string.format(str, args)</div>
	<div class="panel-body">
		Given a string containing placeholders, it assembles a new string
		replacing the placeholders with the strings contained inside the second argument (either an object or an array).
		<br>
		Loosely based on the .NET implementation: <a
			href="http://msdn.microsoft.com/en-us/library/system.string.format.aspx">http://msdn.microsoft.com/en-us/library/system.string.format.aspx</a>
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>str</td>
			<td>
				{String}
			</td>
			<td>
				String containing placeholders
			</td>
		</tr>
		<tr>
			<td>args</td>
			<td>
				{Object|Array.&lt;String&gt;}
			</td>
			<td>
				Either an array of strings or an objects containing name/value pairs in string format
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">// Using an array:
luga.string.format("My name is {0} {1}", ["Ciccio", "Pasticcio"]);
// => "My name is Ciccio Pasticcio"

// Using an object:
luga.string.format("My name is {firstName} {lastName}", {firstName: "Ciccio", lastName: "Pasticcio"});
// => "My name is Ciccio Pasticcio"</code></pre>

</div>

<div class="panel panel-default">
	<div id="queryToMap" class="panel-heading luga-docs-api-heading">luga.string.queryToMap(str)</div>
	<div class="panel-body">
		Given a string in querystring format, return a JavaScript object containing name/value pairs
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>str</td>
			<td>
				{String}
			</td>
			<td>
				Querystring
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{Object}</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>

	<pre><code class="language-javascript">luga.string.queryToMap("?name=Ciccio&lastname=Pasticcio");
// => {name: "Ciccio", lastname: "Pasticcio"}

// If a name has no associated value, the hash contains an entry with an empty string value
luga.string.queryToMap("?name=Ciccio&lastname=");
// => {name: "Ciccio", lastname: ""}

// If the same name is contained multiple times inside the queryString, the matching entry inside the hash is an array:
luga.string.queryToMap("name=Ciccio&box=first&box=second&box=third");
// => {name: "Ciccio", box: ["first", "second", "third"]}</code></pre>

</div>

<div class="panel panel-default">
	<div id="populate" class="panel-heading luga-docs-api-heading">luga.string.populate(str, obj)</div>
	<div class="panel-body">
		Given a string containing placeholders in {key} format, it assembles a new string
		replacing the placeholders with the strings contained inside the second argument keys.
		Unlike luga.string.format, placeholders can match nested properties too. But it's slower
	</div>
	<table class="table table-bordered luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>str</td>
			<td>
				{String}
			</td>
			<td>
				String containing placeholders
			</td>
		</tr>
		<tr>
			<td>obj</td>
			<td>
				{Object}
			</td>
			<td>
				An objects containing name/value pairs in string format
			</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>
	<table class="table table-bordered luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">luga.string.populate("My name is {firstName} {lastName}", {firstName: "Ciccio", lastName: "Pasticcio"});
// => "My name is Ciccio Pasticcio"

// With nested properties:
var nestedObj = { type: "people", person: { firstName: "Ciccio", lastName: "Pasticcio" } };
luga.string.populate("My name is {person.firstName} {person.lastName}", nestedObj);
// => "My name is Ciccio Pasticcio"</code></pre>

</div>