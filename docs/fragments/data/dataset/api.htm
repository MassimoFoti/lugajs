<div class="panel panel-default">
	<div id="constructor" class="panel-heading luga-docs-api-heading">luga.data.DataSet(options)</div>
	<div class="panel-body">
		<p>
			DataSet's constructor. This class triggers the following notifications:

		<ul class="luga-docs-list">
			<li>"dataChanged" every time its data changes.</li>
			<li>"currentRowChanged" every time its currentRow changes.</li>
			<li>"dataSorted" once its data is sorted.</li>
			<li>"preDataSorted" before it attempts to sort its data.</li>
		</ul>

		</p>
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>options.uuid</td>
			<td>
				{String}
			</td>
			<td>
				Unique identifier. Required.
			</td>
		</tr>
		<tr>
			<td>options.records</td>
			<td class="luga-docs-type">
				{Array.&lt;Object&gt;|Object}
			</td>
			<td>
				Records to be loaded, either one single object containing value/name pairs, or an array of name/value
				pairs. Optional.
			</td>
		</tr>
		<tr>
			<td>options.formatter</td>
			<td>
				{Function}
			</td>
			<td>
				A formatter functions to be called once for each row in the dataSet (<a href="#data/dataset/formatter">read
				more</a>). Default to null.
			</td>
		</tr>
		<tr>
			<td>options.filter</td>
			<td>
				{Function}
			</td>
			<td>
				A filter functions to be called once for each row in the dataSet (<a href="#data/dataset/filter">read more</a>).
				Default to null.
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">const testDs = new luga.data.DataSet({uuid: "test"});
</code></pre>

</div>

<div class="panel panel-default">
	<div id="clearFilter" class="panel-heading luga-docs-api-heading">.clearFilter()</div>
	<div class="panel-body">
		<p>
			Removes the current filter function from the dataSet, then triggers a "dataChanged" notification.
			<a href="#data/dataset/filter">See examples</a>
		</p>
	</div>
</div>

<div id="delete" class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.delete(filter)</div>
	<div class="panel-body">
		Delete records matching the given filter.
		If no filter is passed, delete all records.
		Triggers a "currentRowChanged", "stateChanged", then a "dataChanged" notification.
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>filter</td>
			<td class="luga-docs-type">
				{Function}
			</td>
			<td>
				A <a href="#data/dataset/filter">filter function</a>. If specified only records matching the filter will be
				returned. Optional.
				The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">const testDs = new luga.data.DataSet({uuid: "test", records: myData});
	// Delete only records where country = "UK"
	testDs.delete(function(row, rowIndex, dataSet){
	if(row.country === "UK"){
		return null;
	}
	return row;
});
// Delete all
testDs.delete();
</code></pre>

</div>

<div class="panel panel-default">
	<div id="getColumnType" class="panel-heading luga-docs-api-heading">.getColumnType(columnName)</div>
	<div class="panel-body">
		Returns the column type of the specified column. Either "date", "number" or "string".
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>columnName</td>
			<td>
				{String}
			</td>
			<td>
				Name of the column. Required.
			</td>
		</tr>
	</table>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getCurrentRow" class="panel-heading luga-docs-api-heading">.getCurrentRow()</div>
	<div class="panel-body">
		Returns the current row object.
		By default, the current row is the first row of the dataSet, but this can be changed by calling setCurrentRow()
		or setCurrentRowIndex().
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{luga.data.DataSet.row|null}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getCurrentRowId" class="panel-heading luga-docs-api-heading">.getCurrentRowId()</div>
	<div class="panel-body">
		Returns the rowId of the current row. Returns null if there is no current row.
		Do not confuse the rowId of a row with the index of the row.
		RowId is a column that contains a unique identifier for the row.
		This identifier does not change if the rows of the dataSet are sorted.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getCurrentRowIndex" class="panel-heading luga-docs-api-heading">.getCurrentRowIndex()</div>
	<div class="panel-body">
		Returns a zero-based index at which the current row can be found, or -1 if the dataSet is empty.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{Number}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getRecordsCount" class="panel-heading luga-docs-api-heading">.getRecordsCount()</div>
	<div class="panel-body">
		Returns the number of records in the dataSet.
		If the dataSet has a filter, returns the number of filtered records.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{Number}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getRowById" class="panel-heading luga-docs-api-heading">.getRowById(rowId)</div>
	<div class="panel-body">
		Returns the row object associated with the given unique identifier.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr class="luga-docs-type">
			<td>{null|luga.data.DataSet.row}</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>rowId</td>
			<td>
				{String}
			</td>
			<td>
				Unique identifier. Required
			</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getRowByIndex" class="panel-heading luga-docs-api-heading">.getRowByIndex(index)</div>
	<div class="panel-body">
		Returns the row object associated with the given index.
		Throws an exception if the index is out of range.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr class="luga-docs-type">
			<td>{null|luga.data.DataSet.row}</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>index</td>
			<td>
				{Number}
			</td>
			<td>
				Zero-based index. Required
			</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getSortColumn" class="panel-heading luga-docs-api-heading">.getSortColumn()</div>
	<div class="panel-body">
		Returns the name of the column used for the most recent sort.
		Returns an empty string if no sort has been performed yet.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getSortOrder" class="panel-heading luga-docs-api-heading">.getSortOrder()</div>
	<div class="panel-body">
		Returns the order used for the most recent sort.
		eturns an empty string if no sort has been performed yet.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr>
			<td>{String}</td>
		</tr>
	</table>

</div>

<div class="panel panel-default">
	<div id="getState" class="panel-heading luga-docs-api-heading">.getState()</div>
	<div class="panel-body">
		Returns the dataSet's current state.
	</div>

	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr class="luga-docs-type">
			<td>{null|luga.data.STATE}</td>
		</tr>
	</table>

</div>

<div id="insert" class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.insert(records)</div>
	<div class="panel-body">
		Adds rows to a dataSet, then triggers a "stateChanged", then a "dataChanged" notification.
		Be aware that the dataSet use passed data by reference.
		That is, it uses those objects as its row object internally. It does not make a copy.
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>records</td>
			<td class="luga-docs-type">
				{Array.&lt;Object&gt;|Object}
			</td>
			<td>
				Records to be loaded, either one single object, or an array of objects. Required
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">const testDs = new luga.data.DataSet({uuid: "test"});
// Add one single record
testDs.insert({
	"firstName": "Nicole",
	"lastName": "Kidman"
});
// Add more records in one single pass
testDs.insert([
	{ "firstName": "Kate", "lastName": "Beckinsale" },
	{ "firstName": "Jennifer", "lastName": "Connelly" },
	{ "firstName": "Salma", "lastName": "Hayek" }
]);</code></pre>

</div>

<div class="panel panel-default">
	<div id="resetCurrentRowToFirst" class="panel-heading luga-docs-api-heading">.resetCurrentRowToFirst()</div>
	<div class="panel-body">
		Reset the currentRowId to the first record available, then triggers a "currentRowChanged" notification.
	</div>
</div>

<div id="select" class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.select(filter)</div>
	<div class="panel-body">
		Returns an array of the internal row objects that store the records in the dataSet.
		Be aware that modifying any property of a returned object results in a modification of the internal records
		(since records are passed by reference).
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>filter</td>
			<td class="luga-docs-type">
				{Function}
			</td>
			<td>
				An optional filter function. If specified only records matching the filter will be returned. Optional.
				The function is going to be called with this signature: myFilter(row, rowIndex, dataSet).
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Return type</th>
		<tr class="luga-docs-type">
			<td>{Array.&lt;luga.data.DataSet.row&gt;}</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">const testDs = new luga.data.DataSet({uuid: "test"});
// Add records in one single pass
testDs.insert([
	{ "firstName": "Kate", "lastName": "Beckinsale" },
	{ "firstName": "Jennifer", "lastName": "Connelly" },
	{ "firstName": "Salma", "lastName": "Hayek" }
]);
testDs.select(); // => All records returned

// Filter out "Salma"
testDs.delete(function(row, rowIndex, dataSet){
	if(row.firstName === "Salma"){
		return null;
	}
	return row;
});
testDs.select(); // => Only two records returned
</code></pre>

</div>

<div id="setColumnType" class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.setColumnType(columnNames, columnType)</div>
	<div class="panel-body">
		Set a column type for a column. Required for proper sorting of numeric or date data.<br>
		By default data is sorted alpha-numerically, if you want it sorted numerically or by date, set the proper
		columnType.
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>columnNames</td>
			<td class="luga-docs-type">
				{String|Array&lt;String&gt;}
			</td>
			<td>
				Either a single column name or an array of names. Required
			</td>
		</tr>
		<tr>
			<td>columnType</td>
			<td>
				{String}
			</td>
			<td>
				Either "date", "number" or "string"
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">testDs.setColumnType("birthDate", "date");
testDs.setColumnType(["numberCol", "moreNumber"], "number");
</code></pre>

</div>

<div class="panel panel-default">
	<div id="setCurrentRowId" class="panel-heading luga-docs-api-heading">.setCurrentRowId(rowId)</div>
	<div class="panel-body">
		<p>
			Sets the current row of the data set to the row matching the given rowId.
			Throws an exception if the given rowId is invalid.
			If null is passed, no row is selected.
			Triggers a "currentRowChanged" notification.
		</p>
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>rowId</td>
			<td>
				{null|String}
			</td>
			<td>
				New rowId. Required.
			</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div id="setCurrentRowIndex" class="panel-heading luga-docs-api-heading">.setCurrentRowIndex(index)</div>
	<div class="panel-body">
		<p>
			Sets the current row of the dataSet to the one matching the given index.
			Throws an exception if the index is out of range.
			Triggers a "currentRowChanged" notification.
		</p>
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>index</td>
			<td>
				{Number}
			</td>
			<td>
				New index. Required.
			</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div id="setFilter" class="panel-heading luga-docs-api-heading">.setFilter(filter)</div>
	<div class="panel-body">
		<p>
			Replace current filter with a new filter functions, apply the new filter, then triggers a "dataChanged"
			notification.
		</p>

		<p>
			The filter function is used to non-destructively filter the dataSet based on the function return value.
			The function is called once for each row in the dataSet.
			If the filter wishes to add the row to the filtered view of the dataSet, then it must return the row object
			passed into the function.
			If it does not want the row to be in the filtered view of the dataSet, then it must return null.
		</p>

		<p>
			<a href="#data/dataset/filter">See examples</a>
		</p>
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>filter</td>
			<td>
				{Function}
			</td>
			<td>
				A filter functions to be called once for each row in the data set. Required.<br>
				The function is going to be called with this signature: myFilter(row, rowIndex, dataSet)
			</td>
		</tr>
	</table>
</div>

<div class="panel panel-default">
	<div id="sort" class="panel-heading luga-docs-api-heading">.sort(columnNames, sortOrder)</div>
	<div class="panel-body">
		<p>
			Sorts the dataSet using the given column(s) and sort order.
			Fires the following notifications:
			"preDataSorted", "dataSorted" and "dataChanged".
		</p>

		<p>
			You can use build-in traits to <a href="#data/dataset/sort">sort data within a region</a>.
		</p>
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>columnNames</td>
			<td class="luga-docs-type">
				{String|Array&lt;String&gt;}
			</td>
			<td>
				Either a single column name or an array of names. Required
			</td>
		</tr>
		<tr>
			<td>sortOrder</td>
			<td>
				{luga.data.sort.ORDER}
			</td>
			<td>
				Either "ascending", "descending" or "toggle". Optional, default to "toggle"
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">testDs.sort("firstName"); // Toggle sort
testDs.sort("firstName", "ascending");
testDs.sort("firstName", "descending");</code></pre>

</div>

<div id="update" class="panel panel-default">
	<div class="panel-heading luga-docs-api-heading">.update(filter, updater)</div>
	<div class="panel-body">
		Updates rows inside the dataSet.
	</div>
	<table class="table  luga-docs-api">
		<th colspan="3">Arguments</th>
		<tr>
			<td>filter</td>
			<td class="luga-docs-type">
				{Function}
			</td>
			<td>
				Filter function to be used as search criteria. Required.
				The function is going to be called with this signature: myFilter(row, rowIndex, dataSet).
			</td>
		</tr>
		<tr>
			<td>updater</td>
			<td class="luga-docs-type">
				{Function}
			</td>
			<td>
				Updater function. Required.
				The function is going to be called with this signature: myFilter(row, rowIndex, dataSet).
			</td>
		</tr>
	</table>
	<table class="table  luga-docs-api">
		<th>Examples</th>
	</table>

<pre><code class="language-javascript">// Only ladies from UK
	const onlyUk = function(row, rowIndex, dataSet){
	if(row.country === "UK"){
		return row;
	}
	return null;
};
// Use long country name
const longUk = function(row, rowIndex, dataSet){
	row.country = "United Kingdom";
	return row;
};

myDataset.update(onlyUk, longUk);</code></pre>