<script>
	(function(){
		"use strict";

		var tsvDs = new luga.data.TsvDataset({
			uuid: "playersDs",
			url: "../test/fixtures/data/jazzPlayersTsv.txt"
		});

		luga.dom.ready(function(){
			tsvDs.loadData();
		});

	}());
</script>
<script id="peopleTable" type="text/x-handlebars-template" src="templates/people-table.hbs"></script>

<div class="panel panel-default">
	<div class="panel-heading">Writing custom dataSets</div>
	<div class="panel-body">
		<p>
			Luga Data was written with extensibility in mind.
			The common, essential features are available out of the box, for anything else, you can extend and
			customize.
		</p>

		<p>
			Whenever you want to write a custom dataSet class, you first have to choose between three different base
			classes to extend:
		</p>
		<ul class="luga-docs-list">
			<li>
				<a href="../src/luga.data.DataSet.js">luga.data.DataSet</a>
				is the base dataSet class, it implements all the common API, but has no XHR support.
			</li>
			<li>
				<a href="../src/luga.data.HttpDataSet.js">luga.data.HttpDataSet</a>
				is an abstract class, you can't instantiate it directly. It adds XHR features on top of
				luga.data.DataSet.
				Use this as base class if your custom dataSet will fetch data from an URL that is not in JSON format.
			</li>
			<li>
				<a href="../src/luga.data.JsonDataSet.js">luga.data.JsonDataSet</a>
				Use this as base class if your custom dataSet is going to consume data in JSON format.
			</li>
		</ul>
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">luga.data.TsvDataset</div>
	<div class="panel-body">
		<p>
			For this example we are going to write a custom dataSet to consume <a
				href="https://en.wikipedia.org/wiki/Tab-separated_values">tab-separated values (TSV)</a>.
			Since we want to fetch TSV using XHR, we will use <a href="../src/luga.data.HttpDataSet.js">luga.data.HttpDataSet</a>
			as base class.
		</p>
	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">The JavaScript code</div>
	<div class="panel-body">
		<p>
			Let's take a look at the code, one bit at time.
			First, we ensure our dataSet inherit from <a href="../src/luga.data.HttpDataSet.js">luga.data.HttpDataSet</a>.
		</p>

<pre><code class="language-javascript">luga.extend(luga.data.HttpDataSet, this, [options]);
</code></pre>

		<p>
			The most important part is the .loadRecords() method.
			This method is abstract in <a href="../src/luga.data.HttpDataset.js">luga.data.HttpDataSet</a> and
			must be implemented by any class extending it.
			It's the method that gets invoked after a successfully XHR request.
		</p>

		<p>
			We perform a few actions here. We keep a copy of the raw TSV data.
			Then we use a TSV-specific extractRecords() private method to turn the TSV string into an array of objects/records.
			Finally, we insert all records at once.
			This will trigger a "dataChanged" notification and any associated region will reflect the new state:
		</p>

<pre><code class="language-javascript">/**
 * Retrieve TSV data from an HTTP response
 * @param {luga.xhr.response} response
 * @override
 */
this.loadRecords = function(response){
	self.rawTsv = response.responseText;
	const records = extractRecords(response.responseText);
	self.insert(records);
};
</code></pre>

		<p>
			There are also a couple more public and private methods, that are specific to TSV.
			We recommend you to take a look at the complete source code inside <a href="../src/luga.data.TsvDataset.js">luga.data.TsvDataset</a>
		</p>

	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">TsvDataset in action</div>
	<div class="panel-body">
		<p>
			Here you can see the dataSet in action, retrieving data from a <a href="../test/fixtures/data/jazzPlayersTsv.txt">TSV file</a>.
		</p>

		<div data-lugaregion="true"
			 data-lugaregion-datasource-uuid="playersDs"
			 data-lugaregion-template-id="peopleTable"></div>

	</div>
</div>