<script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script>
<script>
	luga.namespace("test");
	test.ladiesMaster = new luga.data.JsonDataSet({
		uuid: "ladies",
		url: "../test/fixtures/data/people.json",
		path: "ladies"
	});
	test.ladyDetails = new luga.data.DetailSet({uuid: "lady", parentDataSet: test.ladiesMaster});
	luga.dom.ready(function(){
		test.ladiesMaster.loadData();
	});

	var customRegion = function(options){
		luga.extend(luga.data.region.Base, this, [options]);

		/** @override */
		this.render = function(){
			const records = this.dataSource.getContext().entities;
			let htmlStr = "<ul class='luga-docs-list'>";
			records.forEach(function(element){
				htmlStr += "<li>";
				htmlStr += "<a href='javascript:;' onclick='test.ladiesMaster.setCurrentRowId(\"" + element.lugaRowId + "\")'>";
				htmlStr += element.lastName;
				htmlStr += "</a></li>";
			});
			htmlStr += "</ul>";
			this.config.node.innerHTML = htmlStr;
		};
	};

	/**
	 * This simple implementation of a custom region handler is totally ad-hoc
	 * It also uses template literals and as such will not work in IE11
	 * @extends luga.data.region.Base
	 */
	var templateLiteral = function(options){
		luga.extend(luga.data.region.Base, this, [options]);

		/** @override */
		this.render = function(){
			const context = this.dataSource.getContext();
			// It's a DetailSet
			if((context.entity !== undefined) && (context.entity !== null)){
				this.config.node.innerHTML = `
				  <ul>
					<li>Firstname: ${context.entity.firstName}</li>
					<li>Lastname: ${context.entity.lastName}</li>
					<li>Country: ${context.entity.country}</li>
				  </ul>
				`
			}
		};

	};

</script>

<script id="detailsTemplate" type="text/x-underscore-template">
	<ul>
		<li>Firstname: <%= firstName %></li>
		<li>Lastname: <%= lastName %></li>
		<li>Country: <%= country %></li>
	</ul>
</script>

<div class="panel panel-default">
	<div class="panel-heading">Custom regions and templating</div>
	<div class="panel-body">
		<p>
			You can fully customize the way a region is rendered, either using a different templating engine or not
			using templating at all.
		</p>

		<div class="alert alert-warning" role="alert">
			<strong>Warning!</strong><br>
			This example leverages <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">template literals</a>
			a feature not supported in IE11.
		</div>

		<p>
			Add the data-lugaregion-type attribute with a value that matches an existing JavaScript
			constructor function:
		</p>

<pre><code class="language-markup">&lt;div data-lugaregion="true"
	data-lugaregion-datasource-uuid="lady"
	data-lugaregion-type="templateLiteral"&gt;&lt/div&gt;</code></pre>

		<p>
			The constructor should extend the luga.data.region.Base class and override its render() method:
		</p>

<pre><code class="line-numbers language-javascript">/**
 * This simple implementation of a custom region handler is totally ad-hoc
 * It also uses template literals and as such will not work in IE11
 * @extends luga.data.region.Base
 */
var templateLiteral = function(options){
	luga.extend(luga.data.region.Base, this, [options]);

	/** @override */
	this.render = function(){
		const context = this.dataSource.getContext();
		// It's a DetailSet
		if((context.entity !== undefined) && (context.entity !== null)){
			this.config.node.innerHTML = `
			  &lt;ul&gt;
				&lt;li&gt;Firstname: ${context.entity.firstName}&lt;/li&gt;
				&lt;li&gt;Lastname: ${context.entity.lastName}&lt;/li&gt;
				&lt;li&gt;Country: ${context.entity.country}&lt;/li&gt;
			  &lt;/ul&gt;
			`
		}
	};

};</code></pre>

		<div class="alert alert-info" role="alert">
			<strong>Reminder</strong><br>
			For default rendering, using Handlebars as template engine, there is no need to specify the
			data-lugaregion-type attribute, since luga.data.Region is used by default.
		</div>

	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">Master (with no templating)</div>
	<div class="panel-body">

	<p>This oversimplified code sample show how you could create a custom region that does not use any template engine</p>

<pre><code class="line-numbers language-javascript">// We use var since it must be visible in the global scope
var customRegion = function(options){
	luga.extend(luga.data.region.Base, this, [options]);

	/** @override */
	this.render = function(){
		const records = this.dataSource.getContext().entities;
		let htmlStr = "&lt;ul class='luga-docs-list'&gt;";
		records.forEach(function(element){
			htmlStr += "<li>";
			htmlStr += "<a href='javascript:;' onclick='test.ladiesMaster.setCurrentRowId(\"" + element.lugaRowId + "\")'>";
			htmlStr += element.lastName;
			htmlStr += "</a></li>";
		});
		htmlStr += "&lt;/ul&gt;";
		this.config.node.html(htmlStr);
	};

};</code></pre>
		
<pre><code class="language-markup">&lt;div data-lugaregion="true"
	data-lugaregion-datasource-uuid="ladies"
	data-lugaregion-type="customRegion"&gt;&lt;/div&gt;</code></pre>

	<div data-lugaregion="true" data-lugaregion-datasource-uuid="ladies"
		 data-lugaregion-type="customRegion"></div>

	</div>
</div>

<div class="panel panel-default">
	<div class="panel-heading">Details (using template literals)</div>
	<div class="panel-body">

		<div data-lugaregion="true" data-lugaregion-datasource-uuid="lady"
			 data-lugaregion-type="templateLiteral"></div>

	</div>
</div>