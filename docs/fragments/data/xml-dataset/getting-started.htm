<script>
	(function(){
		"use strict";

		var peopleDs = new luga.data.XmlDataSet({
			uuid: "people",
			url: "../test/fixtures/data/people.xml",
			path: "//ladies/person"
		});

		luga.dom.ready(function(){
			// Fetch data only once the DOM is ready
			peopleDs.loadData();
		});

	}());
</script>
<script id="peopleTable" type="text/x-handlebars-template">
	<table class="table  table-striped">
		<th>
			First Name
		</th>
		<th>
			Last Name
		</th>
		<th>
			Country
		</th>
		{{#each entities}}
		<tr>
			<td>{{firstName}}</td>
			<td>{{lastName}}</td>
			<td>{{_country}}</td>
		</tr>
		{{/each}}
	</table>
</script>

<div class="panel panel-default">
	<div class="panel-heading">luga.data.XmlDataSet</div>
	<div class="panel-body">
		<p>
			Luga Data was written with few, simple, goals in mind.
			Make it super easy to fetch either JSON or XML from a REST endpoint and quickly generate HTML was at the top
			of the list.
		</p>

		<p>
			For the sake of the demo we are using a static <a href="../test/fixtures/data/people.xml">XML file
			here</a>.
			All you need to do to get up and running is to add this JavaScript snippet to the page:
		</p>

<pre><code class="line-numbers language-javascript">(function(){
	"use strict";
	var peopleDs = new luga.data.XmlDataSet({
		uuid: "people",
		url: "../test/fixtures/data/people.xml",
		path: "//ladies/person"
	});
	luga.dom.ready(function(){
		// Fetch data only once the DOM is ready
		peopleDs.loadData();
	});
}());
</code></pre>

		<div class="alert alert-warning" role="alert">
			<strong>Warning!</strong><br>
			IE11 may fail to use the XML features due to security restrictions on Active-X.
			If you get a <strong>Automation server can't create object</strong> error, try lowering the security level.
		</div>

		<p>
			Another &lt;scrip&gt; tag containing the <a href="#data/region/handlebars">Handlebars</a> template:
		</p>

<pre><code class="line-numbers language-markup">&lt;script id="peopleTable" type="text/x-handlebars-template"&gt;
	&lt;table class="table  table-striped"&gt;
		&lt;th&gt;
			First Name
		&lt;/th&gt;
		&lt;th&gt;
			Last Name
		&lt;/th&gt;
		&lt;th&gt;
			Country
		&lt;/th&gt;
		{{#each entities}}
		&lt;tr&gt;
			&lt;td&gt;{{firstName}}&lt;/td&gt;
			&lt;td&gt;{{lastName}}&lt;/td&gt;
			&lt;td&gt;{{_country}}&lt;/td&gt;
		&lt;/tr&gt;
		{{/each}}
	&lt;/table&gt;
&lt;/script&gt;
</code></pre>

		<div class="alert alert-warning" role="alert">
			<strong>Warning!</strong><br>
			The template above uses {{_country}} instead of {{country}} because the country data is contained inside an
			attribute of the XML tag.
			In order to avoid clashes between attributes and child nodes using the same name, the attribute's name is
			prefixed with an underscore.
			<br>
			Why we used "_" instead of "@"? Unfortunately "@" is not a valid <a
				href="http://handlebarsjs.com/expressions.html">Handlebars identifier</a> :-(
		</div>

		<p>
			Finally, you add an HTML tag with some <a href="#data/region/syntax">custom attributes</a>:
		</p>

<pre><code class="line-numbers language-markup">&lt;div data-lugaregion="true"
	data-lugaregion-datasource-uuid="people"
	data-lugaregion-template-id="peopleTable"&gt;&lt;/div&gt;
</code></pre>

		<p>
			Below you can see the end result:
		</p>

		<div data-lugaregion="true" data-lugaregion-datasource-uuid="people"
			 data-lugaregion-template-id="peopleTable"></div>

		<p>
			Now that you are up and running, you may want to dig a bit deeper,
			understand why we passed a <a href="#data/xml-dataset/path">path</a> to the constructor,
			what you can do with a <a href="#data/region/getting-started">region</a>
			or take a look at <a href="#data/dataset/databinding">databinding</a>.
		</p>

	</div>
</div>